(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Photosynthesis"] = factory();
	else
		root["Photosynthesis"] = factory();
})(this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@svgdotjs/svg.js/src/animation/Animator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/animation/Animator.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");
/* harmony import */ var _Queue_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Queue.js */ "./node_modules/@svgdotjs/svg.js/src/animation/Queue.js");



const Animator = {
  nextDraw: null,
  frames: new _Queue_js__WEBPACK_IMPORTED_MODULE_1__["default"](),
  timeouts: new _Queue_js__WEBPACK_IMPORTED_MODULE_1__["default"](),
  immediates: new _Queue_js__WEBPACK_IMPORTED_MODULE_1__["default"](),
  timer: () => _utils_window_js__WEBPACK_IMPORTED_MODULE_0__.globals.window.performance || _utils_window_js__WEBPACK_IMPORTED_MODULE_0__.globals.window.Date,
  transforms: [],

  frame(fn) {
    // Store the node
    const node = Animator.frames.push({ run: fn })

    // Request an animation frame if we don't have one
    if (Animator.nextDraw === null) {
      Animator.nextDraw = _utils_window_js__WEBPACK_IMPORTED_MODULE_0__.globals.window.requestAnimationFrame(Animator._draw)
    }

    // Return the node so we can remove it easily
    return node
  },

  timeout(fn, delay) {
    delay = delay || 0

    // Work out when the event should fire
    const time = Animator.timer().now() + delay

    // Add the timeout to the end of the queue
    const node = Animator.timeouts.push({ run: fn, time: time })

    // Request another animation frame if we need one
    if (Animator.nextDraw === null) {
      Animator.nextDraw = _utils_window_js__WEBPACK_IMPORTED_MODULE_0__.globals.window.requestAnimationFrame(Animator._draw)
    }

    return node
  },

  immediate(fn) {
    // Add the immediate fn to the end of the queue
    const node = Animator.immediates.push(fn)
    // Request another animation frame if we need one
    if (Animator.nextDraw === null) {
      Animator.nextDraw = _utils_window_js__WEBPACK_IMPORTED_MODULE_0__.globals.window.requestAnimationFrame(Animator._draw)
    }

    return node
  },

  cancelFrame(node) {
    node != null && Animator.frames.remove(node)
  },

  clearTimeout(node) {
    node != null && Animator.timeouts.remove(node)
  },

  cancelImmediate(node) {
    node != null && Animator.immediates.remove(node)
  },

  _draw(now) {
    // Run all the timeouts we can run, if they are not ready yet, add them
    // to the end of the queue immediately! (bad timeouts!!! [sarcasm])
    let nextTimeout = null
    const lastTimeout = Animator.timeouts.last()
    while ((nextTimeout = Animator.timeouts.shift())) {
      // Run the timeout if its time, or push it to the end
      if (now >= nextTimeout.time) {
        nextTimeout.run()
      } else {
        Animator.timeouts.push(nextTimeout)
      }

      // If we hit the last item, we should stop shifting out more items
      if (nextTimeout === lastTimeout) break
    }

    // Run all of the animation frames
    let nextFrame = null
    const lastFrame = Animator.frames.last()
    while (nextFrame !== lastFrame && (nextFrame = Animator.frames.shift())) {
      nextFrame.run(now)
    }

    let nextImmediate = null
    while ((nextImmediate = Animator.immediates.shift())) {
      nextImmediate()
    }

    // If we have remaining timeouts or frames, draw until we don't anymore
    Animator.nextDraw =
      Animator.timeouts.first() || Animator.frames.first()
        ? _utils_window_js__WEBPACK_IMPORTED_MODULE_0__.globals.window.requestAnimationFrame(Animator._draw)
        : null
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Animator);


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/animation/Controller.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/animation/Controller.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Controller: () => (/* binding */ Controller),
/* harmony export */   Ease: () => (/* binding */ Ease),
/* harmony export */   PID: () => (/* binding */ PID),
/* harmony export */   Spring: () => (/* binding */ Spring),
/* harmony export */   Stepper: () => (/* binding */ Stepper),
/* harmony export */   easing: () => (/* binding */ easing)
/* harmony export */ });
/* harmony import */ var _modules_core_defaults_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/core/defaults.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/defaults.js");
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");



/***
Base Class
==========
The base stepper class that will be
***/

function makeSetterGetter(k, f) {
  return function (v) {
    if (v == null) return this[k]
    this[k] = v
    if (f) f.call(this)
    return this
  }
}

const easing = {
  '-': function (pos) {
    return pos
  },
  '<>': function (pos) {
    return -Math.cos(pos * Math.PI) / 2 + 0.5
  },
  '>': function (pos) {
    return Math.sin((pos * Math.PI) / 2)
  },
  '<': function (pos) {
    return -Math.cos((pos * Math.PI) / 2) + 1
  },
  bezier: function (x1, y1, x2, y2) {
    // see https://www.w3.org/TR/css-easing-1/#cubic-bezier-algo
    return function (t) {
      if (t < 0) {
        if (x1 > 0) {
          return (y1 / x1) * t
        } else if (x2 > 0) {
          return (y2 / x2) * t
        } else {
          return 0
        }
      } else if (t > 1) {
        if (x2 < 1) {
          return ((1 - y2) / (1 - x2)) * t + (y2 - x2) / (1 - x2)
        } else if (x1 < 1) {
          return ((1 - y1) / (1 - x1)) * t + (y1 - x1) / (1 - x1)
        } else {
          return 1
        }
      } else {
        return 3 * t * (1 - t) ** 2 * y1 + 3 * t ** 2 * (1 - t) * y2 + t ** 3
      }
    }
  },
  // see https://www.w3.org/TR/css-easing-1/#step-timing-function-algo
  steps: function (steps, stepPosition = 'end') {
    // deal with "jump-" prefix
    stepPosition = stepPosition.split('-').reverse()[0]

    let jumps = steps
    if (stepPosition === 'none') {
      --jumps
    } else if (stepPosition === 'both') {
      ++jumps
    }

    // The beforeFlag is essentially useless
    return (t, beforeFlag = false) => {
      // Step is called currentStep in referenced url
      let step = Math.floor(t * steps)
      const jumping = (t * step) % 1 === 0

      if (stepPosition === 'start' || stepPosition === 'both') {
        ++step
      }

      if (beforeFlag && jumping) {
        --step
      }

      if (t >= 0 && step < 0) {
        step = 0
      }

      if (t <= 1 && step > jumps) {
        step = jumps
      }

      return step / jumps
    }
  }
}

class Stepper {
  done() {
    return false
  }
}

/***
Easing Functions
================
***/

class Ease extends Stepper {
  constructor(fn = _modules_core_defaults_js__WEBPACK_IMPORTED_MODULE_0__.timeline.ease) {
    super()
    this.ease = easing[fn] || fn
  }

  step(from, to, pos) {
    if (typeof from !== 'number') {
      return pos < 1 ? from : to
    }
    return from + (to - from) * this.ease(pos)
  }
}

/***
Controller Types
================
***/

class Controller extends Stepper {
  constructor(fn) {
    super()
    this.stepper = fn
  }

  done(c) {
    return c.done
  }

  step(current, target, dt, c) {
    return this.stepper(current, target, dt, c)
  }
}

function recalculate() {
  // Apply the default parameters
  const duration = (this._duration || 500) / 1000
  const overshoot = this._overshoot || 0

  // Calculate the PID natural response
  const eps = 1e-10
  const pi = Math.PI
  const os = Math.log(overshoot / 100 + eps)
  const zeta = -os / Math.sqrt(pi * pi + os * os)
  const wn = 3.9 / (zeta * duration)

  // Calculate the Spring values
  this.d = 2 * zeta * wn
  this.k = wn * wn
}

class Spring extends Controller {
  constructor(duration = 500, overshoot = 0) {
    super()
    this.duration(duration).overshoot(overshoot)
  }

  step(current, target, dt, c) {
    if (typeof current === 'string') return current
    c.done = dt === Infinity
    if (dt === Infinity) return target
    if (dt === 0) return current

    if (dt > 100) dt = 16

    dt /= 1000

    // Get the previous velocity
    const velocity = c.velocity || 0

    // Apply the control to get the new position and store it
    const acceleration = -this.d * velocity - this.k * (current - target)
    const newPosition = current + velocity * dt + (acceleration * dt * dt) / 2

    // Store the velocity
    c.velocity = velocity + acceleration * dt

    // Figure out if we have converged, and if so, pass the value
    c.done = Math.abs(target - newPosition) + Math.abs(velocity) < 0.002
    return c.done ? target : newPosition
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.extend)(Spring, {
  duration: makeSetterGetter('_duration', recalculate),
  overshoot: makeSetterGetter('_overshoot', recalculate)
})

class PID extends Controller {
  constructor(p = 0.1, i = 0.01, d = 0, windup = 1000) {
    super()
    this.p(p).i(i).d(d).windup(windup)
  }

  step(current, target, dt, c) {
    if (typeof current === 'string') return current
    c.done = dt === Infinity

    if (dt === Infinity) return target
    if (dt === 0) return current

    const p = target - current
    let i = (c.integral || 0) + p * dt
    const d = (p - (c.error || 0)) / dt
    const windup = this._windup

    // antiwindup
    if (windup !== false) {
      i = Math.max(-windup, Math.min(i, windup))
    }

    c.error = p
    c.integral = i

    c.done = Math.abs(p) < 0.001

    return c.done ? target : current + (this.P * p + this.I * i + this.D * d)
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.extend)(PID, {
  windup: makeSetterGetter('_windup'),
  p: makeSetterGetter('P'),
  i: makeSetterGetter('I'),
  d: makeSetterGetter('D')
})


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/animation/Morphable.js":
/*!******************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/animation/Morphable.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NonMorphable: () => (/* binding */ NonMorphable),
/* harmony export */   ObjectBag: () => (/* binding */ ObjectBag),
/* harmony export */   TransformBag: () => (/* binding */ TransformBag),
/* harmony export */   "default": () => (/* binding */ Morphable),
/* harmony export */   makeMorphable: () => (/* binding */ makeMorphable),
/* harmony export */   registerMorphableType: () => (/* binding */ registerMorphableType)
/* harmony export */ });
/* harmony import */ var _Controller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Controller.js */ "./node_modules/@svgdotjs/svg.js/src/animation/Controller.js");
/* harmony import */ var _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/core/regex.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js");
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _types_Color_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types/Color.js */ "./node_modules/@svgdotjs/svg.js/src/types/Color.js");
/* harmony import */ var _types_PathArray_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../types/PathArray.js */ "./node_modules/@svgdotjs/svg.js/src/types/PathArray.js");
/* harmony import */ var _types_SVGArray_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../types/SVGArray.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGArray.js");
/* harmony import */ var _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../types/SVGNumber.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js");








const getClassForType = (value) => {
  const type = typeof value

  if (type === 'number') {
    return _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_6__["default"]
  } else if (type === 'string') {
    if (_types_Color_js__WEBPACK_IMPORTED_MODULE_3__["default"].isColor(value)) {
      return _types_Color_js__WEBPACK_IMPORTED_MODULE_3__["default"]
    } else if (_modules_core_regex_js__WEBPACK_IMPORTED_MODULE_1__.delimiter.test(value)) {
      return _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_1__.isPathLetter.test(value) ? _types_PathArray_js__WEBPACK_IMPORTED_MODULE_4__["default"] : _types_SVGArray_js__WEBPACK_IMPORTED_MODULE_5__["default"]
    } else if (_modules_core_regex_js__WEBPACK_IMPORTED_MODULE_1__.numberAndUnit.test(value)) {
      return _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_6__["default"]
    } else {
      return NonMorphable
    }
  } else if (morphableTypes.indexOf(value.constructor) > -1) {
    return value.constructor
  } else if (Array.isArray(value)) {
    return _types_SVGArray_js__WEBPACK_IMPORTED_MODULE_5__["default"]
  } else if (type === 'object') {
    return ObjectBag
  } else {
    return NonMorphable
  }
}

class Morphable {
  constructor(stepper) {
    this._stepper = stepper || new _Controller_js__WEBPACK_IMPORTED_MODULE_0__.Ease('-')

    this._from = null
    this._to = null
    this._type = null
    this._context = null
    this._morphObj = null
  }

  at(pos) {
    return this._morphObj.morph(
      this._from,
      this._to,
      pos,
      this._stepper,
      this._context
    )
  }

  done() {
    const complete = this._context.map(this._stepper.done).reduce(function (
      last,
      curr
    ) {
      return last && curr
    }, true)
    return complete
  }

  from(val) {
    if (val == null) {
      return this._from
    }

    this._from = this._set(val)
    return this
  }

  stepper(stepper) {
    if (stepper == null) return this._stepper
    this._stepper = stepper
    return this
  }

  to(val) {
    if (val == null) {
      return this._to
    }

    this._to = this._set(val)
    return this
  }

  type(type) {
    // getter
    if (type == null) {
      return this._type
    }

    // setter
    this._type = type
    return this
  }

  _set(value) {
    if (!this._type) {
      this.type(getClassForType(value))
    }

    let result = new this._type(value)
    if (this._type === _types_Color_js__WEBPACK_IMPORTED_MODULE_3__["default"]) {
      result = this._to
        ? result[this._to[4]]()
        : this._from
          ? result[this._from[4]]()
          : result
    }

    if (this._type === ObjectBag) {
      result = this._to
        ? result.align(this._to)
        : this._from
          ? result.align(this._from)
          : result
    }

    result = result.toConsumable()

    this._morphObj = this._morphObj || new this._type()
    this._context =
      this._context ||
      Array.apply(null, Array(result.length))
        .map(Object)
        .map(function (o) {
          o.done = true
          return o
        })
    return result
  }
}

class NonMorphable {
  constructor(...args) {
    this.init(...args)
  }

  init(val) {
    val = Array.isArray(val) ? val[0] : val
    this.value = val
    return this
  }

  toArray() {
    return [this.value]
  }

  valueOf() {
    return this.value
  }
}

class TransformBag {
  constructor(...args) {
    this.init(...args)
  }

  init(obj) {
    if (Array.isArray(obj)) {
      obj = {
        scaleX: obj[0],
        scaleY: obj[1],
        shear: obj[2],
        rotate: obj[3],
        translateX: obj[4],
        translateY: obj[5],
        originX: obj[6],
        originY: obj[7]
      }
    }

    Object.assign(this, TransformBag.defaults, obj)
    return this
  }

  toArray() {
    const v = this

    return [
      v.scaleX,
      v.scaleY,
      v.shear,
      v.rotate,
      v.translateX,
      v.translateY,
      v.originX,
      v.originY
    ]
  }
}

TransformBag.defaults = {
  scaleX: 1,
  scaleY: 1,
  shear: 0,
  rotate: 0,
  translateX: 0,
  translateY: 0,
  originX: 0,
  originY: 0
}

const sortByKey = (a, b) => {
  return a[0] < b[0] ? -1 : a[0] > b[0] ? 1 : 0
}

class ObjectBag {
  constructor(...args) {
    this.init(...args)
  }

  align(other) {
    const values = this.values
    for (let i = 0, il = values.length; i < il; ++i) {
      // If the type is the same we only need to check if the color is in the correct format
      if (values[i + 1] === other[i + 1]) {
        if (values[i + 1] === _types_Color_js__WEBPACK_IMPORTED_MODULE_3__["default"] && other[i + 7] !== values[i + 7]) {
          const space = other[i + 7]
          const color = new _types_Color_js__WEBPACK_IMPORTED_MODULE_3__["default"](this.values.splice(i + 3, 5))
            [space]()
            .toArray()
          this.values.splice(i + 3, 0, ...color)
        }

        i += values[i + 2] + 2
        continue
      }

      if (!other[i + 1]) {
        return this
      }

      // The types differ, so we overwrite the new type with the old one
      // And initialize it with the types default (e.g. black for color or 0 for number)
      const defaultObject = new other[i + 1]().toArray()

      // Than we fix the values array
      const toDelete = values[i + 2] + 3

      values.splice(
        i,
        toDelete,
        other[i],
        other[i + 1],
        other[i + 2],
        ...defaultObject
      )

      i += values[i + 2] + 2
    }
    return this
  }

  init(objOrArr) {
    this.values = []

    if (Array.isArray(objOrArr)) {
      this.values = objOrArr.slice()
      return
    }

    objOrArr = objOrArr || {}
    const entries = []

    for (const i in objOrArr) {
      const Type = getClassForType(objOrArr[i])
      const val = new Type(objOrArr[i]).toArray()
      entries.push([i, Type, val.length, ...val])
    }

    entries.sort(sortByKey)

    this.values = entries.reduce((last, curr) => last.concat(curr), [])
    return this
  }

  toArray() {
    return this.values
  }

  valueOf() {
    const obj = {}
    const arr = this.values

    // for (var i = 0, len = arr.length; i < len; i += 2) {
    while (arr.length) {
      const key = arr.shift()
      const Type = arr.shift()
      const num = arr.shift()
      const values = arr.splice(0, num)
      obj[key] = new Type(values) // .valueOf()
    }

    return obj
  }
}

const morphableTypes = [NonMorphable, TransformBag, ObjectBag]

function registerMorphableType(type = []) {
  morphableTypes.push(...[].concat(type))
}

function makeMorphable() {
  (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_2__.extend)(morphableTypes, {
    to(val) {
      return new Morphable()
        .type(this.constructor)
        .from(this.toArray()) // this.valueOf())
        .to(val)
    },
    fromArray(arr) {
      this.init(arr)
      return this
    },
    toConsumable() {
      return this.toArray()
    },
    morph(from, to, pos, stepper, context) {
      const mapper = function (i, index) {
        return stepper.step(i, to[index], pos, context[index], context)
      }

      return this.fromArray(from.map(mapper))
    }
  })
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/animation/Queue.js":
/*!**************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/animation/Queue.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Queue)
/* harmony export */ });
class Queue {
  constructor() {
    this._first = null
    this._last = null
  }

  // Shows us the first item in the list
  first() {
    return this._first && this._first.value
  }

  // Shows us the last item in the list
  last() {
    return this._last && this._last.value
  }

  push(value) {
    // An item stores an id and the provided value
    const item =
      typeof value.next !== 'undefined'
        ? value
        : { value: value, next: null, prev: null }

    // Deal with the queue being empty or populated
    if (this._last) {
      item.prev = this._last
      this._last.next = item
      this._last = item
    } else {
      this._last = item
      this._first = item
    }

    // Return the current item
    return item
  }

  // Removes the item that was returned from the push
  remove(item) {
    // Relink the previous item
    if (item.prev) item.prev.next = item.next
    if (item.next) item.next.prev = item.prev
    if (item === this._last) this._last = item.prev
    if (item === this._first) this._first = item.next

    // Invalidate item
    item.prev = null
    item.next = null
  }

  shift() {
    // Check if we have a value
    const remove = this._first
    if (!remove) return null

    // If we do, remove it and relink things
    this._first = remove.next
    if (this._first) this._first.prev = null
    this._last = this._first ? this._last : null
    return remove.value
  }
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/animation/Runner.js":
/*!***************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/animation/Runner.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FakeRunner: () => (/* binding */ FakeRunner),
/* harmony export */   RunnerArray: () => (/* binding */ RunnerArray),
/* harmony export */   "default": () => (/* binding */ Runner)
/* harmony export */ });
/* harmony import */ var _Controller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Controller.js */ "./node_modules/@svgdotjs/svg.js/src/animation/Controller.js");
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _modules_core_gradiented_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/core/gradiented.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/gradiented.js");
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils.js */ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js");
/* harmony import */ var _modules_core_defaults_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/core/defaults.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/defaults.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _modules_core_circled_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../modules/core/circled.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/circled.js");
/* harmony import */ var _Animator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Animator.js */ "./node_modules/@svgdotjs/svg.js/src/animation/Animator.js");
/* harmony import */ var _types_Box_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../types/Box.js */ "./node_modules/@svgdotjs/svg.js/src/types/Box.js");
/* harmony import */ var _types_EventTarget_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../types/EventTarget.js */ "./node_modules/@svgdotjs/svg.js/src/types/EventTarget.js");
/* harmony import */ var _types_Matrix_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../types/Matrix.js */ "./node_modules/@svgdotjs/svg.js/src/types/Matrix.js");
/* harmony import */ var _Morphable_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Morphable.js */ "./node_modules/@svgdotjs/svg.js/src/animation/Morphable.js");
/* harmony import */ var _types_Point_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../types/Point.js */ "./node_modules/@svgdotjs/svg.js/src/types/Point.js");
/* harmony import */ var _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../types/SVGNumber.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js");
/* harmony import */ var _Timeline_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Timeline.js */ "./node_modules/@svgdotjs/svg.js/src/animation/Timeline.js");
















class Runner extends _types_EventTarget_js__WEBPACK_IMPORTED_MODULE_9__["default"] {
  constructor(options) {
    super()

    // Store a unique id on the runner, so that we can identify it later
    this.id = Runner.id++

    // Ensure a default value
    options = options == null ? _modules_core_defaults_js__WEBPACK_IMPORTED_MODULE_4__.timeline.duration : options

    // Ensure that we get a controller
    options = typeof options === 'function' ? new _Controller_js__WEBPACK_IMPORTED_MODULE_0__.Controller(options) : options

    // Declare all of the variables
    this._element = null
    this._timeline = null
    this.done = false
    this._queue = []

    // Work out the stepper and the duration
    this._duration = typeof options === 'number' && options
    this._isDeclarative = options instanceof _Controller_js__WEBPACK_IMPORTED_MODULE_0__.Controller
    this._stepper = this._isDeclarative ? options : new _Controller_js__WEBPACK_IMPORTED_MODULE_0__.Ease()

    // We copy the current values from the timeline because they can change
    this._history = {}

    // Store the state of the runner
    this.enabled = true
    this._time = 0
    this._lastTime = 0

    // At creation, the runner is in reset state
    this._reseted = true

    // Save transforms applied to this runner
    this.transforms = new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_10__["default"]()
    this.transformId = 1

    // Looping variables
    this._haveReversed = false
    this._reverse = false
    this._loopsDone = 0
    this._swing = false
    this._wait = 0
    this._times = 1

    this._frameId = null

    // Stores how long a runner is stored after being done
    this._persist = this._isDeclarative ? true : null
  }

  static sanitise(duration, delay, when) {
    // Initialise the default parameters
    let times = 1
    let swing = false
    let wait = 0
    duration = duration ?? _modules_core_defaults_js__WEBPACK_IMPORTED_MODULE_4__.timeline.duration
    delay = delay ?? _modules_core_defaults_js__WEBPACK_IMPORTED_MODULE_4__.timeline.delay
    when = when || 'last'

    // If we have an object, unpack the values
    if (typeof duration === 'object' && !(duration instanceof _Controller_js__WEBPACK_IMPORTED_MODULE_0__.Stepper)) {
      delay = duration.delay ?? delay
      when = duration.when ?? when
      swing = duration.swing || swing
      times = duration.times ?? times
      wait = duration.wait ?? wait
      duration = duration.duration ?? _modules_core_defaults_js__WEBPACK_IMPORTED_MODULE_4__.timeline.duration
    }

    return {
      duration: duration,
      delay: delay,
      swing: swing,
      times: times,
      wait: wait,
      when: when
    }
  }

  active(enabled) {
    if (enabled == null) return this.enabled
    this.enabled = enabled
    return this
  }

  /*
  Private Methods
  ===============
  Methods that shouldn't be used externally
  */
  addTransform(transform) {
    this.transforms.lmultiplyO(transform)
    return this
  }

  after(fn) {
    return this.on('finished', fn)
  }

  animate(duration, delay, when) {
    const o = Runner.sanitise(duration, delay, when)
    const runner = new Runner(o.duration)
    if (this._timeline) runner.timeline(this._timeline)
    if (this._element) runner.element(this._element)
    return runner.loop(o).schedule(o.delay, o.when)
  }

  clearTransform() {
    this.transforms = new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_10__["default"]()
    return this
  }

  // TODO: Keep track of all transformations so that deletion is faster
  clearTransformsFromQueue() {
    if (
      !this.done ||
      !this._timeline ||
      !this._timeline._runnerIds.includes(this.id)
    ) {
      this._queue = this._queue.filter((item) => {
        return !item.isTransform
      })
    }
  }

  delay(delay) {
    return this.animate(0, delay)
  }

  duration() {
    return this._times * (this._wait + this._duration) - this._wait
  }

  during(fn) {
    return this.queue(null, fn)
  }

  ease(fn) {
    this._stepper = new _Controller_js__WEBPACK_IMPORTED_MODULE_0__.Ease(fn)
    return this
  }
  /*
  Runner Definitions
  ==================
  These methods help us define the runtime behaviour of the Runner or they
  help us make new runners from the current runner
  */

  element(element) {
    if (element == null) return this._element
    this._element = element
    element._prepareRunner()
    return this
  }

  finish() {
    return this.step(Infinity)
  }

  loop(times, swing, wait) {
    // Deal with the user passing in an object
    if (typeof times === 'object') {
      swing = times.swing
      wait = times.wait
      times = times.times
    }

    // Sanitise the values and store them
    this._times = times || Infinity
    this._swing = swing || false
    this._wait = wait || 0

    // Allow true to be passed
    if (this._times === true) {
      this._times = Infinity
    }

    return this
  }

  loops(p) {
    const loopDuration = this._duration + this._wait
    if (p == null) {
      const loopsDone = Math.floor(this._time / loopDuration)
      const relativeTime = this._time - loopsDone * loopDuration
      const position = relativeTime / this._duration
      return Math.min(loopsDone + position, this._times)
    }
    const whole = Math.floor(p)
    const partial = p % 1
    const time = loopDuration * whole + this._duration * partial
    return this.time(time)
  }

  persist(dtOrForever) {
    if (dtOrForever == null) return this._persist
    this._persist = dtOrForever
    return this
  }

  position(p) {
    // Get all of the variables we need
    const x = this._time
    const d = this._duration
    const w = this._wait
    const t = this._times
    const s = this._swing
    const r = this._reverse
    let position

    if (p == null) {
      /*
      This function converts a time to a position in the range [0, 1]
      The full explanation can be found in this desmos demonstration
        https://www.desmos.com/calculator/u4fbavgche
      The logic is slightly simplified here because we can use booleans
      */

      // Figure out the value without thinking about the start or end time
      const f = function (x) {
        const swinging = s * Math.floor((x % (2 * (w + d))) / (w + d))
        const backwards = (swinging && !r) || (!swinging && r)
        const uncliped =
          (Math.pow(-1, backwards) * (x % (w + d))) / d + backwards
        const clipped = Math.max(Math.min(uncliped, 1), 0)
        return clipped
      }

      // Figure out the value by incorporating the start time
      const endTime = t * (w + d) - w
      position =
        x <= 0
          ? Math.round(f(1e-5))
          : x < endTime
            ? f(x)
            : Math.round(f(endTime - 1e-5))
      return position
    }

    // Work out the loops done and add the position to the loops done
    const loopsDone = Math.floor(this.loops())
    const swingForward = s && loopsDone % 2 === 0
    const forwards = (swingForward && !r) || (r && swingForward)
    position = loopsDone + (forwards ? p : 1 - p)
    return this.loops(position)
  }

  progress(p) {
    if (p == null) {
      return Math.min(1, this._time / this.duration())
    }
    return this.time(p * this.duration())
  }

  /*
  Basic Functionality
  ===================
  These methods allow us to attach basic functions to the runner directly
  */
  queue(initFn, runFn, retargetFn, isTransform) {
    this._queue.push({
      initialiser: initFn || _modules_core_defaults_js__WEBPACK_IMPORTED_MODULE_4__.noop,
      runner: runFn || _modules_core_defaults_js__WEBPACK_IMPORTED_MODULE_4__.noop,
      retarget: retargetFn,
      isTransform: isTransform,
      initialised: false,
      finished: false
    })
    const timeline = this.timeline()
    timeline && this.timeline()._continue()
    return this
  }

  reset() {
    if (this._reseted) return this
    this.time(0)
    this._reseted = true
    return this
  }

  reverse(reverse) {
    this._reverse = reverse == null ? !this._reverse : reverse
    return this
  }

  schedule(timeline, delay, when) {
    // The user doesn't need to pass a timeline if we already have one
    if (!(timeline instanceof _Timeline_js__WEBPACK_IMPORTED_MODULE_14__["default"])) {
      when = delay
      delay = timeline
      timeline = this.timeline()
    }

    // If there is no timeline, yell at the user...
    if (!timeline) {
      throw Error('Runner cannot be scheduled without timeline')
    }

    // Schedule the runner on the timeline provided
    timeline.schedule(this, delay, when)
    return this
  }

  step(dt) {
    // If we are inactive, this stepper just gets skipped
    if (!this.enabled) return this

    // Update the time and get the new position
    dt = dt == null ? 16 : dt
    this._time += dt
    const position = this.position()

    // Figure out if we need to run the stepper in this frame
    const running = this._lastPosition !== position && this._time >= 0
    this._lastPosition = position

    // Figure out if we just started
    const duration = this.duration()
    const justStarted = this._lastTime <= 0 && this._time > 0
    const justFinished = this._lastTime < duration && this._time >= duration

    this._lastTime = this._time
    if (justStarted) {
      this.fire('start', this)
    }

    // Work out if the runner is finished set the done flag here so animations
    // know, that they are running in the last step (this is good for
    // transformations which can be merged)
    const declarative = this._isDeclarative
    this.done = !declarative && !justFinished && this._time >= duration

    // Runner is running. So its not in reset state anymore
    this._reseted = false

    let converged = false
    // Call initialise and the run function
    if (running || declarative) {
      this._initialise(running)

      // clear the transforms on this runner so they dont get added again and again
      this.transforms = new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_10__["default"]()
      converged = this._run(declarative ? dt : position)

      this.fire('step', this)
    }
    // correct the done flag here
    // declarative animations itself know when they converged
    this.done = this.done || (converged && declarative)
    if (justFinished) {
      this.fire('finished', this)
    }
    return this
  }

  /*
  Runner animation methods
  ========================
  Control how the animation plays
  */
  time(time) {
    if (time == null) {
      return this._time
    }
    const dt = time - this._time
    this.step(dt)
    return this
  }

  timeline(timeline) {
    // check explicitly for undefined so we can set the timeline to null
    if (typeof timeline === 'undefined') return this._timeline
    this._timeline = timeline
    return this
  }

  unschedule() {
    const timeline = this.timeline()
    timeline && timeline.unschedule(this)
    return this
  }

  // Run each initialise function in the runner if required
  _initialise(running) {
    // If we aren't running, we shouldn't initialise when not declarative
    if (!running && !this._isDeclarative) return

    // Loop through all of the initialisers
    for (let i = 0, len = this._queue.length; i < len; ++i) {
      // Get the current initialiser
      const current = this._queue[i]

      // Determine whether we need to initialise
      const needsIt = this._isDeclarative || (!current.initialised && running)
      running = !current.finished

      // Call the initialiser if we need to
      if (needsIt && running) {
        current.initialiser.call(this)
        current.initialised = true
      }
    }
  }

  // Save a morpher to the morpher list so that we can retarget it later
  _rememberMorpher(method, morpher) {
    this._history[method] = {
      morpher: morpher,
      caller: this._queue[this._queue.length - 1]
    }

    // We have to resume the timeline in case a controller
    // is already done without being ever run
    // This can happen when e.g. this is done:
    //    anim = el.animate(new SVG.Spring)
    // and later
    //    anim.move(...)
    if (this._isDeclarative) {
      const timeline = this.timeline()
      timeline && timeline.play()
    }
  }

  // Try to set the target for a morpher if the morpher exists, otherwise
  // Run each run function for the position or dt given
  _run(positionOrDt) {
    // Run all of the _queue directly
    let allfinished = true
    for (let i = 0, len = this._queue.length; i < len; ++i) {
      // Get the current function to run
      const current = this._queue[i]

      // Run the function if its not finished, we keep track of the finished
      // flag for the sake of declarative _queue
      const converged = current.runner.call(this, positionOrDt)
      current.finished = current.finished || converged === true
      allfinished = allfinished && current.finished
    }

    // We report when all of the constructors are finished
    return allfinished
  }

  // do nothing and return false
  _tryRetarget(method, target, extra) {
    if (this._history[method]) {
      // if the last method wasn't even initialised, throw it away
      if (!this._history[method].caller.initialised) {
        const index = this._queue.indexOf(this._history[method].caller)
        this._queue.splice(index, 1)
        return false
      }

      // for the case of transformations, we use the special retarget function
      // which has access to the outer scope
      if (this._history[method].caller.retarget) {
        this._history[method].caller.retarget.call(this, target, extra)
        // for everything else a simple morpher change is sufficient
      } else {
        this._history[method].morpher.to(target)
      }

      this._history[method].caller.finished = false
      const timeline = this.timeline()
      timeline && timeline.play()
      return true
    }
    return false
  }
}

Runner.id = 0

class FakeRunner {
  constructor(transforms = new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_10__["default"](), id = -1, done = true) {
    this.transforms = transforms
    this.id = id
    this.done = done
  }

  clearTransformsFromQueue() {}
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.extend)([Runner, FakeRunner], {
  mergeWith(runner) {
    return new FakeRunner(
      runner.transforms.lmultiply(this.transforms),
      runner.id
    )
  }
})

// FakeRunner.emptyRunner = new FakeRunner()

const lmultiply = (last, curr) => last.lmultiplyO(curr)
const getRunnerTransform = (runner) => runner.transforms

function mergeTransforms() {
  // Find the matrix to apply to the element and apply it
  const runners = this._transformationRunners.runners
  const netTransform = runners
    .map(getRunnerTransform)
    .reduce(lmultiply, new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_10__["default"]())

  this.transform(netTransform)

  this._transformationRunners.merge()

  if (this._transformationRunners.length() === 1) {
    this._frameId = null
  }
}

class RunnerArray {
  constructor() {
    this.runners = []
    this.ids = []
  }

  add(runner) {
    if (this.runners.includes(runner)) return
    const id = runner.id + 1

    this.runners.push(runner)
    this.ids.push(id)

    return this
  }

  clearBefore(id) {
    const deleteCnt = this.ids.indexOf(id + 1) || 1
    this.ids.splice(0, deleteCnt, 0)
    this.runners
      .splice(0, deleteCnt, new FakeRunner())
      .forEach((r) => r.clearTransformsFromQueue())
    return this
  }

  edit(id, newRunner) {
    const index = this.ids.indexOf(id + 1)
    this.ids.splice(index, 1, id + 1)
    this.runners.splice(index, 1, newRunner)
    return this
  }

  getByID(id) {
    return this.runners[this.ids.indexOf(id + 1)]
  }

  length() {
    return this.ids.length
  }

  merge() {
    let lastRunner = null
    for (let i = 0; i < this.runners.length; ++i) {
      const runner = this.runners[i]

      const condition =
        lastRunner &&
        runner.done &&
        lastRunner.done &&
        // don't merge runner when persisted on timeline
        (!runner._timeline ||
          !runner._timeline._runnerIds.includes(runner.id)) &&
        (!lastRunner._timeline ||
          !lastRunner._timeline._runnerIds.includes(lastRunner.id))

      if (condition) {
        // the +1 happens in the function
        this.remove(runner.id)
        const newRunner = runner.mergeWith(lastRunner)
        this.edit(lastRunner.id, newRunner)
        lastRunner = newRunner
        --i
      } else {
        lastRunner = runner
      }
    }

    return this
  }

  remove(id) {
    const index = this.ids.indexOf(id + 1)
    this.ids.splice(index, 1)
    this.runners.splice(index, 1)
    return this
  }
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_5__.registerMethods)({
  Element: {
    animate(duration, delay, when) {
      const o = Runner.sanitise(duration, delay, when)
      const timeline = this.timeline()
      return new Runner(o.duration)
        .loop(o)
        .element(this)
        .timeline(timeline.play())
        .schedule(o.delay, o.when)
    },

    delay(by, when) {
      return this.animate(0, by, when)
    },

    // this function searches for all runners on the element and deletes the ones
    // which run before the current one. This is because absolute transformations
    // overwrite anything anyway so there is no need to waste time computing
    // other runners
    _clearTransformRunnersBefore(currentRunner) {
      this._transformationRunners.clearBefore(currentRunner.id)
    },

    _currentTransform(current) {
      return (
        this._transformationRunners.runners
          // we need the equal sign here to make sure, that also transformations
          // on the same runner which execute before the current transformation are
          // taken into account
          .filter((runner) => runner.id <= current.id)
          .map(getRunnerTransform)
          .reduce(lmultiply, new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_10__["default"]())
      )
    },

    _addRunner(runner) {
      this._transformationRunners.add(runner)

      // Make sure that the runner merge is executed at the very end of
      // all Animator functions. That is why we use immediate here to execute
      // the merge right after all frames are run
      _Animator_js__WEBPACK_IMPORTED_MODULE_7__["default"].cancelImmediate(this._frameId)
      this._frameId = _Animator_js__WEBPACK_IMPORTED_MODULE_7__["default"].immediate(mergeTransforms.bind(this))
    },

    _prepareRunner() {
      if (this._frameId == null) {
        this._transformationRunners = new RunnerArray().add(
          new FakeRunner(new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_10__["default"](this))
        )
      }
    }
  }
})

// Will output the elements from array A that are not in the array B
const difference = (a, b) => a.filter((x) => !b.includes(x))

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.extend)(Runner, {
  attr(a, v) {
    return this.styleAttr('attr', a, v)
  },

  // Add animatable styles
  css(s, v) {
    return this.styleAttr('css', s, v)
  },

  styleAttr(type, nameOrAttrs, val) {
    if (typeof nameOrAttrs === 'string') {
      return this.styleAttr(type, { [nameOrAttrs]: val })
    }

    let attrs = nameOrAttrs
    if (this._tryRetarget(type, attrs)) return this

    let morpher = new _Morphable_js__WEBPACK_IMPORTED_MODULE_11__["default"](this._stepper).to(attrs)
    let keys = Object.keys(attrs)

    this.queue(
      function () {
        morpher = morpher.from(this.element()[type](keys))
      },
      function (pos) {
        this.element()[type](morpher.at(pos).valueOf())
        return morpher.done()
      },
      function (newToAttrs) {
        // Check if any new keys were added
        const newKeys = Object.keys(newToAttrs)
        const differences = difference(newKeys, keys)

        // If their are new keys, initialize them and add them to morpher
        if (differences.length) {
          // Get the values
          const addedFromAttrs = this.element()[type](differences)

          // Get the already initialized values
          const oldFromAttrs = new _Morphable_js__WEBPACK_IMPORTED_MODULE_11__.ObjectBag(morpher.from()).valueOf()

          // Merge old and new
          Object.assign(oldFromAttrs, addedFromAttrs)
          morpher.from(oldFromAttrs)
        }

        // Get the object from the morpher
        const oldToAttrs = new _Morphable_js__WEBPACK_IMPORTED_MODULE_11__.ObjectBag(morpher.to()).valueOf()

        // Merge in new attributes
        Object.assign(oldToAttrs, newToAttrs)

        // Change morpher target
        morpher.to(oldToAttrs)

        // Make sure that we save the work we did so we don't need it to do again
        keys = newKeys
        attrs = newToAttrs
      }
    )

    this._rememberMorpher(type, morpher)
    return this
  },

  zoom(level, point) {
    if (this._tryRetarget('zoom', level, point)) return this

    let morpher = new _Morphable_js__WEBPACK_IMPORTED_MODULE_11__["default"](this._stepper).to(new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_13__["default"](level))

    this.queue(
      function () {
        morpher = morpher.from(this.element().zoom())
      },
      function (pos) {
        this.element().zoom(morpher.at(pos), point)
        return morpher.done()
      },
      function (newLevel, newPoint) {
        point = newPoint
        morpher.to(newLevel)
      }
    )

    this._rememberMorpher('zoom', morpher)
    return this
  },

  /**
   ** absolute transformations
   **/

  //
  // M v -----|-----(D M v = F v)------|----->  T v
  //
  // 1. define the final state (T) and decompose it (once)
  //    t = [tx, ty, the, lam, sy, sx]
  // 2. on every frame: pull the current state of all previous transforms
  //    (M - m can change)
  //   and then write this as m = [tx0, ty0, the0, lam0, sy0, sx0]
  // 3. Find the interpolated matrix F(pos) = m + pos * (t - m)
  //   - Note F(0) = M
  //   - Note F(1) = T
  // 4. Now you get the delta matrix as a result: D = F * inv(M)

  transform(transforms, relative, affine) {
    // If we have a declarative function, we should retarget it if possible
    relative = transforms.relative || relative
    if (
      this._isDeclarative &&
      !relative &&
      this._tryRetarget('transform', transforms)
    ) {
      return this
    }

    // Parse the parameters
    const isMatrix = _types_Matrix_js__WEBPACK_IMPORTED_MODULE_10__["default"].isMatrixLike(transforms)
    affine =
      transforms.affine != null
        ? transforms.affine
        : affine != null
          ? affine
          : !isMatrix

    // Create a morpher and set its type
    const morpher = new _Morphable_js__WEBPACK_IMPORTED_MODULE_11__["default"](this._stepper).type(
      affine ? _Morphable_js__WEBPACK_IMPORTED_MODULE_11__.TransformBag : _types_Matrix_js__WEBPACK_IMPORTED_MODULE_10__["default"]
    )

    let origin
    let element
    let current
    let currentAngle
    let startTransform

    function setup() {
      // make sure element and origin is defined
      element = element || this.element()
      origin = origin || (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__.getOrigin)(transforms, element)

      startTransform = new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_10__["default"](relative ? undefined : element)

      // add the runner to the element so it can merge transformations
      element._addRunner(this)

      // Deactivate all transforms that have run so far if we are absolute
      if (!relative) {
        element._clearTransformRunnersBefore(this)
      }
    }

    function run(pos) {
      // clear all other transforms before this in case something is saved
      // on this runner. We are absolute. We dont need these!
      if (!relative) this.clearTransform()

      const { x, y } = new _types_Point_js__WEBPACK_IMPORTED_MODULE_12__["default"](origin).transform(
        element._currentTransform(this)
      )

      let target = new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_10__["default"]({ ...transforms, origin: [x, y] })
      let start = this._isDeclarative && current ? current : startTransform

      if (affine) {
        target = target.decompose(x, y)
        start = start.decompose(x, y)

        // Get the current and target angle as it was set
        const rTarget = target.rotate
        const rCurrent = start.rotate

        // Figure out the shortest path to rotate directly
        const possibilities = [rTarget - 360, rTarget, rTarget + 360]
        const distances = possibilities.map((a) => Math.abs(a - rCurrent))
        const shortest = Math.min(...distances)
        const index = distances.indexOf(shortest)
        target.rotate = possibilities[index]
      }

      if (relative) {
        // we have to be careful here not to overwrite the rotation
        // with the rotate method of Matrix
        if (!isMatrix) {
          target.rotate = transforms.rotate || 0
        }
        if (this._isDeclarative && currentAngle) {
          start.rotate = currentAngle
        }
      }

      morpher.from(start)
      morpher.to(target)

      const affineParameters = morpher.at(pos)
      currentAngle = affineParameters.rotate
      current = new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_10__["default"](affineParameters)

      this.addTransform(current)
      element._addRunner(this)
      return morpher.done()
    }

    function retarget(newTransforms) {
      // only get a new origin if it changed since the last call
      if (
        (newTransforms.origin || 'center').toString() !==
        (transforms.origin || 'center').toString()
      ) {
        origin = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__.getOrigin)(newTransforms, element)
      }

      // overwrite the old transformations with the new ones
      transforms = { ...newTransforms, origin }
    }

    this.queue(setup, run, retarget, true)
    this._isDeclarative && this._rememberMorpher('transform', morpher)
    return this
  },

  // Animatable x-axis
  x(x) {
    return this._queueNumber('x', x)
  },

  // Animatable y-axis
  y(y) {
    return this._queueNumber('y', y)
  },

  ax(x) {
    return this._queueNumber('ax', x)
  },

  ay(y) {
    return this._queueNumber('ay', y)
  },

  dx(x = 0) {
    return this._queueNumberDelta('x', x)
  },

  dy(y = 0) {
    return this._queueNumberDelta('y', y)
  },

  dmove(x, y) {
    return this.dx(x).dy(y)
  },

  _queueNumberDelta(method, to) {
    to = new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_13__["default"](to)

    // Try to change the target if we have this method already registered
    if (this._tryRetarget(method, to)) return this

    // Make a morpher and queue the animation
    const morpher = new _Morphable_js__WEBPACK_IMPORTED_MODULE_11__["default"](this._stepper).to(to)
    let from = null
    this.queue(
      function () {
        from = this.element()[method]()
        morpher.from(from)
        morpher.to(from + to)
      },
      function (pos) {
        this.element()[method](morpher.at(pos))
        return morpher.done()
      },
      function (newTo) {
        morpher.to(from + new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_13__["default"](newTo))
      }
    )

    // Register the morpher so that if it is changed again, we can retarget it
    this._rememberMorpher(method, morpher)
    return this
  },

  _queueObject(method, to) {
    // Try to change the target if we have this method already registered
    if (this._tryRetarget(method, to)) return this

    // Make a morpher and queue the animation
    const morpher = new _Morphable_js__WEBPACK_IMPORTED_MODULE_11__["default"](this._stepper).to(to)
    this.queue(
      function () {
        morpher.from(this.element()[method]())
      },
      function (pos) {
        this.element()[method](morpher.at(pos))
        return morpher.done()
      }
    )

    // Register the morpher so that if it is changed again, we can retarget it
    this._rememberMorpher(method, morpher)
    return this
  },

  _queueNumber(method, value) {
    return this._queueObject(method, new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_13__["default"](value))
  },

  // Animatable center x-axis
  cx(x) {
    return this._queueNumber('cx', x)
  },

  // Animatable center y-axis
  cy(y) {
    return this._queueNumber('cy', y)
  },

  // Add animatable move
  move(x, y) {
    return this.x(x).y(y)
  },

  amove(x, y) {
    return this.ax(x).ay(y)
  },

  // Add animatable center
  center(x, y) {
    return this.cx(x).cy(y)
  },

  // Add animatable size
  size(width, height) {
    // animate bbox based size for all other elements
    let box

    if (!width || !height) {
      box = this._element.bbox()
    }

    if (!width) {
      width = (box.width / box.height) * height
    }

    if (!height) {
      height = (box.height / box.width) * width
    }

    return this.width(width).height(height)
  },

  // Add animatable width
  width(width) {
    return this._queueNumber('width', width)
  },

  // Add animatable height
  height(height) {
    return this._queueNumber('height', height)
  },

  // Add animatable plot
  plot(a, b, c, d) {
    // Lines can be plotted with 4 arguments
    if (arguments.length === 4) {
      return this.plot([a, b, c, d])
    }

    if (this._tryRetarget('plot', a)) return this

    const morpher = new _Morphable_js__WEBPACK_IMPORTED_MODULE_11__["default"](this._stepper)
      .type(this._element.MorphArray)
      .to(a)

    this.queue(
      function () {
        morpher.from(this._element.array())
      },
      function (pos) {
        this._element.plot(morpher.at(pos))
        return morpher.done()
      }
    )

    this._rememberMorpher('plot', morpher)
    return this
  },

  // Add leading method
  leading(value) {
    return this._queueNumber('leading', value)
  },

  // Add animatable viewbox
  viewbox(x, y, width, height) {
    return this._queueObject('viewbox', new _types_Box_js__WEBPACK_IMPORTED_MODULE_8__["default"](x, y, width, height))
  },

  update(o) {
    if (typeof o !== 'object') {
      return this.update({
        offset: arguments[0],
        color: arguments[1],
        opacity: arguments[2]
      })
    }

    if (o.opacity != null) this.attr('stop-opacity', o.opacity)
    if (o.color != null) this.attr('stop-color', o.color)
    if (o.offset != null) this.attr('offset', o.offset)

    return this
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.extend)(Runner, { rx: _modules_core_circled_js__WEBPACK_IMPORTED_MODULE_6__.rx, ry: _modules_core_circled_js__WEBPACK_IMPORTED_MODULE_6__.ry, from: _modules_core_gradiented_js__WEBPACK_IMPORTED_MODULE_2__.from, to: _modules_core_gradiented_js__WEBPACK_IMPORTED_MODULE_2__.to })
;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.register)(Runner, 'Runner')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/animation/Timeline.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/animation/Timeline.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Timeline)
/* harmony export */ });
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _Animator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Animator.js */ "./node_modules/@svgdotjs/svg.js/src/animation/Animator.js");
/* harmony import */ var _types_EventTarget_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types/EventTarget.js */ "./node_modules/@svgdotjs/svg.js/src/types/EventTarget.js");





const makeSchedule = function (runnerInfo) {
  const start = runnerInfo.start
  const duration = runnerInfo.runner.duration()
  const end = start + duration
  return {
    start: start,
    duration: duration,
    end: end,
    runner: runnerInfo.runner
  }
}

const defaultSource = function () {
  const w = _utils_window_js__WEBPACK_IMPORTED_MODULE_0__.globals.window
  return (w.performance || w.Date).now()
}

class Timeline extends _types_EventTarget_js__WEBPACK_IMPORTED_MODULE_3__["default"] {
  // Construct a new timeline on the given element
  constructor(timeSource = defaultSource) {
    super()

    this._timeSource = timeSource

    // terminate resets all variables to their initial state
    this.terminate()
  }

  active() {
    return !!this._nextFrame
  }

  finish() {
    // Go to end and pause
    this.time(this.getEndTimeOfTimeline() + 1)
    return this.pause()
  }

  // Calculates the end of the timeline
  getEndTime() {
    const lastRunnerInfo = this.getLastRunnerInfo()
    const lastDuration = lastRunnerInfo ? lastRunnerInfo.runner.duration() : 0
    const lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : this._time
    return lastStartTime + lastDuration
  }

  getEndTimeOfTimeline() {
    const endTimes = this._runners.map((i) => i.start + i.runner.duration())
    return Math.max(0, ...endTimes)
  }

  getLastRunnerInfo() {
    return this.getRunnerInfoById(this._lastRunnerId)
  }

  getRunnerInfoById(id) {
    return this._runners[this._runnerIds.indexOf(id)] || null
  }

  pause() {
    this._paused = true
    return this._continue()
  }

  persist(dtOrForever) {
    if (dtOrForever == null) return this._persist
    this._persist = dtOrForever
    return this
  }

  play() {
    // Now make sure we are not paused and continue the animation
    this._paused = false
    return this.updateTime()._continue()
  }

  reverse(yes) {
    const currentSpeed = this.speed()
    if (yes == null) return this.speed(-currentSpeed)

    const positive = Math.abs(currentSpeed)
    return this.speed(yes ? -positive : positive)
  }

  // schedules a runner on the timeline
  schedule(runner, delay, when) {
    if (runner == null) {
      return this._runners.map(makeSchedule)
    }

    // The start time for the next animation can either be given explicitly,
    // derived from the current timeline time or it can be relative to the
    // last start time to chain animations directly

    let absoluteStartTime = 0
    const endTime = this.getEndTime()
    delay = delay || 0

    // Work out when to start the animation
    if (when == null || when === 'last' || when === 'after') {
      // Take the last time and increment
      absoluteStartTime = endTime
    } else if (when === 'absolute' || when === 'start') {
      absoluteStartTime = delay
      delay = 0
    } else if (when === 'now') {
      absoluteStartTime = this._time
    } else if (when === 'relative') {
      const runnerInfo = this.getRunnerInfoById(runner.id)
      if (runnerInfo) {
        absoluteStartTime = runnerInfo.start + delay
        delay = 0
      }
    } else if (when === 'with-last') {
      const lastRunnerInfo = this.getLastRunnerInfo()
      const lastStartTime = lastRunnerInfo ? lastRunnerInfo.start : this._time
      absoluteStartTime = lastStartTime
    } else {
      throw new Error('Invalid value for the "when" parameter')
    }

    // Manage runner
    runner.unschedule()
    runner.timeline(this)

    const persist = runner.persist()
    const runnerInfo = {
      persist: persist === null ? this._persist : persist,
      start: absoluteStartTime + delay,
      runner
    }

    this._lastRunnerId = runner.id

    this._runners.push(runnerInfo)
    this._runners.sort((a, b) => a.start - b.start)
    this._runnerIds = this._runners.map((info) => info.runner.id)

    this.updateTime()._continue()
    return this
  }

  seek(dt) {
    return this.time(this._time + dt)
  }

  source(fn) {
    if (fn == null) return this._timeSource
    this._timeSource = fn
    return this
  }

  speed(speed) {
    if (speed == null) return this._speed
    this._speed = speed
    return this
  }

  stop() {
    // Go to start and pause
    this.time(0)
    return this.pause()
  }

  time(time) {
    if (time == null) return this._time
    this._time = time
    return this._continue(true)
  }

  // Remove the runner from this timeline
  unschedule(runner) {
    const index = this._runnerIds.indexOf(runner.id)
    if (index < 0) return this

    this._runners.splice(index, 1)
    this._runnerIds.splice(index, 1)

    runner.timeline(null)
    return this
  }

  // Makes sure, that after pausing the time doesn't jump
  updateTime() {
    if (!this.active()) {
      this._lastSourceTime = this._timeSource()
    }
    return this
  }

  // Checks if we are running and continues the animation
  _continue(immediateStep = false) {
    _Animator_js__WEBPACK_IMPORTED_MODULE_2__["default"].cancelFrame(this._nextFrame)
    this._nextFrame = null

    if (immediateStep) return this._stepImmediate()
    if (this._paused) return this

    this._nextFrame = _Animator_js__WEBPACK_IMPORTED_MODULE_2__["default"].frame(this._step)
    return this
  }

  _stepFn(immediateStep = false) {
    // Get the time delta from the last time and update the time
    const time = this._timeSource()
    let dtSource = time - this._lastSourceTime

    if (immediateStep) dtSource = 0

    const dtTime = this._speed * dtSource + (this._time - this._lastStepTime)
    this._lastSourceTime = time

    // Only update the time if we use the timeSource.
    // Otherwise use the current time
    if (!immediateStep) {
      // Update the time
      this._time += dtTime
      this._time = this._time < 0 ? 0 : this._time
    }
    this._lastStepTime = this._time
    this.fire('time', this._time)

    // This is for the case that the timeline was seeked so that the time
    // is now before the startTime of the runner. That is why we need to set
    // the runner to position 0

    // FIXME:
    // However, resetting in insertion order leads to bugs. Considering the case,
    // where 2 runners change the same attribute but in different times,
    // resetting both of them will lead to the case where the later defined
    // runner always wins the reset even if the other runner started earlier
    // and therefore should win the attribute battle
    // this can be solved by resetting them backwards
    for (let k = this._runners.length; k--; ) {
      // Get and run the current runner and ignore it if its inactive
      const runnerInfo = this._runners[k]
      const runner = runnerInfo.runner

      // Make sure that we give the actual difference
      // between runner start time and now
      const dtToStart = this._time - runnerInfo.start

      // Dont run runner if not started yet
      // and try to reset it
      if (dtToStart <= 0) {
        runner.reset()
      }
    }

    // Run all of the runners directly
    let runnersLeft = false
    for (let i = 0, len = this._runners.length; i < len; i++) {
      // Get and run the current runner and ignore it if its inactive
      const runnerInfo = this._runners[i]
      const runner = runnerInfo.runner
      let dt = dtTime

      // Make sure that we give the actual difference
      // between runner start time and now
      const dtToStart = this._time - runnerInfo.start

      // Dont run runner if not started yet
      if (dtToStart <= 0) {
        runnersLeft = true
        continue
      } else if (dtToStart < dt) {
        // Adjust dt to make sure that animation is on point
        dt = dtToStart
      }

      if (!runner.active()) continue

      // If this runner is still going, signal that we need another animation
      // frame, otherwise, remove the completed runner
      const finished = runner.step(dt).done
      if (!finished) {
        runnersLeft = true
        // continue
      } else if (runnerInfo.persist !== true) {
        // runner is finished. And runner might get removed
        const endTime = runner.duration() - runner.time() + this._time

        if (endTime + runnerInfo.persist < this._time) {
          // Delete runner and correct index
          runner.unschedule()
          --i
          --len
        }
      }
    }

    // Basically: we continue when there are runners right from us in time
    // when -->, and when runners are left from us when <--
    if (
      (runnersLeft && !(this._speed < 0 && this._time === 0)) ||
      (this._runnerIds.length && this._speed < 0 && this._time > 0)
    ) {
      this._continue()
    } else {
      this.pause()
      this.fire('finished')
    }

    return this
  }

  terminate() {
    // cleanup memory

    // Store the timing variables
    this._startTime = 0
    this._speed = 1.0

    // Determines how long a runner is hold in memory. Can be a dt or true/false
    this._persist = 0

    // Keep track of the running animations and their starting parameters
    this._nextFrame = null
    this._paused = true
    this._runners = []
    this._runnerIds = []
    this._lastRunnerId = -1
    this._time = 0
    this._lastSourceTime = 0
    this._lastStepTime = 0

    // Make sure that step is always called in class context
    this._step = this._stepFn.bind(this, false)
    this._stepImmediate = this._stepFn.bind(this, true)
  }
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)({
  Element: {
    timeline: function (timeline) {
      if (timeline == null) {
        this._timeline = this._timeline || new Timeline()
        return this._timeline
      } else {
        this._timeline = timeline
        return this
      }
    }
  }
})


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/A.js":
/*!*********************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/A.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ A)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/core/namespaces.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/namespaces.js");
/* harmony import */ var _Container_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Container.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Container.js");
/* harmony import */ var _modules_core_containerGeometry_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/core/containerGeometry.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/containerGeometry.js");






class A extends _Container_js__WEBPACK_IMPORTED_MODULE_3__["default"] {
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('a', node), attrs)
  }

  // Link target attribute
  target(target) {
    return this.attr('target', target)
  }

  // Link url
  to(url) {
    return this.attr('href', url, _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_2__.xlink)
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.extend)(A, _modules_core_containerGeometry_js__WEBPACK_IMPORTED_MODULE_4__)

;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)({
  Container: {
    // Create a hyperlink element
    link: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (url) {
      return this.put(new A()).to(url)
    })
  },
  Element: {
    unlink() {
      const link = this.linker()

      if (!link) return this

      const parent = link.parent()

      if (!parent) {
        return this.remove()
      }

      const index = parent.index(link)
      parent.add(this, index)

      link.remove()
      return this
    },
    linkTo(url) {
      // reuse old link if possible
      let link = this.linker()

      if (!link) {
        link = new A()
        this.wrap(link)
      }

      if (typeof url === 'function') {
        url.call(link, link)
      } else {
        link.to(url)
      }

      return this
    },
    linker() {
      const link = this.parent()
      if (link && link.node.nodeName.toLowerCase() === 'a') {
        return link
      }

      return null
    }
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(A, 'A')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Circle.js":
/*!**************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Circle.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Circle)
/* harmony export */ });
/* harmony import */ var _modules_core_circled_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/core/circled.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/circled.js");
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types/SVGNumber.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js");
/* harmony import */ var _Shape_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Shape.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Shape.js");






class Circle extends _Shape_js__WEBPACK_IMPORTED_MODULE_4__["default"] {
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.nodeOrNew)('circle', node), attrs)
  }

  radius(r) {
    return this.attr('r', r)
  }

  // Radius x value
  rx(rx) {
    return this.attr('r', rx)
  }

  // Alias radius x value
  ry(ry) {
    return this.rx(ry)
  }

  size(size) {
    return this.radius(new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_3__["default"](size).divide(2))
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.extend)(Circle, { x: _modules_core_circled_js__WEBPACK_IMPORTED_MODULE_0__.x, y: _modules_core_circled_js__WEBPACK_IMPORTED_MODULE_0__.y, cx: _modules_core_circled_js__WEBPACK_IMPORTED_MODULE_0__.cx, cy: _modules_core_circled_js__WEBPACK_IMPORTED_MODULE_0__.cy, width: _modules_core_circled_js__WEBPACK_IMPORTED_MODULE_0__.width, height: _modules_core_circled_js__WEBPACK_IMPORTED_MODULE_0__.height })

;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_2__.registerMethods)({
  Container: {
    // Create circle element
    circle: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.wrapWithAttrCheck)(function (size = 0) {
      return this.put(new Circle()).size(size).move(0, 0)
    })
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.register)(Circle, 'Circle')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/ClipPath.js":
/*!****************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/ClipPath.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ClipPath)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _Container_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Container.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Container.js");
/* harmony import */ var _modules_core_selector_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/core/selector.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/selector.js");





class ClipPath extends _Container_js__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('clipPath', node), attrs)
  }

  // Unclip all clipped elements and remove itself
  remove() {
    // unclip all targets
    this.targets().forEach(function (el) {
      el.unclip()
    })

    // remove clipPath from parent
    return super.remove()
  }

  targets() {
    return (0,_modules_core_selector_js__WEBPACK_IMPORTED_MODULE_3__["default"])('svg [clip-path*=' + this.id() + ']')
  }
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)({
  Container: {
    // Create clipping element
    clip: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function () {
      return this.defs().put(new ClipPath())
    })
  },
  Element: {
    // Distribute clipPath to svg element
    clipper() {
      return this.reference('clip-path')
    },

    clipWith(element) {
      // use given clip or create a new one
      const clipper =
        element instanceof ClipPath
          ? element
          : this.parent().clip().add(element)

      // apply mask
      return this.attr('clip-path', 'url(#' + clipper.id() + ')')
    },

    // Unclip element
    unclip() {
      return this.attr('clip-path', null)
    }
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(ClipPath, 'ClipPath')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Container.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Container.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Container)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _Element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Element.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Element.js");



class Container extends _Element_js__WEBPACK_IMPORTED_MODULE_1__["default"] {
  flatten() {
    this.each(function () {
      if (this instanceof Container) {
        return this.flatten().ungroup()
      }
    })

    return this
  }

  ungroup(parent = this.parent(), index = parent.index(this)) {
    // when parent != this, we want append all elements to the end
    index = index === -1 ? parent.children().length : index

    this.each(function (i, children) {
      // reverse each
      return children[children.length - i - 1].toParent(parent, index)
    })

    return this.remove()
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Container, 'Container')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Defs.js":
/*!************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Defs.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Defs)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _Container_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Container.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Container.js");



class Defs extends _Container_js__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('defs', node), attrs)
  }

  flatten() {
    return this
  }

  ungroup() {
    return this
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Defs, 'Defs')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Dom.js":
/*!***********************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Dom.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Dom)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _modules_core_selector_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/core/selector.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/selector.js");
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/utils.js */ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js");
/* harmony import */ var _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/core/namespaces.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/namespaces.js");
/* harmony import */ var _types_EventTarget_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../types/EventTarget.js */ "./node_modules/@svgdotjs/svg.js/src/types/EventTarget.js");
/* harmony import */ var _types_List_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../types/List.js */ "./node_modules/@svgdotjs/svg.js/src/types/List.js");
/* harmony import */ var _modules_core_attr_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../modules/core/attr.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/attr.js");









class Dom extends _types_EventTarget_js__WEBPACK_IMPORTED_MODULE_5__["default"] {
  constructor(node, attrs) {
    super()
    this.node = node
    this.type = node.nodeName

    if (attrs && node !== attrs) {
      this.attr(attrs)
    }
  }

  // Add given element at a position
  add(element, i) {
    element = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.makeInstance)(element)

    // If non-root svg nodes are added we have to remove their namespaces
    if (
      element.removeNamespace &&
      this.node instanceof _utils_window_js__WEBPACK_IMPORTED_MODULE_2__.globals.window.SVGElement
    ) {
      element.removeNamespace()
    }

    if (i == null) {
      this.node.appendChild(element.node)
    } else if (element.node !== this.node.childNodes[i]) {
      this.node.insertBefore(element.node, this.node.childNodes[i])
    }

    return this
  }

  // Add element to given container and return self
  addTo(parent, i) {
    return (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.makeInstance)(parent).put(this, i)
  }

  // Returns all child elements
  children() {
    return new _types_List_js__WEBPACK_IMPORTED_MODULE_6__["default"](
      (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__.map)(this.node.children, function (node) {
        return (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.adopt)(node)
      })
    )
  }

  // Remove all elements in this container
  clear() {
    // remove children
    while (this.node.hasChildNodes()) {
      this.node.removeChild(this.node.lastChild)
    }

    return this
  }

  // Clone element
  clone(deep = true, assignNewIds = true) {
    // write dom data to the dom so the clone can pickup the data
    this.writeDataToDom()

    // clone element
    let nodeClone = this.node.cloneNode(deep)
    if (assignNewIds) {
      // assign new id
      nodeClone = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.assignNewId)(nodeClone)
    }
    return new this.constructor(nodeClone)
  }

  // Iterates over all children and invokes a given block
  each(block, deep) {
    const children = this.children()
    let i, il

    for (i = 0, il = children.length; i < il; i++) {
      block.apply(children[i], [i, children])

      if (deep) {
        children[i].each(block, deep)
      }
    }

    return this
  }

  element(nodeName, attrs) {
    return this.put(new Dom((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.create)(nodeName), attrs))
  }

  // Get first child
  first() {
    return (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.adopt)(this.node.firstChild)
  }

  // Get a element at the given index
  get(i) {
    return (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.adopt)(this.node.childNodes[i])
  }

  getEventHolder() {
    return this.node
  }

  getEventTarget() {
    return this.node
  }

  // Checks if the given element is a child
  has(element) {
    return this.index(element) >= 0
  }

  html(htmlOrFn, outerHTML) {
    return this.xml(htmlOrFn, outerHTML, _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_4__.html)
  }

  // Get / set id
  id(id) {
    // generate new id if no id set
    if (typeof id === 'undefined' && !this.node.id) {
      this.node.id = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.eid)(this.type)
    }

    // don't set directly with this.node.id to make `null` work correctly
    return this.attr('id', id)
  }

  // Gets index of given element
  index(element) {
    return [].slice.call(this.node.childNodes).indexOf(element.node)
  }

  // Get the last child
  last() {
    return (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.adopt)(this.node.lastChild)
  }

  // matches the element vs a css selector
  matches(selector) {
    const el = this.node
    const matcher =
      el.matches ||
      el.matchesSelector ||
      el.msMatchesSelector ||
      el.mozMatchesSelector ||
      el.webkitMatchesSelector ||
      el.oMatchesSelector ||
      null
    return matcher && matcher.call(el, selector)
  }

  // Returns the parent element instance
  parent(type) {
    let parent = this

    // check for parent
    if (!parent.node.parentNode) return null

    // get parent element
    parent = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.adopt)(parent.node.parentNode)

    if (!type) return parent

    // loop through ancestors if type is given
    do {
      if (
        typeof type === 'string' ? parent.matches(type) : parent instanceof type
      )
        return parent
    } while ((parent = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.adopt)(parent.node.parentNode)))

    return parent
  }

  // Basically does the same as `add()` but returns the added element instead
  put(element, i) {
    element = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.makeInstance)(element)
    this.add(element, i)
    return element
  }

  // Add element to given container and return container
  putIn(parent, i) {
    return (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.makeInstance)(parent).add(this, i)
  }

  // Remove element
  remove() {
    if (this.parent()) {
      this.parent().removeElement(this)
    }

    return this
  }

  // Remove a given child
  removeElement(element) {
    this.node.removeChild(element.node)

    return this
  }

  // Replace this with element
  replace(element) {
    element = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.makeInstance)(element)

    if (this.node.parentNode) {
      this.node.parentNode.replaceChild(element.node, this.node)
    }

    return element
  }

  round(precision = 2, map = null) {
    const factor = 10 ** precision
    const attrs = this.attr(map)

    for (const i in attrs) {
      if (typeof attrs[i] === 'number') {
        attrs[i] = Math.round(attrs[i] * factor) / factor
      }
    }

    this.attr(attrs)
    return this
  }

  // Import / Export raw svg
  svg(svgOrFn, outerSVG) {
    return this.xml(svgOrFn, outerSVG, _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_4__.svg)
  }

  // Return id on string conversion
  toString() {
    return this.id()
  }

  words(text) {
    // This is faster than removing all children and adding a new one
    this.node.textContent = text
    return this
  }

  wrap(node) {
    const parent = this.parent()

    if (!parent) {
      return this.addTo(node)
    }

    const position = parent.index(this)
    return parent.put(node, position).put(this)
  }

  // write svgjs data to the dom
  writeDataToDom() {
    // dump variables recursively
    this.each(function () {
      this.writeDataToDom()
    })

    return this
  }

  // Import / Export raw svg
  xml(xmlOrFn, outerXML, ns) {
    if (typeof xmlOrFn === 'boolean') {
      ns = outerXML
      outerXML = xmlOrFn
      xmlOrFn = null
    }

    // act as getter if no svg string is given
    if (xmlOrFn == null || typeof xmlOrFn === 'function') {
      // The default for exports is, that the outerNode is included
      outerXML = outerXML == null ? true : outerXML

      // write svgjs data to the dom
      this.writeDataToDom()
      let current = this

      // An export modifier was passed
      if (xmlOrFn != null) {
        current = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.adopt)(current.node.cloneNode(true))

        // If the user wants outerHTML we need to process this node, too
        if (outerXML) {
          const result = xmlOrFn(current)
          current = result || current

          // The user does not want this node? Well, then he gets nothing
          if (result === false) return ''
        }

        // Deep loop through all children and apply modifier
        current.each(function () {
          const result = xmlOrFn(this)
          const _this = result || this

          // If modifier returns false, discard node
          if (result === false) {
            this.remove()

            // If modifier returns new node, use it
          } else if (result && this !== _this) {
            this.replace(_this)
          }
        }, true)
      }

      // Return outer or inner content
      return outerXML ? current.node.outerHTML : current.node.innerHTML
    }

    // Act as setter if we got a string

    // The default for import is, that the current node is not replaced
    outerXML = outerXML == null ? false : outerXML

    // Create temporary holder
    const well = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.create)('wrapper', ns)
    const fragment = _utils_window_js__WEBPACK_IMPORTED_MODULE_2__.globals.document.createDocumentFragment()

    // Dump raw svg
    well.innerHTML = xmlOrFn

    // Transplant nodes into the fragment
    for (let len = well.children.length; len--; ) {
      fragment.appendChild(well.firstElementChild)
    }

    const parent = this.parent()

    // Add the whole fragment at once
    return outerXML ? this.replace(fragment) && parent : this.add(fragment)
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Dom, { attr: _modules_core_attr_js__WEBPACK_IMPORTED_MODULE_7__["default"], find: _modules_core_selector_js__WEBPACK_IMPORTED_MODULE_1__.find, findOne: _modules_core_selector_js__WEBPACK_IMPORTED_MODULE_1__.findOne })
;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Dom, 'Dom')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Element.js":
/*!***************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Element.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Element)
/* harmony export */ });
/* harmony import */ var _types_Box_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types/Box.js */ "./node_modules/@svgdotjs/svg.js/src/types/Box.js");
/* harmony import */ var _types_Matrix_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/Matrix.js */ "./node_modules/@svgdotjs/svg.js/src/types/Matrix.js");
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");
/* harmony import */ var _types_Point_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../types/Point.js */ "./node_modules/@svgdotjs/svg.js/src/types/Point.js");
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/utils.js */ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js");
/* harmony import */ var _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../modules/core/regex.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js");
/* harmony import */ var _Dom_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Dom.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Dom.js");
/* harmony import */ var _types_List_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../types/List.js */ "./node_modules/@svgdotjs/svg.js/src/types/List.js");
/* harmony import */ var _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../types/SVGNumber.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js");











class Element extends _Dom_js__WEBPACK_IMPORTED_MODULE_7__["default"] {
  constructor(node, attrs) {
    super(node, attrs)

    // initialize data object
    this.dom = {}

    // create circular reference
    this.node.instance = this

    if (node.hasAttribute('data-svgjs') || node.hasAttribute('svgjs:data')) {
      // pull svgjs data from the dom (getAttributeNS doesn't work in html5)
      this.setData(
        JSON.parse(node.getAttribute('data-svgjs')) ??
          JSON.parse(node.getAttribute('svgjs:data')) ??
          {}
      )
    }
  }

  // Move element by its center
  center(x, y) {
    return this.cx(x).cy(y)
  }

  // Move by center over x-axis
  cx(x) {
    return x == null
      ? this.x() + this.width() / 2
      : this.x(x - this.width() / 2)
  }

  // Move by center over y-axis
  cy(y) {
    return y == null
      ? this.y() + this.height() / 2
      : this.y(y - this.height() / 2)
  }

  // Get defs
  defs() {
    const root = this.root()
    return root && root.defs()
  }

  // Relative move over x and y axes
  dmove(x, y) {
    return this.dx(x).dy(y)
  }

  // Relative move over x axis
  dx(x = 0) {
    return this.x(new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_9__["default"](x).plus(this.x()))
  }

  // Relative move over y axis
  dy(y = 0) {
    return this.y(new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_9__["default"](y).plus(this.y()))
  }

  getEventHolder() {
    return this
  }

  // Set height of element
  height(height) {
    return this.attr('height', height)
  }

  // Move element to given x and y values
  move(x, y) {
    return this.x(x).y(y)
  }

  // return array of all ancestors of given type up to the root svg
  parents(until = this.root()) {
    const isSelector = typeof until === 'string'
    if (!isSelector) {
      until = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_2__.makeInstance)(until)
    }
    const parents = new _types_List_js__WEBPACK_IMPORTED_MODULE_8__["default"]()
    let parent = this

    while (
      (parent = parent.parent()) &&
      parent.node !== _utils_window_js__WEBPACK_IMPORTED_MODULE_3__.globals.document &&
      parent.nodeName !== '#document-fragment'
    ) {
      parents.push(parent)

      if (!isSelector && parent.node === until.node) {
        break
      }
      if (isSelector && parent.matches(until)) {
        break
      }
      if (parent.node === this.root().node) {
        // We worked our way to the root and didn't match `until`
        return null
      }
    }

    return parents
  }

  // Get referenced element form attribute value
  reference(attr) {
    attr = this.attr(attr)
    if (!attr) return null

    const m = (attr + '').match(_modules_core_regex_js__WEBPACK_IMPORTED_MODULE_6__.reference)
    return m ? (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_2__.makeInstance)(m[1]) : null
  }

  // Get parent document
  root() {
    const p = this.parent((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_2__.getClass)(_utils_adopter_js__WEBPACK_IMPORTED_MODULE_2__.root))
    return p && p.root()
  }

  // set given data to the elements data property
  setData(o) {
    this.dom = o
    return this
  }

  // Set element size to given width and height
  size(width, height) {
    const p = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.proportionalSize)(this, width, height)

    return this.width(new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_9__["default"](p.width)).height(new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_9__["default"](p.height))
  }

  // Set width of element
  width(width) {
    return this.attr('width', width)
  }

  // write svgjs data to the dom
  writeDataToDom() {
    (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_5__.writeDataToDom)(this, this.dom)
    return super.writeDataToDom()
  }

  // Move over x-axis
  x(x) {
    return this.attr('x', x)
  }

  // Move over y-axis
  y(y) {
    return this.attr('y', y)
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_2__.extend)(Element, {
  bbox: _types_Box_js__WEBPACK_IMPORTED_MODULE_0__.bbox,
  rbox: _types_Box_js__WEBPACK_IMPORTED_MODULE_0__.rbox,
  inside: _types_Box_js__WEBPACK_IMPORTED_MODULE_0__.inside,
  point: _types_Point_js__WEBPACK_IMPORTED_MODULE_4__.point,
  ctm: _types_Matrix_js__WEBPACK_IMPORTED_MODULE_1__.ctm,
  screenCTM: _types_Matrix_js__WEBPACK_IMPORTED_MODULE_1__.screenCTM
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_2__.register)(Element, 'Element')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Ellipse.js":
/*!***************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Ellipse.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Ellipse)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils.js */ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types/SVGNumber.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js");
/* harmony import */ var _Shape_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Shape.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Shape.js");
/* harmony import */ var _modules_core_circled_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../modules/core/circled.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/circled.js");







class Ellipse extends _Shape_js__WEBPACK_IMPORTED_MODULE_4__["default"] {
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('ellipse', node), attrs)
  }

  size(width, height) {
    const p = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.proportionalSize)(this, width, height)

    return this.rx(new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_3__["default"](p.width).divide(2)).ry(
      new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_3__["default"](p.height).divide(2)
    )
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Ellipse, _modules_core_circled_js__WEBPACK_IMPORTED_MODULE_5__)

;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_2__.registerMethods)('Container', {
  // Create an ellipse
  ellipse: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (width = 0, height = width) {
    return this.put(new Ellipse()).size(width, height).move(0, 0)
  })
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Ellipse, 'Ellipse')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/ForeignObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/ForeignObject.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ForeignObject)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _Element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Element.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Element.js");




class ForeignObject extends _Element_js__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('foreignObject', node), attrs)
  }
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)({
  Container: {
    foreignObject: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (width, height) {
      return this.put(new ForeignObject()).size(width, height)
    })
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(ForeignObject, 'ForeignObject')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Fragment.js":
/*!****************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Fragment.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _Dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Dom.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Dom.js");
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");




class Fragment extends _Dom_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(node = _utils_window_js__WEBPACK_IMPORTED_MODULE_1__.globals.document.createDocumentFragment()) {
    super(node)
  }

  // Import / Export raw xml
  xml(xmlOrFn, outerXML, ns) {
    if (typeof xmlOrFn === 'boolean') {
      ns = outerXML
      outerXML = xmlOrFn
      xmlOrFn = null
    }

    // because this is a fragment we have to put all elements into a wrapper first
    // before we can get the innerXML from it
    if (xmlOrFn == null || typeof xmlOrFn === 'function') {
      const wrapper = new _Dom_js__WEBPACK_IMPORTED_MODULE_0__["default"]((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_2__.create)('wrapper', ns))
      wrapper.add(this.node.cloneNode(true))

      return wrapper.xml(false, ns)
    }

    // Act as setter if we got a string
    return super.xml(xmlOrFn, false, ns)
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_2__.register)(Fragment, 'Fragment')

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Fragment);


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/G.js":
/*!*********************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/G.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ G)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _Container_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Container.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Container.js");
/* harmony import */ var _modules_core_containerGeometry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/core/containerGeometry.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/containerGeometry.js");





class G extends _Container_js__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('g', node), attrs)
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.extend)(G, _modules_core_containerGeometry_js__WEBPACK_IMPORTED_MODULE_3__)

;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)({
  Container: {
    // Create a group element
    group: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function () {
      return this.put(new G())
    })
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(G, 'G')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Gradient.js":
/*!****************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Gradient.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Gradient)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _types_Box_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types/Box.js */ "./node_modules/@svgdotjs/svg.js/src/types/Box.js");
/* harmony import */ var _Container_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Container.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Container.js");
/* harmony import */ var _modules_core_selector_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/core/selector.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/selector.js");
/* harmony import */ var _modules_core_gradiented_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../modules/core/gradiented.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/gradiented.js");







class Gradient extends _Container_js__WEBPACK_IMPORTED_MODULE_3__["default"] {
  constructor(type, attrs) {
    super(
      (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)(type + 'Gradient', typeof type === 'string' ? null : type),
      attrs
    )
  }

  // custom attr to handle transform
  attr(a, b, c) {
    if (a === 'transform') a = 'gradientTransform'
    return super.attr(a, b, c)
  }

  bbox() {
    return new _types_Box_js__WEBPACK_IMPORTED_MODULE_2__["default"]()
  }

  targets() {
    return (0,_modules_core_selector_js__WEBPACK_IMPORTED_MODULE_4__["default"])('svg [fill*=' + this.id() + ']')
  }

  // Alias string conversion to fill
  toString() {
    return this.url()
  }

  // Update gradient
  update(block) {
    // remove all stops
    this.clear()

    // invoke passed block
    if (typeof block === 'function') {
      block.call(this, this)
    }

    return this
  }

  // Return the fill id
  url() {
    return 'url(#' + this.id() + ')'
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Gradient, _modules_core_gradiented_js__WEBPACK_IMPORTED_MODULE_5__)

;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)({
  Container: {
    // Create gradient element in defs
    gradient(...args) {
      return this.defs().gradient(...args)
    }
  },
  // define gradient
  Defs: {
    gradient: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (type, block) {
      return this.put(new Gradient(type)).update(block)
    })
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Gradient, 'Gradient')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Image.js":
/*!*************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Image.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Image)
/* harmony export */ });
/* harmony import */ var _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/core/regex.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js");
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _modules_core_event_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/core/event.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/event.js");
/* harmony import */ var _modules_core_attr_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/core/attr.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/attr.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../modules/core/namespaces.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/namespaces.js");
/* harmony import */ var _Pattern_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Pattern.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Pattern.js");
/* harmony import */ var _Shape_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Shape.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Shape.js");
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");










class Image extends _Shape_js__WEBPACK_IMPORTED_MODULE_7__["default"] {
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.nodeOrNew)('image', node), attrs)
  }

  // (re)load image
  load(url, callback) {
    if (!url) return this

    const img = new _utils_window_js__WEBPACK_IMPORTED_MODULE_8__.globals.window.Image()

    ;(0,_modules_core_event_js__WEBPACK_IMPORTED_MODULE_2__.on)(
      img,
      'load',
      function (e) {
        const p = this.parent(_Pattern_js__WEBPACK_IMPORTED_MODULE_6__["default"])

        // ensure image size
        if (this.width() === 0 && this.height() === 0) {
          this.size(img.width, img.height)
        }

        if (p instanceof _Pattern_js__WEBPACK_IMPORTED_MODULE_6__["default"]) {
          // ensure pattern size if not set
          if (p.width() === 0 && p.height() === 0) {
            p.size(this.width(), this.height())
          }
        }

        if (typeof callback === 'function') {
          callback.call(this, e)
        }
      },
      this
    )

    ;(0,_modules_core_event_js__WEBPACK_IMPORTED_MODULE_2__.on)(img, 'load error', function () {
      // dont forget to unbind memory leaking events
      ;(0,_modules_core_event_js__WEBPACK_IMPORTED_MODULE_2__.off)(img)
    })

    return this.attr('href', (img.src = url), _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_5__.xlink)
  }
}

(0,_modules_core_attr_js__WEBPACK_IMPORTED_MODULE_3__.registerAttrHook)(function (attr, val, _this) {
  // convert image fill and stroke to patterns
  if (attr === 'fill' || attr === 'stroke') {
    if (_modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__.isImage.test(val)) {
      val = _this.root().defs().image(val)
    }
  }

  if (val instanceof Image) {
    val = _this
      .root()
      .defs()
      .pattern(0, 0, (pattern) => {
        pattern.add(val)
      })
  }

  return val
})

;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_4__.registerMethods)({
  Container: {
    // create image element, load image and set its size
    image: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.wrapWithAttrCheck)(function (source, callback) {
      return this.put(new Image()).size(0, 0).load(source, callback)
    })
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.register)(Image, 'Image')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Line.js":
/*!************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Line.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Line)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils.js */ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _types_PointArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types/PointArray.js */ "./node_modules/@svgdotjs/svg.js/src/types/PointArray.js");
/* harmony import */ var _Shape_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Shape.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Shape.js");
/* harmony import */ var _modules_core_pointed_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../modules/core/pointed.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/pointed.js");







class Line extends _Shape_js__WEBPACK_IMPORTED_MODULE_4__["default"] {
  // Initialize node
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('line', node), attrs)
  }

  // Get array
  array() {
    return new _types_PointArray_js__WEBPACK_IMPORTED_MODULE_3__["default"]([
      [this.attr('x1'), this.attr('y1')],
      [this.attr('x2'), this.attr('y2')]
    ])
  }

  // Move by left top corner
  move(x, y) {
    return this.attr(this.array().move(x, y).toLine())
  }

  // Overwrite native plot() method
  plot(x1, y1, x2, y2) {
    if (x1 == null) {
      return this.array()
    } else if (typeof y1 !== 'undefined') {
      x1 = { x1, y1, x2, y2 }
    } else {
      x1 = new _types_PointArray_js__WEBPACK_IMPORTED_MODULE_3__["default"](x1).toLine()
    }

    return this.attr(x1)
  }

  // Set element size to given width and height
  size(width, height) {
    const p = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.proportionalSize)(this, width, height)
    return this.attr(this.array().size(p.width, p.height).toLine())
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Line, _modules_core_pointed_js__WEBPACK_IMPORTED_MODULE_5__)

;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_2__.registerMethods)({
  Container: {
    // Create a line element
    line: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (...args) {
      // make sure plot is called as a setter
      // x1 is not necessarily a number, it can also be an array, a string and a PointArray
      return Line.prototype.plot.apply(
        this.put(new Line()),
        args[0] != null ? args : [0, 0, 0, 0]
      )
    })
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Line, 'Line')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Marker.js":
/*!**************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Marker.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Marker)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _Container_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Container.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Container.js");




class Marker extends _Container_js__WEBPACK_IMPORTED_MODULE_2__["default"] {
  // Initialize node
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('marker', node), attrs)
  }

  // Set height of element
  height(height) {
    return this.attr('markerHeight', height)
  }

  orient(orient) {
    return this.attr('orient', orient)
  }

  // Set marker refX and refY
  ref(x, y) {
    return this.attr('refX', x).attr('refY', y)
  }

  // Return the fill id
  toString() {
    return 'url(#' + this.id() + ')'
  }

  // Update marker
  update(block) {
    // remove all content
    this.clear()

    // invoke passed block
    if (typeof block === 'function') {
      block.call(this, this)
    }

    return this
  }

  // Set width of element
  width(width) {
    return this.attr('markerWidth', width)
  }
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)({
  Container: {
    marker(...args) {
      // Create marker element in defs
      return this.defs().marker(...args)
    }
  },
  Defs: {
    // Create marker
    marker: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (width, height, block) {
      // Set default viewbox to match the width and height, set ref to cx and cy and set orient to auto
      return this.put(new Marker())
        .size(width, height)
        .ref(width / 2, height / 2)
        .viewbox(0, 0, width, height)
        .attr('orient', 'auto')
        .update(block)
    })
  },
  marker: {
    // Create and attach markers
    marker(marker, width, height, block) {
      let attr = ['marker']

      // Build attribute name
      if (marker !== 'all') attr.push(marker)
      attr = attr.join('-')

      // Set marker attribute
      marker =
        arguments[1] instanceof Marker
          ? arguments[1]
          : this.defs().marker(width, height, block)

      return this.attr(attr, marker)
    }
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Marker, 'Marker')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Mask.js":
/*!************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Mask.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Mask)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _Container_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Container.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Container.js");
/* harmony import */ var _modules_core_selector_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/core/selector.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/selector.js");





class Mask extends _Container_js__WEBPACK_IMPORTED_MODULE_2__["default"] {
  // Initialize node
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('mask', node), attrs)
  }

  // Unmask all masked elements and remove itself
  remove() {
    // unmask all targets
    this.targets().forEach(function (el) {
      el.unmask()
    })

    // remove mask from parent
    return super.remove()
  }

  targets() {
    return (0,_modules_core_selector_js__WEBPACK_IMPORTED_MODULE_3__["default"])('svg [mask*=' + this.id() + ']')
  }
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)({
  Container: {
    mask: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function () {
      return this.defs().put(new Mask())
    })
  },
  Element: {
    // Distribute mask to svg element
    masker() {
      return this.reference('mask')
    },

    maskWith(element) {
      // use given mask or create a new one
      const masker =
        element instanceof Mask ? element : this.parent().mask().add(element)

      // apply mask
      return this.attr('mask', 'url(#' + masker.id() + ')')
    },

    // Unmask element
    unmask() {
      return this.attr('mask', null)
    }
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Mask, 'Mask')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Path.js":
/*!************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Path.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Path)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils.js */ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _types_PathArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types/PathArray.js */ "./node_modules/@svgdotjs/svg.js/src/types/PathArray.js");
/* harmony import */ var _Shape_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Shape.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Shape.js");






class Path extends _Shape_js__WEBPACK_IMPORTED_MODULE_4__["default"] {
  // Initialize node
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('path', node), attrs)
  }

  // Get array
  array() {
    return this._array || (this._array = new _types_PathArray_js__WEBPACK_IMPORTED_MODULE_3__["default"](this.attr('d')))
  }

  // Clear array cache
  clear() {
    delete this._array
    return this
  }

  // Set height of element
  height(height) {
    return height == null
      ? this.bbox().height
      : this.size(this.bbox().width, height)
  }

  // Move by left top corner
  move(x, y) {
    return this.attr('d', this.array().move(x, y))
  }

  // Plot new path
  plot(d) {
    return d == null
      ? this.array()
      : this.clear().attr(
          'd',
          typeof d === 'string' ? d : (this._array = new _types_PathArray_js__WEBPACK_IMPORTED_MODULE_3__["default"](d))
        )
  }

  // Set element size to given width and height
  size(width, height) {
    const p = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.proportionalSize)(this, width, height)
    return this.attr('d', this.array().size(p.width, p.height))
  }

  // Set width of element
  width(width) {
    return width == null
      ? this.bbox().width
      : this.size(width, this.bbox().height)
  }

  // Move by left top corner over x-axis
  x(x) {
    return x == null ? this.bbox().x : this.move(x, this.bbox().y)
  }

  // Move by left top corner over y-axis
  y(y) {
    return y == null ? this.bbox().y : this.move(this.bbox().x, y)
  }
}

// Define morphable array
Path.prototype.MorphArray = _types_PathArray_js__WEBPACK_IMPORTED_MODULE_3__["default"]

// Add parent method
;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_2__.registerMethods)({
  Container: {
    // Create a wrapped path element
    path: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (d) {
      // make sure plot is called as a setter
      return this.put(new Path()).plot(d || new _types_PathArray_js__WEBPACK_IMPORTED_MODULE_3__["default"]())
    })
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Path, 'Path')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Pattern.js":
/*!***************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Pattern.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Pattern)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _types_Box_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types/Box.js */ "./node_modules/@svgdotjs/svg.js/src/types/Box.js");
/* harmony import */ var _Container_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Container.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Container.js");
/* harmony import */ var _modules_core_selector_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/core/selector.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/selector.js");






class Pattern extends _Container_js__WEBPACK_IMPORTED_MODULE_3__["default"] {
  // Initialize node
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('pattern', node), attrs)
  }

  // custom attr to handle transform
  attr(a, b, c) {
    if (a === 'transform') a = 'patternTransform'
    return super.attr(a, b, c)
  }

  bbox() {
    return new _types_Box_js__WEBPACK_IMPORTED_MODULE_2__["default"]()
  }

  targets() {
    return (0,_modules_core_selector_js__WEBPACK_IMPORTED_MODULE_4__["default"])('svg [fill*=' + this.id() + ']')
  }

  // Alias string conversion to fill
  toString() {
    return this.url()
  }

  // Update pattern by rebuilding
  update(block) {
    // remove content
    this.clear()

    // invoke passed block
    if (typeof block === 'function') {
      block.call(this, this)
    }

    return this
  }

  // Return the fill id
  url() {
    return 'url(#' + this.id() + ')'
  }
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)({
  Container: {
    // Create pattern element in defs
    pattern(...args) {
      return this.defs().pattern(...args)
    }
  },
  Defs: {
    pattern: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (width, height, block) {
      return this.put(new Pattern()).update(block).attr({
        x: 0,
        y: 0,
        width: width,
        height: height,
        patternUnits: 'userSpaceOnUse'
      })
    })
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Pattern, 'Pattern')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Polygon.js":
/*!***************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Polygon.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Polygon)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _types_PointArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types/PointArray.js */ "./node_modules/@svgdotjs/svg.js/src/types/PointArray.js");
/* harmony import */ var _Shape_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Shape.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Shape.js");
/* harmony import */ var _modules_core_pointed_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/core/pointed.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/pointed.js");
/* harmony import */ var _modules_core_poly_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../modules/core/poly.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/poly.js");







class Polygon extends _Shape_js__WEBPACK_IMPORTED_MODULE_3__["default"] {
  // Initialize node
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('polygon', node), attrs)
  }
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)({
  Container: {
    // Create a wrapped polygon element
    polygon: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (p) {
      // make sure plot is called as a setter
      return this.put(new Polygon()).plot(p || new _types_PointArray_js__WEBPACK_IMPORTED_MODULE_2__["default"]())
    })
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Polygon, _modules_core_pointed_js__WEBPACK_IMPORTED_MODULE_4__)
;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Polygon, _modules_core_poly_js__WEBPACK_IMPORTED_MODULE_5__)
;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Polygon, 'Polygon')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Polyline.js":
/*!****************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Polyline.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Polyline)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _types_PointArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types/PointArray.js */ "./node_modules/@svgdotjs/svg.js/src/types/PointArray.js");
/* harmony import */ var _Shape_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Shape.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Shape.js");
/* harmony import */ var _modules_core_pointed_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/core/pointed.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/pointed.js");
/* harmony import */ var _modules_core_poly_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../modules/core/poly.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/poly.js");







class Polyline extends _Shape_js__WEBPACK_IMPORTED_MODULE_3__["default"] {
  // Initialize node
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('polyline', node), attrs)
  }
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)({
  Container: {
    // Create a wrapped polygon element
    polyline: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (p) {
      // make sure plot is called as a setter
      return this.put(new Polyline()).plot(p || new _types_PointArray_js__WEBPACK_IMPORTED_MODULE_2__["default"]())
    })
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Polyline, _modules_core_pointed_js__WEBPACK_IMPORTED_MODULE_4__)
;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Polyline, _modules_core_poly_js__WEBPACK_IMPORTED_MODULE_5__)
;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Polyline, 'Polyline')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Rect.js":
/*!************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Rect.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Rect)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _modules_core_circled_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/core/circled.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/circled.js");
/* harmony import */ var _Shape_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Shape.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Shape.js");





class Rect extends _Shape_js__WEBPACK_IMPORTED_MODULE_3__["default"] {
  // Initialize node
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('rect', node), attrs)
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Rect, { rx: _modules_core_circled_js__WEBPACK_IMPORTED_MODULE_2__.rx, ry: _modules_core_circled_js__WEBPACK_IMPORTED_MODULE_2__.ry })

;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)({
  Container: {
    // Create a rect element
    rect: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (width, height) {
      return this.put(new Rect()).size(width, height)
    })
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Rect, 'Rect')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Shape.js":
/*!*************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Shape.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Shape)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _Element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Element.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Element.js");



class Shape extends _Element_js__WEBPACK_IMPORTED_MODULE_1__["default"] {}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Shape, 'Shape')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Stop.js":
/*!************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Stop.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Stop)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _Element_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Element.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Element.js");
/* harmony import */ var _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types/SVGNumber.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");





class Stop extends _Element_js__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('stop', node), attrs)
  }

  // add color stops
  update(o) {
    if (typeof o === 'number' || o instanceof _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      o = {
        offset: arguments[0],
        color: arguments[1],
        opacity: arguments[2]
      }
    }

    // set attributes
    if (o.opacity != null) this.attr('stop-opacity', o.opacity)
    if (o.color != null) this.attr('stop-color', o.color)
    if (o.offset != null) this.attr('offset', new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_2__["default"](o.offset))

    return this
  }
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_3__.registerMethods)({
  Gradient: {
    // Add a color stop
    stop: function (offset, color, opacity) {
      return this.put(new Stop()).update(offset, color, opacity)
    }
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Stop, 'Stop')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Style.js":
/*!*************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Style.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Style)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/utils.js */ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js");
/* harmony import */ var _Element_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Element.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Element.js");





function cssRule(selector, rule) {
  if (!selector) return ''
  if (!rule) return selector

  let ret = selector + '{'

  for (const i in rule) {
    ret += (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.unCamelCase)(i) + ':' + rule[i] + ';'
  }

  ret += '}'

  return ret
}

class Style extends _Element_js__WEBPACK_IMPORTED_MODULE_3__["default"] {
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('style', node), attrs)
  }

  addText(w = '') {
    this.node.textContent += w
    return this
  }

  font(name, src, params = {}) {
    return this.rule('@font-face', {
      fontFamily: name,
      src: src,
      ...params
    })
  }

  rule(selector, obj) {
    return this.addText(cssRule(selector, obj))
  }
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)('Dom', {
  style(selector, obj) {
    return this.put(new Style()).rule(selector, obj)
  },
  fontface(name, src, params) {
    return this.put(new Style()).font(name, src, params)
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Style, 'Style')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Svg.js":
/*!***********************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Svg.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Svg)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/core/namespaces.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/namespaces.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _Container_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Container.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Container.js");
/* harmony import */ var _Defs_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Defs.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Defs.js");
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");







class Svg extends _Container_js__WEBPACK_IMPORTED_MODULE_3__["default"] {
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('svg', node), attrs)
    this.namespace()
  }

  // Creates and returns defs element
  defs() {
    if (!this.isRoot()) return this.root().defs()

    return (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.adopt)(this.node.querySelector('defs')) || this.put(new _Defs_js__WEBPACK_IMPORTED_MODULE_4__["default"]())
  }

  isRoot() {
    return (
      !this.node.parentNode ||
      (!(this.node.parentNode instanceof _utils_window_js__WEBPACK_IMPORTED_MODULE_5__.globals.window.SVGElement) &&
        this.node.parentNode.nodeName !== '#document-fragment')
    )
  }

  // Add namespaces
  namespace() {
    if (!this.isRoot()) return this.root().namespace()
    return this.attr({ xmlns: _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_1__.svg, version: '1.1' }).attr(
      'xmlns:xlink',
      _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_1__.xlink,
      _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_1__.xmlns
    )
  }

  removeNamespace() {
    return this.attr({ xmlns: null, version: null })
      .attr('xmlns:xlink', null, _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_1__.xmlns)
      .attr('xmlns:svgjs', null, _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_1__.xmlns)
  }

  // Check if this is a root svg
  // If not, call root() from this element
  root() {
    if (this.isRoot()) return this
    return super.root()
  }
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_2__.registerMethods)({
  Container: {
    // Create nested svg document
    nested: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function () {
      return this.put(new Svg())
    })
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Svg, 'Svg', true)


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Symbol.js":
/*!**************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Symbol.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Symbol)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _Container_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Container.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Container.js");




class Symbol extends _Container_js__WEBPACK_IMPORTED_MODULE_2__["default"] {
  // Initialize node
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('symbol', node), attrs)
  }
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)({
  Container: {
    symbol: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function () {
      return this.put(new Symbol())
    })
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Symbol, 'Symbol')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Text.js":
/*!************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Text.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Text)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../types/SVGNumber.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js");
/* harmony import */ var _Shape_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Shape.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Shape.js");
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");
/* harmony import */ var _modules_core_textable_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../modules/core/textable.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/textable.js");
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/utils.js */ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js");








class Text extends _Shape_js__WEBPACK_IMPORTED_MODULE_3__["default"] {
  // Initialize node
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('text', node), attrs)

    this.dom.leading = this.dom.leading ?? new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_2__["default"](1.3) // store leading value for rebuilding
    this._rebuild = true // enable automatic updating of dy values
    this._build = false // disable build mode for adding multiple lines
  }

  // Set / get leading
  leading(value) {
    // act as getter
    if (value == null) {
      return this.dom.leading
    }

    // act as setter
    this.dom.leading = new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_2__["default"](value)

    return this.rebuild()
  }

  // Rebuild appearance type
  rebuild(rebuild) {
    // store new rebuild flag if given
    if (typeof rebuild === 'boolean') {
      this._rebuild = rebuild
    }

    // define position of all lines
    if (this._rebuild) {
      const self = this
      let blankLineOffset = 0
      const leading = this.dom.leading

      this.each(function (i) {
        if ((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_6__.isDescriptive)(this.node)) return

        const fontSize = _utils_window_js__WEBPACK_IMPORTED_MODULE_4__.globals.window
          .getComputedStyle(this.node)
          .getPropertyValue('font-size')

        const dy = leading * new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_2__["default"](fontSize)

        if (this.dom.newLined) {
          this.attr('x', self.attr('x'))

          if (this.text() === '\n') {
            blankLineOffset += dy
          } else {
            this.attr('dy', i ? dy + blankLineOffset : 0)
            blankLineOffset = 0
          }
        }
      })

      this.fire('rebuild')
    }

    return this
  }

  // overwrite method from parent to set data properly
  setData(o) {
    this.dom = o
    this.dom.leading = new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_2__["default"](o.leading || 1.3)
    return this
  }

  writeDataToDom() {
    (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_6__.writeDataToDom)(this, this.dom, { leading: 1.3 })
    return this
  }

  // Set the text content
  text(text) {
    // act as getter
    if (text === undefined) {
      const children = this.node.childNodes
      let firstLine = 0
      text = ''

      for (let i = 0, len = children.length; i < len; ++i) {
        // skip textPaths - they are no lines
        if (children[i].nodeName === 'textPath' || (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_6__.isDescriptive)(children[i])) {
          if (i === 0) firstLine = i + 1
          continue
        }

        // add newline if its not the first child and newLined is set to true
        if (
          i !== firstLine &&
          children[i].nodeType !== 3 &&
          (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.adopt)(children[i]).dom.newLined === true
        ) {
          text += '\n'
        }

        // add content of this node
        text += children[i].textContent
      }

      return text
    }

    // remove existing content
    this.clear().build(true)

    if (typeof text === 'function') {
      // call block
      text.call(this, this)
    } else {
      // store text and make sure text is not blank
      text = (text + '').split('\n')

      // build new lines
      for (let j = 0, jl = text.length; j < jl; j++) {
        this.newLine(text[j])
      }
    }

    // disable build mode and rebuild lines
    return this.build(false).rebuild()
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Text, _modules_core_textable_js__WEBPACK_IMPORTED_MODULE_5__)

;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)({
  Container: {
    // Create text element
    text: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (text = '') {
      return this.put(new Text()).text(text)
    }),

    // Create plain text element
    plain: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (text = '') {
      return this.put(new Text()).plain(text)
    })
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Text, 'Text')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/TextPath.js":
/*!****************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/TextPath.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextPath)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/core/namespaces.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/namespaces.js");
/* harmony import */ var _Path_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Path.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Path.js");
/* harmony import */ var _types_PathArray_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../types/PathArray.js */ "./node_modules/@svgdotjs/svg.js/src/types/PathArray.js");
/* harmony import */ var _Text_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Text.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Text.js");
/* harmony import */ var _modules_core_selector_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../modules/core/selector.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/selector.js");








class TextPath extends _Text_js__WEBPACK_IMPORTED_MODULE_5__["default"] {
  // Initialize node
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('textPath', node), attrs)
  }

  // return the array of the path track element
  array() {
    const track = this.track()

    return track ? track.array() : null
  }

  // Plot path if any
  plot(d) {
    const track = this.track()
    let pathArray = null

    if (track) {
      pathArray = track.plot(d)
    }

    return d == null ? pathArray : this
  }

  // Get the path element
  track() {
    return this.reference('href')
  }
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)({
  Container: {
    textPath: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (text, path) {
      // Convert text to instance if needed
      if (!(text instanceof _Text_js__WEBPACK_IMPORTED_MODULE_5__["default"])) {
        text = this.text(text)
      }

      return text.path(path)
    })
  },
  Text: {
    // Create path for text to run on
    path: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (track, importNodes = true) {
      const textPath = new TextPath()

      // if track is a path, reuse it
      if (!(track instanceof _Path_js__WEBPACK_IMPORTED_MODULE_3__["default"])) {
        // create path element
        track = this.defs().path(track)
      }

      // link textPath to path and add content
      textPath.attr('href', '#' + track, _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_2__.xlink)

      // Transplant all nodes from text to textPath
      let node
      if (importNodes) {
        while ((node = this.node.firstChild)) {
          textPath.node.appendChild(node)
        }
      }

      // add textPath element as child node and return textPath
      return this.put(textPath)
    }),

    // Get the textPath children
    textPath() {
      return this.findOne('textPath')
    }
  },
  Path: {
    // creates a textPath from this path
    text: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (text) {
      // Convert text to instance if needed
      if (!(text instanceof _Text_js__WEBPACK_IMPORTED_MODULE_5__["default"])) {
        text = new _Text_js__WEBPACK_IMPORTED_MODULE_5__["default"]().addTo(this.parent()).text(text)
      }

      // Create textPath from text and path and return
      return text.path(this)
    }),

    targets() {
      return (0,_modules_core_selector_js__WEBPACK_IMPORTED_MODULE_6__["default"])('svg textPath').filter((node) => {
        return (node.attr('href') || '').includes(this.id())
      })

      // Does not work in IE11. Use when IE support is dropped
      // return baseFind('svg textPath[*|href*=' + this.id() + ']')
    }
  }
})

TextPath.prototype.MorphArray = _types_PathArray_js__WEBPACK_IMPORTED_MODULE_4__["default"]
;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(TextPath, 'TextPath')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Tspan.js":
/*!*************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Tspan.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Tspan)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../types/SVGNumber.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js");
/* harmony import */ var _Shape_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Shape.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Shape.js");
/* harmony import */ var _Text_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Text.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Text.js");
/* harmony import */ var _modules_core_textable_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../modules/core/textable.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/textable.js");








class Tspan extends _Shape_js__WEBPACK_IMPORTED_MODULE_4__["default"] {
  // Initialize node
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('tspan', node), attrs)
    this._build = false // disable build mode for adding multiple lines
  }

  // Shortcut dx
  dx(dx) {
    return this.attr('dx', dx)
  }

  // Shortcut dy
  dy(dy) {
    return this.attr('dy', dy)
  }

  // Create new line
  newLine() {
    // mark new line
    this.dom.newLined = true

    // fetch parent
    const text = this.parent()

    // early return in case we are not in a text element
    if (!(text instanceof _Text_js__WEBPACK_IMPORTED_MODULE_5__["default"])) {
      return this
    }

    const i = text.index(this)

    const fontSize = _utils_window_js__WEBPACK_IMPORTED_MODULE_1__.globals.window
      .getComputedStyle(this.node)
      .getPropertyValue('font-size')
    const dy = text.dom.leading * new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_3__["default"](fontSize)

    // apply new position
    return this.dy(i ? dy : 0).attr('x', text.x())
  }

  // Set text content
  text(text) {
    if (text == null)
      return this.node.textContent + (this.dom.newLined ? '\n' : '')

    if (typeof text === 'function') {
      this.clear().build(true)
      text.call(this, this)
      this.build(false)
    } else {
      this.plain(text)
    }

    return this
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.extend)(Tspan, _modules_core_textable_js__WEBPACK_IMPORTED_MODULE_6__)

;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_2__.registerMethods)({
  Tspan: {
    tspan: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (text = '') {
      const tspan = new Tspan()

      // clear if build mode is disabled
      if (!this._build) {
        this.clear()
      }

      // add new tspan
      return this.put(tspan).text(text)
    })
  },
  Text: {
    newLine: function (text = '') {
      return this.tspan(text).newLine()
    }
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Tspan, 'Tspan')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/elements/Use.js":
/*!***********************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/elements/Use.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Use)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/core/namespaces.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/namespaces.js");
/* harmony import */ var _Shape_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Shape.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Shape.js");





class Use extends _Shape_js__WEBPACK_IMPORTED_MODULE_3__["default"] {
  constructor(node, attrs = node) {
    super((0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.nodeOrNew)('use', node), attrs)
  }

  // Use element as a reference
  use(element, file) {
    // Set lined element
    return this.attr('href', (file || '') + '#' + element, _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_2__.xlink)
  }
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)({
  Container: {
    // Create a use element
    use: (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.wrapWithAttrCheck)(function (element, file) {
      return this.put(new Use()).use(element, file)
    })
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.register)(Use, 'Use')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/main.js":
/*!***************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/main.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* reexport safe */ _elements_A_js__WEBPACK_IMPORTED_MODULE_57__["default"]),
/* harmony export */   Animator: () => (/* reexport safe */ _animation_Animator_js__WEBPACK_IMPORTED_MODULE_49__["default"]),
/* harmony export */   Array: () => (/* reexport safe */ _types_SVGArray_js__WEBPACK_IMPORTED_MODULE_34__["default"]),
/* harmony export */   Box: () => (/* reexport safe */ _types_Box_js__WEBPACK_IMPORTED_MODULE_9__["default"]),
/* harmony export */   Circle: () => (/* reexport safe */ _elements_Circle_js__WEBPACK_IMPORTED_MODULE_53__["default"]),
/* harmony export */   ClipPath: () => (/* reexport safe */ _elements_ClipPath_js__WEBPACK_IMPORTED_MODULE_54__["default"]),
/* harmony export */   Color: () => (/* reexport safe */ _types_Color_js__WEBPACK_IMPORTED_MODULE_10__["default"]),
/* harmony export */   Container: () => (/* reexport safe */ _elements_Container_js__WEBPACK_IMPORTED_MODULE_11__["default"]),
/* harmony export */   Controller: () => (/* reexport safe */ _animation_Controller_js__WEBPACK_IMPORTED_MODULE_50__.Controller),
/* harmony export */   Defs: () => (/* reexport safe */ _elements_Defs_js__WEBPACK_IMPORTED_MODULE_12__["default"]),
/* harmony export */   Dom: () => (/* reexport safe */ _elements_Dom_js__WEBPACK_IMPORTED_MODULE_13__["default"]),
/* harmony export */   Ease: () => (/* reexport safe */ _animation_Controller_js__WEBPACK_IMPORTED_MODULE_50__.Ease),
/* harmony export */   Element: () => (/* reexport safe */ _elements_Element_js__WEBPACK_IMPORTED_MODULE_14__["default"]),
/* harmony export */   Ellipse: () => (/* reexport safe */ _elements_Ellipse_js__WEBPACK_IMPORTED_MODULE_15__["default"]),
/* harmony export */   EventTarget: () => (/* reexport safe */ _types_EventTarget_js__WEBPACK_IMPORTED_MODULE_16__["default"]),
/* harmony export */   ForeignObject: () => (/* reexport safe */ _elements_ForeignObject_js__WEBPACK_IMPORTED_MODULE_55__["default"]),
/* harmony export */   Fragment: () => (/* reexport safe */ _elements_Fragment_js__WEBPACK_IMPORTED_MODULE_17__["default"]),
/* harmony export */   G: () => (/* reexport safe */ _elements_G_js__WEBPACK_IMPORTED_MODULE_56__["default"]),
/* harmony export */   Gradient: () => (/* reexport safe */ _elements_Gradient_js__WEBPACK_IMPORTED_MODULE_18__["default"]),
/* harmony export */   Image: () => (/* reexport safe */ _elements_Image_js__WEBPACK_IMPORTED_MODULE_19__["default"]),
/* harmony export */   Line: () => (/* reexport safe */ _elements_Line_js__WEBPACK_IMPORTED_MODULE_20__["default"]),
/* harmony export */   List: () => (/* reexport safe */ _types_List_js__WEBPACK_IMPORTED_MODULE_21__["default"]),
/* harmony export */   Marker: () => (/* reexport safe */ _elements_Marker_js__WEBPACK_IMPORTED_MODULE_22__["default"]),
/* harmony export */   Mask: () => (/* reexport safe */ _elements_Mask_js__WEBPACK_IMPORTED_MODULE_58__["default"]),
/* harmony export */   Matrix: () => (/* reexport safe */ _types_Matrix_js__WEBPACK_IMPORTED_MODULE_23__["default"]),
/* harmony export */   Morphable: () => (/* reexport safe */ _animation_Morphable_js__WEBPACK_IMPORTED_MODULE_24__["default"]),
/* harmony export */   NonMorphable: () => (/* reexport safe */ _animation_Morphable_js__WEBPACK_IMPORTED_MODULE_24__.NonMorphable),
/* harmony export */   Number: () => (/* reexport safe */ _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_35__["default"]),
/* harmony export */   ObjectBag: () => (/* reexport safe */ _animation_Morphable_js__WEBPACK_IMPORTED_MODULE_24__.ObjectBag),
/* harmony export */   PID: () => (/* reexport safe */ _animation_Controller_js__WEBPACK_IMPORTED_MODULE_50__.PID),
/* harmony export */   Path: () => (/* reexport safe */ _elements_Path_js__WEBPACK_IMPORTED_MODULE_25__["default"]),
/* harmony export */   PathArray: () => (/* reexport safe */ _types_PathArray_js__WEBPACK_IMPORTED_MODULE_26__["default"]),
/* harmony export */   Pattern: () => (/* reexport safe */ _elements_Pattern_js__WEBPACK_IMPORTED_MODULE_27__["default"]),
/* harmony export */   Point: () => (/* reexport safe */ _types_Point_js__WEBPACK_IMPORTED_MODULE_29__["default"]),
/* harmony export */   PointArray: () => (/* reexport safe */ _types_PointArray_js__WEBPACK_IMPORTED_MODULE_28__["default"]),
/* harmony export */   Polygon: () => (/* reexport safe */ _elements_Polygon_js__WEBPACK_IMPORTED_MODULE_30__["default"]),
/* harmony export */   Polyline: () => (/* reexport safe */ _elements_Polyline_js__WEBPACK_IMPORTED_MODULE_31__["default"]),
/* harmony export */   Queue: () => (/* reexport safe */ _animation_Queue_js__WEBPACK_IMPORTED_MODULE_51__["default"]),
/* harmony export */   Rect: () => (/* reexport safe */ _elements_Rect_js__WEBPACK_IMPORTED_MODULE_32__["default"]),
/* harmony export */   Runner: () => (/* reexport safe */ _animation_Runner_js__WEBPACK_IMPORTED_MODULE_33__["default"]),
/* harmony export */   SVG: () => (/* binding */ SVG),
/* harmony export */   Shape: () => (/* reexport safe */ _elements_Shape_js__WEBPACK_IMPORTED_MODULE_36__["default"]),
/* harmony export */   Spring: () => (/* reexport safe */ _animation_Controller_js__WEBPACK_IMPORTED_MODULE_50__.Spring),
/* harmony export */   Stop: () => (/* reexport safe */ _elements_Stop_js__WEBPACK_IMPORTED_MODULE_59__["default"]),
/* harmony export */   Style: () => (/* reexport safe */ _elements_Style_js__WEBPACK_IMPORTED_MODULE_60__["default"]),
/* harmony export */   Svg: () => (/* reexport safe */ _elements_Svg_js__WEBPACK_IMPORTED_MODULE_37__["default"]),
/* harmony export */   Symbol: () => (/* reexport safe */ _elements_Symbol_js__WEBPACK_IMPORTED_MODULE_38__["default"]),
/* harmony export */   Text: () => (/* reexport safe */ _elements_Text_js__WEBPACK_IMPORTED_MODULE_39__["default"]),
/* harmony export */   TextPath: () => (/* reexport safe */ _elements_TextPath_js__WEBPACK_IMPORTED_MODULE_61__["default"]),
/* harmony export */   Timeline: () => (/* reexport safe */ _animation_Timeline_js__WEBPACK_IMPORTED_MODULE_52__["default"]),
/* harmony export */   TransformBag: () => (/* reexport safe */ _animation_Morphable_js__WEBPACK_IMPORTED_MODULE_24__.TransformBag),
/* harmony export */   Tspan: () => (/* reexport safe */ _elements_Tspan_js__WEBPACK_IMPORTED_MODULE_40__["default"]),
/* harmony export */   Use: () => (/* reexport safe */ _elements_Use_js__WEBPACK_IMPORTED_MODULE_62__["default"]),
/* harmony export */   adopt: () => (/* reexport safe */ _utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.adopt),
/* harmony export */   assignNewId: () => (/* reexport safe */ _utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.assignNewId),
/* harmony export */   clearEvents: () => (/* reexport safe */ _modules_core_event_js__WEBPACK_IMPORTED_MODULE_47__.clearEvents),
/* harmony export */   create: () => (/* reexport safe */ _utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.create),
/* harmony export */   defaults: () => (/* reexport module object */ _modules_core_defaults_js__WEBPACK_IMPORTED_MODULE_41__),
/* harmony export */   dispatch: () => (/* reexport safe */ _modules_core_event_js__WEBPACK_IMPORTED_MODULE_47__.dispatch),
/* harmony export */   easing: () => (/* reexport safe */ _animation_Controller_js__WEBPACK_IMPORTED_MODULE_50__.easing),
/* harmony export */   eid: () => (/* reexport safe */ _utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.eid),
/* harmony export */   extend: () => (/* reexport safe */ _utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.extend),
/* harmony export */   find: () => (/* reexport safe */ _modules_core_selector_js__WEBPACK_IMPORTED_MODULE_46__["default"]),
/* harmony export */   getClass: () => (/* reexport safe */ _utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.getClass),
/* harmony export */   getEventTarget: () => (/* reexport safe */ _modules_core_event_js__WEBPACK_IMPORTED_MODULE_47__.getEventTarget),
/* harmony export */   getEvents: () => (/* reexport safe */ _modules_core_event_js__WEBPACK_IMPORTED_MODULE_47__.getEvents),
/* harmony export */   getWindow: () => (/* reexport safe */ _utils_window_js__WEBPACK_IMPORTED_MODULE_48__.getWindow),
/* harmony export */   makeInstance: () => (/* reexport safe */ _utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.makeInstance),
/* harmony export */   makeMorphable: () => (/* reexport safe */ _animation_Morphable_js__WEBPACK_IMPORTED_MODULE_24__.makeMorphable),
/* harmony export */   mockAdopt: () => (/* reexport safe */ _utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.mockAdopt),
/* harmony export */   namespaces: () => (/* reexport module object */ _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_43__),
/* harmony export */   nodeOrNew: () => (/* reexport safe */ _utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.nodeOrNew),
/* harmony export */   off: () => (/* reexport safe */ _modules_core_event_js__WEBPACK_IMPORTED_MODULE_47__.off),
/* harmony export */   on: () => (/* reexport safe */ _modules_core_event_js__WEBPACK_IMPORTED_MODULE_47__.on),
/* harmony export */   parser: () => (/* reexport safe */ _modules_core_parser_js__WEBPACK_IMPORTED_MODULE_45__["default"]),
/* harmony export */   regex: () => (/* reexport module object */ _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_44__),
/* harmony export */   register: () => (/* reexport safe */ _utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.register),
/* harmony export */   registerMorphableType: () => (/* reexport safe */ _animation_Morphable_js__WEBPACK_IMPORTED_MODULE_24__.registerMorphableType),
/* harmony export */   registerWindow: () => (/* reexport safe */ _utils_window_js__WEBPACK_IMPORTED_MODULE_48__.registerWindow),
/* harmony export */   restoreWindow: () => (/* reexport safe */ _utils_window_js__WEBPACK_IMPORTED_MODULE_48__.restoreWindow),
/* harmony export */   root: () => (/* reexport safe */ _utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.root),
/* harmony export */   saveWindow: () => (/* reexport safe */ _utils_window_js__WEBPACK_IMPORTED_MODULE_48__.saveWindow),
/* harmony export */   utils: () => (/* reexport module object */ _utils_utils_js__WEBPACK_IMPORTED_MODULE_42__),
/* harmony export */   windowEvents: () => (/* reexport safe */ _modules_core_event_js__WEBPACK_IMPORTED_MODULE_47__.windowEvents),
/* harmony export */   withWindow: () => (/* reexport safe */ _utils_window_js__WEBPACK_IMPORTED_MODULE_48__.withWindow),
/* harmony export */   wrapWithAttrCheck: () => (/* reexport safe */ _utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.wrapWithAttrCheck)
/* harmony export */ });
/* harmony import */ var _modules_optional_arrange_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/optional/arrange.js */ "./node_modules/@svgdotjs/svg.js/src/modules/optional/arrange.js");
/* harmony import */ var _modules_optional_class_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/optional/class.js */ "./node_modules/@svgdotjs/svg.js/src/modules/optional/class.js");
/* harmony import */ var _modules_optional_css_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/optional/css.js */ "./node_modules/@svgdotjs/svg.js/src/modules/optional/css.js");
/* harmony import */ var _modules_optional_data_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/optional/data.js */ "./node_modules/@svgdotjs/svg.js/src/modules/optional/data.js");
/* harmony import */ var _modules_optional_memory_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/optional/memory.js */ "./node_modules/@svgdotjs/svg.js/src/modules/optional/memory.js");
/* harmony import */ var _modules_optional_sugar_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/optional/sugar.js */ "./node_modules/@svgdotjs/svg.js/src/modules/optional/sugar.js");
/* harmony import */ var _modules_optional_transform_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/optional/transform.js */ "./node_modules/@svgdotjs/svg.js/src/modules/optional/transform.js");
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _types_Box_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./types/Box.js */ "./node_modules/@svgdotjs/svg.js/src/types/Box.js");
/* harmony import */ var _types_Color_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./types/Color.js */ "./node_modules/@svgdotjs/svg.js/src/types/Color.js");
/* harmony import */ var _elements_Container_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./elements/Container.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Container.js");
/* harmony import */ var _elements_Defs_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./elements/Defs.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Defs.js");
/* harmony import */ var _elements_Dom_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./elements/Dom.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Dom.js");
/* harmony import */ var _elements_Element_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./elements/Element.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Element.js");
/* harmony import */ var _elements_Ellipse_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./elements/Ellipse.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Ellipse.js");
/* harmony import */ var _types_EventTarget_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./types/EventTarget.js */ "./node_modules/@svgdotjs/svg.js/src/types/EventTarget.js");
/* harmony import */ var _elements_Fragment_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./elements/Fragment.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Fragment.js");
/* harmony import */ var _elements_Gradient_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./elements/Gradient.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Gradient.js");
/* harmony import */ var _elements_Image_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./elements/Image.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Image.js");
/* harmony import */ var _elements_Line_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./elements/Line.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Line.js");
/* harmony import */ var _types_List_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./types/List.js */ "./node_modules/@svgdotjs/svg.js/src/types/List.js");
/* harmony import */ var _elements_Marker_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./elements/Marker.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Marker.js");
/* harmony import */ var _types_Matrix_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./types/Matrix.js */ "./node_modules/@svgdotjs/svg.js/src/types/Matrix.js");
/* harmony import */ var _animation_Morphable_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./animation/Morphable.js */ "./node_modules/@svgdotjs/svg.js/src/animation/Morphable.js");
/* harmony import */ var _elements_Path_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./elements/Path.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Path.js");
/* harmony import */ var _types_PathArray_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./types/PathArray.js */ "./node_modules/@svgdotjs/svg.js/src/types/PathArray.js");
/* harmony import */ var _elements_Pattern_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./elements/Pattern.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Pattern.js");
/* harmony import */ var _types_PointArray_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./types/PointArray.js */ "./node_modules/@svgdotjs/svg.js/src/types/PointArray.js");
/* harmony import */ var _types_Point_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./types/Point.js */ "./node_modules/@svgdotjs/svg.js/src/types/Point.js");
/* harmony import */ var _elements_Polygon_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./elements/Polygon.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Polygon.js");
/* harmony import */ var _elements_Polyline_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./elements/Polyline.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Polyline.js");
/* harmony import */ var _elements_Rect_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./elements/Rect.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Rect.js");
/* harmony import */ var _animation_Runner_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./animation/Runner.js */ "./node_modules/@svgdotjs/svg.js/src/animation/Runner.js");
/* harmony import */ var _types_SVGArray_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./types/SVGArray.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGArray.js");
/* harmony import */ var _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./types/SVGNumber.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js");
/* harmony import */ var _elements_Shape_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./elements/Shape.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Shape.js");
/* harmony import */ var _elements_Svg_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./elements/Svg.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Svg.js");
/* harmony import */ var _elements_Symbol_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./elements/Symbol.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Symbol.js");
/* harmony import */ var _elements_Text_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./elements/Text.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Text.js");
/* harmony import */ var _elements_Tspan_js__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./elements/Tspan.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Tspan.js");
/* harmony import */ var _modules_core_defaults_js__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./modules/core/defaults.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/defaults.js");
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./utils/utils.js */ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js");
/* harmony import */ var _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./modules/core/namespaces.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/namespaces.js");
/* harmony import */ var _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./modules/core/regex.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js");
/* harmony import */ var _modules_core_parser_js__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./modules/core/parser.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/parser.js");
/* harmony import */ var _modules_core_selector_js__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./modules/core/selector.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/selector.js");
/* harmony import */ var _modules_core_event_js__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./modules/core/event.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/event.js");
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");
/* harmony import */ var _animation_Animator_js__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./animation/Animator.js */ "./node_modules/@svgdotjs/svg.js/src/animation/Animator.js");
/* harmony import */ var _animation_Controller_js__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./animation/Controller.js */ "./node_modules/@svgdotjs/svg.js/src/animation/Controller.js");
/* harmony import */ var _animation_Queue_js__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./animation/Queue.js */ "./node_modules/@svgdotjs/svg.js/src/animation/Queue.js");
/* harmony import */ var _animation_Timeline_js__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./animation/Timeline.js */ "./node_modules/@svgdotjs/svg.js/src/animation/Timeline.js");
/* harmony import */ var _elements_Circle_js__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./elements/Circle.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Circle.js");
/* harmony import */ var _elements_ClipPath_js__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./elements/ClipPath.js */ "./node_modules/@svgdotjs/svg.js/src/elements/ClipPath.js");
/* harmony import */ var _elements_ForeignObject_js__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./elements/ForeignObject.js */ "./node_modules/@svgdotjs/svg.js/src/elements/ForeignObject.js");
/* harmony import */ var _elements_G_js__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./elements/G.js */ "./node_modules/@svgdotjs/svg.js/src/elements/G.js");
/* harmony import */ var _elements_A_js__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./elements/A.js */ "./node_modules/@svgdotjs/svg.js/src/elements/A.js");
/* harmony import */ var _elements_Mask_js__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./elements/Mask.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Mask.js");
/* harmony import */ var _elements_Stop_js__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./elements/Stop.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Stop.js");
/* harmony import */ var _elements_Style_js__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./elements/Style.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Style.js");
/* harmony import */ var _elements_TextPath_js__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./elements/TextPath.js */ "./node_modules/@svgdotjs/svg.js/src/elements/TextPath.js");
/* harmony import */ var _elements_Use_js__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./elements/Use.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Use.js");
/* Optional Modules */


















































const SVG = _utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.makeInstance






/* Animation Modules */






/* Types */











/* Elements */































;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.extend)([_elements_Svg_js__WEBPACK_IMPORTED_MODULE_37__["default"], _elements_Symbol_js__WEBPACK_IMPORTED_MODULE_38__["default"], _elements_Image_js__WEBPACK_IMPORTED_MODULE_19__["default"], _elements_Pattern_js__WEBPACK_IMPORTED_MODULE_27__["default"], _elements_Marker_js__WEBPACK_IMPORTED_MODULE_22__["default"]], (0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_8__.getMethodsFor)('viewbox'))

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.extend)([_elements_Line_js__WEBPACK_IMPORTED_MODULE_20__["default"], _elements_Polyline_js__WEBPACK_IMPORTED_MODULE_31__["default"], _elements_Polygon_js__WEBPACK_IMPORTED_MODULE_30__["default"], _elements_Path_js__WEBPACK_IMPORTED_MODULE_25__["default"]], (0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_8__.getMethodsFor)('marker'))

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.extend)(_elements_Text_js__WEBPACK_IMPORTED_MODULE_39__["default"], (0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_8__.getMethodsFor)('Text'))
;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.extend)(_elements_Path_js__WEBPACK_IMPORTED_MODULE_25__["default"], (0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_8__.getMethodsFor)('Path'))

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.extend)(_elements_Defs_js__WEBPACK_IMPORTED_MODULE_12__["default"], (0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_8__.getMethodsFor)('Defs'))

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.extend)([_elements_Text_js__WEBPACK_IMPORTED_MODULE_39__["default"], _elements_Tspan_js__WEBPACK_IMPORTED_MODULE_40__["default"]], (0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_8__.getMethodsFor)('Tspan'))

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.extend)([_elements_Rect_js__WEBPACK_IMPORTED_MODULE_32__["default"], _elements_Ellipse_js__WEBPACK_IMPORTED_MODULE_15__["default"], _elements_Gradient_js__WEBPACK_IMPORTED_MODULE_18__["default"], _animation_Runner_js__WEBPACK_IMPORTED_MODULE_33__["default"]], (0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_8__.getMethodsFor)('radius'))

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.extend)(_types_EventTarget_js__WEBPACK_IMPORTED_MODULE_16__["default"], (0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_8__.getMethodsFor)('EventTarget'))
;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.extend)(_elements_Dom_js__WEBPACK_IMPORTED_MODULE_13__["default"], (0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_8__.getMethodsFor)('Dom'))
;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.extend)(_elements_Element_js__WEBPACK_IMPORTED_MODULE_14__["default"], (0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_8__.getMethodsFor)('Element'))
;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.extend)(_elements_Shape_js__WEBPACK_IMPORTED_MODULE_36__["default"], (0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_8__.getMethodsFor)('Shape'))
;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.extend)([_elements_Container_js__WEBPACK_IMPORTED_MODULE_11__["default"], _elements_Fragment_js__WEBPACK_IMPORTED_MODULE_17__["default"]], (0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_8__.getMethodsFor)('Container'))
;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.extend)(_elements_Gradient_js__WEBPACK_IMPORTED_MODULE_18__["default"], (0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_8__.getMethodsFor)('Gradient'))

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_7__.extend)(_animation_Runner_js__WEBPACK_IMPORTED_MODULE_33__["default"], (0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_8__.getMethodsFor)('Runner'))

_types_List_js__WEBPACK_IMPORTED_MODULE_21__["default"].extend((0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_8__.getMethodNames)())

;(0,_animation_Morphable_js__WEBPACK_IMPORTED_MODULE_24__.registerMorphableType)([
  _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_35__["default"],
  _types_Color_js__WEBPACK_IMPORTED_MODULE_10__["default"],
  _types_Box_js__WEBPACK_IMPORTED_MODULE_9__["default"],
  _types_Matrix_js__WEBPACK_IMPORTED_MODULE_23__["default"],
  _types_SVGArray_js__WEBPACK_IMPORTED_MODULE_34__["default"],
  _types_PointArray_js__WEBPACK_IMPORTED_MODULE_28__["default"],
  _types_PathArray_js__WEBPACK_IMPORTED_MODULE_26__["default"],
  _types_Point_js__WEBPACK_IMPORTED_MODULE_29__["default"]
])

;(0,_animation_Morphable_js__WEBPACK_IMPORTED_MODULE_24__.makeMorphable)()


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/core/attr.js":
/*!****************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/core/attr.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ attr),
/* harmony export */   registerAttrHook: () => (/* binding */ registerAttrHook)
/* harmony export */ });
/* harmony import */ var _defaults_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defaults.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/defaults.js");
/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./regex.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js");
/* harmony import */ var _types_Color_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types/Color.js */ "./node_modules/@svgdotjs/svg.js/src/types/Color.js");
/* harmony import */ var _types_SVGArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../types/SVGArray.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGArray.js");
/* harmony import */ var _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../types/SVGNumber.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js");






const colorAttributes = new Set([
  'fill',
  'stroke',
  'color',
  'bgcolor',
  'stop-color',
  'flood-color',
  'lighting-color'
])

const hooks = []
function registerAttrHook(fn) {
  hooks.push(fn)
}

// Set svg element attribute
function attr(attr, val, ns) {
  // act as full getter
  if (attr == null) {
    // get an object of attributes
    attr = {}
    val = this.node.attributes

    for (const node of val) {
      attr[node.nodeName] = _regex_js__WEBPACK_IMPORTED_MODULE_1__.isNumber.test(node.nodeValue)
        ? parseFloat(node.nodeValue)
        : node.nodeValue
    }

    return attr
  } else if (attr instanceof Array) {
    // loop through array and get all values
    return attr.reduce((last, curr) => {
      last[curr] = this.attr(curr)
      return last
    }, {})
  } else if (typeof attr === 'object' && attr.constructor === Object) {
    // apply every attribute individually if an object is passed
    for (val in attr) this.attr(val, attr[val])
  } else if (val === null) {
    // remove value
    this.node.removeAttribute(attr)
  } else if (val == null) {
    // act as a getter if the first and only argument is not an object
    val = this.node.getAttribute(attr)
    return val == null
      ? _defaults_js__WEBPACK_IMPORTED_MODULE_0__.attrs[attr]
      : _regex_js__WEBPACK_IMPORTED_MODULE_1__.isNumber.test(val)
        ? parseFloat(val)
        : val
  } else {
    // Loop through hooks and execute them to convert value
    val = hooks.reduce((_val, hook) => {
      return hook(attr, _val, this)
    }, val)

    // ensure correct numeric values (also accepts NaN and Infinity)
    if (typeof val === 'number') {
      val = new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_4__["default"](val)
    } else if (colorAttributes.has(attr) && _types_Color_js__WEBPACK_IMPORTED_MODULE_2__["default"].isColor(val)) {
      // ensure full hex color
      val = new _types_Color_js__WEBPACK_IMPORTED_MODULE_2__["default"](val)
    } else if (val.constructor === Array) {
      // Check for plain arrays and parse array values
      val = new _types_SVGArray_js__WEBPACK_IMPORTED_MODULE_3__["default"](val)
    }

    // if the passed attribute is leading...
    if (attr === 'leading') {
      // ... call the leading method instead
      if (this.leading) {
        this.leading(val)
      }
    } else {
      // set given attribute on node
      typeof ns === 'string'
        ? this.node.setAttributeNS(ns, attr, val.toString())
        : this.node.setAttribute(attr, val.toString())
    }

    // rebuild if required
    if (this.rebuild && (attr === 'font-size' || attr === 'x')) {
      this.rebuild()
    }
  }

  return this
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/core/circled.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/core/circled.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cx: () => (/* binding */ cx),
/* harmony export */   cy: () => (/* binding */ cy),
/* harmony export */   height: () => (/* binding */ height),
/* harmony export */   rx: () => (/* binding */ rx),
/* harmony export */   ry: () => (/* binding */ ry),
/* harmony export */   width: () => (/* binding */ width),
/* harmony export */   x: () => (/* binding */ x),
/* harmony export */   y: () => (/* binding */ y)
/* harmony export */ });
/* harmony import */ var _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types/SVGNumber.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js");


// Radius x value
function rx(rx) {
  return this.attr('rx', rx)
}

// Radius y value
function ry(ry) {
  return this.attr('ry', ry)
}

// Move over x-axis
function x(x) {
  return x == null ? this.cx() - this.rx() : this.cx(x + this.rx())
}

// Move over y-axis
function y(y) {
  return y == null ? this.cy() - this.ry() : this.cy(y + this.ry())
}

// Move by center over x-axis
function cx(x) {
  return this.attr('cx', x)
}

// Move by center over y-axis
function cy(y) {
  return this.attr('cy', y)
}

// Set width of element
function width(width) {
  return width == null ? this.rx() * 2 : this.rx(new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](width).divide(2))
}

// Set height of element
function height(height) {
  return height == null
    ? this.ry() * 2
    : this.ry(new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](height).divide(2))
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/core/containerGeometry.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/core/containerGeometry.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dmove: () => (/* binding */ dmove),
/* harmony export */   dx: () => (/* binding */ dx),
/* harmony export */   dy: () => (/* binding */ dy),
/* harmony export */   height: () => (/* binding */ height),
/* harmony export */   move: () => (/* binding */ move),
/* harmony export */   size: () => (/* binding */ size),
/* harmony export */   width: () => (/* binding */ width),
/* harmony export */   x: () => (/* binding */ x),
/* harmony export */   y: () => (/* binding */ y)
/* harmony export */ });
/* harmony import */ var _types_Matrix_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types/Matrix.js */ "./node_modules/@svgdotjs/svg.js/src/types/Matrix.js");
/* harmony import */ var _types_Point_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/Point.js */ "./node_modules/@svgdotjs/svg.js/src/types/Point.js");
/* harmony import */ var _types_Box_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../types/Box.js */ "./node_modules/@svgdotjs/svg.js/src/types/Box.js");
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/utils.js */ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js");
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");






function dmove(dx, dy) {
  this.children().forEach((child) => {
    let bbox

    // We have to wrap this for elements that dont have a bbox
    // e.g. title and other descriptive elements
    try {
      // Get the childs bbox
      // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1905039
      // Because bbox for nested svgs returns the contents bbox in the coordinate space of the svg itself (weird!), we cant use bbox for svgs
      // Therefore we have to use getBoundingClientRect. But THAT is broken (as explained in the bug).
      // Funnily enough the broken behavior would work for us but that breaks it in chrome
      // So we have to replicate the broken behavior of FF by just reading the attributes of the svg itself
      bbox =
        child.node instanceof (0,_utils_window_js__WEBPACK_IMPORTED_MODULE_4__.getWindow)().SVGSVGElement
          ? new _types_Box_js__WEBPACK_IMPORTED_MODULE_2__["default"](child.attr(['x', 'y', 'width', 'height']))
          : child.bbox()
    } catch (e) {
      return
    }

    // Get childs matrix
    const m = new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_0__["default"](child)
    // Translate childs matrix by amount and
    // transform it back into parents space
    const matrix = m.translate(dx, dy).transform(m.inverse())
    // Calculate new x and y from old box
    const p = new _types_Point_js__WEBPACK_IMPORTED_MODULE_1__["default"](bbox.x, bbox.y).transform(matrix)
    // Move element
    child.move(p.x, p.y)
  })

  return this
}

function dx(dx) {
  return this.dmove(dx, 0)
}

function dy(dy) {
  return this.dmove(0, dy)
}

function height(height, box = this.bbox()) {
  if (height == null) return box.height
  return this.size(box.width, height, box)
}

function move(x = 0, y = 0, box = this.bbox()) {
  const dx = x - box.x
  const dy = y - box.y

  return this.dmove(dx, dy)
}

function size(width, height, box = this.bbox()) {
  const p = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_3__.proportionalSize)(this, width, height, box)
  const scaleX = p.width / box.width
  const scaleY = p.height / box.height

  this.children().forEach((child) => {
    const o = new _types_Point_js__WEBPACK_IMPORTED_MODULE_1__["default"](box).transform(new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_0__["default"](child).inverse())
    child.scale(scaleX, scaleY, o.x, o.y)
  })

  return this
}

function width(width, box = this.bbox()) {
  if (width == null) return box.width
  return this.size(width, box.height, box)
}

function x(x, box = this.bbox()) {
  if (x == null) return box.x
  return this.move(x, box.y, box)
}

function y(y, box = this.bbox()) {
  if (y == null) return box.y
  return this.move(box.x, y, box)
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/core/defaults.js":
/*!********************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/core/defaults.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attrs: () => (/* binding */ attrs),
/* harmony export */   noop: () => (/* binding */ noop),
/* harmony export */   timeline: () => (/* binding */ timeline)
/* harmony export */ });
function noop() {}

// Default animation values
const timeline = {
  duration: 400,
  ease: '>',
  delay: 0
}

// Default attribute values
const attrs = {
  // fill and stroke
  'fill-opacity': 1,
  'stroke-opacity': 1,
  'stroke-width': 0,
  'stroke-linejoin': 'miter',
  'stroke-linecap': 'butt',
  fill: '#000000',
  stroke: '#000000',
  opacity: 1,

  // position
  x: 0,
  y: 0,
  cx: 0,
  cy: 0,

  // size
  width: 0,
  height: 0,

  // radius
  r: 0,
  rx: 0,
  ry: 0,

  // gradient
  offset: 0,
  'stop-opacity': 1,
  'stop-color': '#000000',

  // text
  'text-anchor': 'start'
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/core/event.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/core/event.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   clearEvents: () => (/* binding */ clearEvents),
/* harmony export */   dispatch: () => (/* binding */ dispatch),
/* harmony export */   getEventTarget: () => (/* binding */ getEventTarget),
/* harmony export */   getEvents: () => (/* binding */ getEvents),
/* harmony export */   off: () => (/* binding */ off),
/* harmony export */   on: () => (/* binding */ on),
/* harmony export */   windowEvents: () => (/* binding */ windowEvents)
/* harmony export */ });
/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js");
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");




let listenerId = 0
const windowEvents = {}

function getEvents(instance) {
  let n = instance.getEventHolder()

  // We dont want to save events in global space
  if (n === _utils_window_js__WEBPACK_IMPORTED_MODULE_2__.globals.window) n = windowEvents
  if (!n.events) n.events = {}
  return n.events
}

function getEventTarget(instance) {
  return instance.getEventTarget()
}

function clearEvents(instance) {
  let n = instance.getEventHolder()
  if (n === _utils_window_js__WEBPACK_IMPORTED_MODULE_2__.globals.window) n = windowEvents
  if (n.events) n.events = {}
}

// Add event binder in the SVG namespace
function on(node, events, listener, binding, options) {
  const l = listener.bind(binding || node)
  const instance = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.makeInstance)(node)
  const bag = getEvents(instance)
  const n = getEventTarget(instance)

  // events can be an array of events or a string of events
  events = Array.isArray(events) ? events : events.split(_regex_js__WEBPACK_IMPORTED_MODULE_0__.delimiter)

  // add id to listener
  if (!listener._svgjsListenerId) {
    listener._svgjsListenerId = ++listenerId
  }

  events.forEach(function (event) {
    const ev = event.split('.')[0]
    const ns = event.split('.')[1] || '*'

    // ensure valid object
    bag[ev] = bag[ev] || {}
    bag[ev][ns] = bag[ev][ns] || {}

    // reference listener
    bag[ev][ns][listener._svgjsListenerId] = l

    // add listener
    n.addEventListener(ev, l, options || false)
  })
}

// Add event unbinder in the SVG namespace
function off(node, events, listener, options) {
  const instance = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.makeInstance)(node)
  const bag = getEvents(instance)
  const n = getEventTarget(instance)

  // listener can be a function or a number
  if (typeof listener === 'function') {
    listener = listener._svgjsListenerId
    if (!listener) return
  }

  // events can be an array of events or a string or undefined
  events = Array.isArray(events) ? events : (events || '').split(_regex_js__WEBPACK_IMPORTED_MODULE_0__.delimiter)

  events.forEach(function (event) {
    const ev = event && event.split('.')[0]
    const ns = event && event.split('.')[1]
    let namespace, l

    if (listener) {
      // remove listener reference
      if (bag[ev] && bag[ev][ns || '*']) {
        // removeListener
        n.removeEventListener(
          ev,
          bag[ev][ns || '*'][listener],
          options || false
        )

        delete bag[ev][ns || '*'][listener]
      }
    } else if (ev && ns) {
      // remove all listeners for a namespaced event
      if (bag[ev] && bag[ev][ns]) {
        for (l in bag[ev][ns]) {
          off(n, [ev, ns].join('.'), l)
        }

        delete bag[ev][ns]
      }
    } else if (ns) {
      // remove all listeners for a specific namespace
      for (event in bag) {
        for (namespace in bag[event]) {
          if (ns === namespace) {
            off(n, [event, ns].join('.'))
          }
        }
      }
    } else if (ev) {
      // remove all listeners for the event
      if (bag[ev]) {
        for (namespace in bag[ev]) {
          off(n, [ev, namespace].join('.'))
        }

        delete bag[ev]
      }
    } else {
      // remove all listeners on a given node
      for (event in bag) {
        off(n, event)
      }

      clearEvents(instance)
    }
  })
}

function dispatch(node, event, data, options) {
  const n = getEventTarget(node)

  // Dispatch event
  if (event instanceof _utils_window_js__WEBPACK_IMPORTED_MODULE_2__.globals.window.Event) {
    n.dispatchEvent(event)
  } else {
    event = new _utils_window_js__WEBPACK_IMPORTED_MODULE_2__.globals.window.CustomEvent(event, {
      detail: data,
      cancelable: true,
      ...options
    })
    n.dispatchEvent(event)
  }
  return event
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/core/gradiented.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/core/gradiented.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   from: () => (/* binding */ from),
/* harmony export */   to: () => (/* binding */ to)
/* harmony export */ });
/* harmony import */ var _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types/SVGNumber.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js");


function from(x, y) {
  return (this._element || this).type === 'radialGradient'
    ? this.attr({ fx: new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](x), fy: new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](y) })
    : this.attr({ x1: new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](x), y1: new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](y) })
}

function to(x, y) {
  return (this._element || this).type === 'radialGradient'
    ? this.attr({ cx: new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](x), cy: new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](y) })
    : this.attr({ x2: new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](x), y2: new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](y) })
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/core/namespaces.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/core/namespaces.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   html: () => (/* binding */ html),
/* harmony export */   svg: () => (/* binding */ svg),
/* harmony export */   xlink: () => (/* binding */ xlink),
/* harmony export */   xmlns: () => (/* binding */ xmlns)
/* harmony export */ });
// Default namespaces
const svg = 'http://www.w3.org/2000/svg'
const html = 'http://www.w3.org/1999/xhtml'
const xmlns = 'http://www.w3.org/2000/xmlns/'
const xlink = 'http://www.w3.org/1999/xlink'


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/core/parser.js":
/*!******************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/core/parser.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ parser)
/* harmony export */ });
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");



function parser() {
  // Reuse cached element if possible
  if (!parser.nodes) {
    const svg = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.makeInstance)().size(2, 0)
    svg.node.style.cssText = [
      'opacity: 0',
      'position: absolute',
      'left: -100%',
      'top: -100%',
      'overflow: hidden'
    ].join(';')

    svg.attr('focusable', 'false')
    svg.attr('aria-hidden', 'true')

    const path = svg.path().node

    parser.nodes = { svg, path }
  }

  if (!parser.nodes.svg.node.parentNode) {
    const b = _utils_window_js__WEBPACK_IMPORTED_MODULE_0__.globals.document.body || _utils_window_js__WEBPACK_IMPORTED_MODULE_0__.globals.document.documentElement
    parser.nodes.svg.addTo(b)
  }

  return parser.nodes
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/core/pointed.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/core/pointed.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MorphArray: () => (/* binding */ MorphArray),
/* harmony export */   height: () => (/* binding */ height),
/* harmony export */   width: () => (/* binding */ width),
/* harmony export */   x: () => (/* binding */ x),
/* harmony export */   y: () => (/* binding */ y)
/* harmony export */ });
/* harmony import */ var _types_PointArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../types/PointArray.js */ "./node_modules/@svgdotjs/svg.js/src/types/PointArray.js");


const MorphArray = _types_PointArray_js__WEBPACK_IMPORTED_MODULE_0__["default"]

// Move by left top corner over x-axis
function x(x) {
  return x == null ? this.bbox().x : this.move(x, this.bbox().y)
}

// Move by left top corner over y-axis
function y(y) {
  return y == null ? this.bbox().y : this.move(this.bbox().x, y)
}

// Set width of element
function width(width) {
  const b = this.bbox()
  return width == null ? b.width : this.size(width, b.height)
}

// Set height of element
function height(height) {
  const b = this.bbox()
  return height == null ? b.height : this.size(b.width, height)
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/core/poly.js":
/*!****************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/core/poly.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   array: () => (/* binding */ array),
/* harmony export */   clear: () => (/* binding */ clear),
/* harmony export */   move: () => (/* binding */ move),
/* harmony export */   plot: () => (/* binding */ plot),
/* harmony export */   size: () => (/* binding */ size)
/* harmony export */ });
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils.js */ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js");
/* harmony import */ var _types_PointArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/PointArray.js */ "./node_modules/@svgdotjs/svg.js/src/types/PointArray.js");



// Get array
function array() {
  return this._array || (this._array = new _types_PointArray_js__WEBPACK_IMPORTED_MODULE_1__["default"](this.attr('points')))
}

// Clear array cache
function clear() {
  delete this._array
  return this
}

// Move by left top corner
function move(x, y) {
  return this.attr('points', this.array().move(x, y))
}

// Plot new path
function plot(p) {
  return p == null
    ? this.array()
    : this.clear().attr(
        'points',
        typeof p === 'string' ? p : (this._array = new _types_PointArray_js__WEBPACK_IMPORTED_MODULE_1__["default"](p))
      )
}

// Set element size to given width and height
function size(width, height) {
  const p = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.proportionalSize)(this, width, height)
  return this.attr('points', this.array().size(p.width, p.height))
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   delimiter: () => (/* binding */ delimiter),
/* harmony export */   hex: () => (/* binding */ hex),
/* harmony export */   isBlank: () => (/* binding */ isBlank),
/* harmony export */   isHex: () => (/* binding */ isHex),
/* harmony export */   isImage: () => (/* binding */ isImage),
/* harmony export */   isNumber: () => (/* binding */ isNumber),
/* harmony export */   isPathLetter: () => (/* binding */ isPathLetter),
/* harmony export */   isRgb: () => (/* binding */ isRgb),
/* harmony export */   numberAndUnit: () => (/* binding */ numberAndUnit),
/* harmony export */   reference: () => (/* binding */ reference),
/* harmony export */   rgb: () => (/* binding */ rgb),
/* harmony export */   transforms: () => (/* binding */ transforms),
/* harmony export */   whitespace: () => (/* binding */ whitespace)
/* harmony export */ });
// Parse unit value
const numberAndUnit =
  /^([+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?)([a-z%]*)$/i

// Parse hex value
const hex = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i

// Parse rgb value
const rgb = /rgb\((\d+),(\d+),(\d+)\)/

// Parse reference id
const reference = /(#[a-z_][a-z0-9\-_]*)/i

// splits a transformation chain
const transforms = /\)\s*,?\s*/

// Whitespace
const whitespace = /\s/g

// Test hex value
const isHex = /^#[a-f0-9]{3}$|^#[a-f0-9]{6}$/i

// Test rgb value
const isRgb = /^rgb\(/

// Test for blank string
const isBlank = /^(\s+)?$/

// Test for numeric string
const isNumber = /^[+-]?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i

// Test for image url
const isImage = /\.(jpg|jpeg|png|gif|svg)(\?[^=]+.*)?/i

// split at whitespace and comma
const delimiter = /[\s,]+/

// Test for path letter
const isPathLetter = /[MLHVCSQTAZ]/i


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/core/selector.js":
/*!********************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/core/selector.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ baseFind),
/* harmony export */   find: () => (/* binding */ find),
/* harmony export */   findOne: () => (/* binding */ findOne)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/utils.js */ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js");
/* harmony import */ var _types_List_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../types/List.js */ "./node_modules/@svgdotjs/svg.js/src/types/List.js");





function baseFind(query, parent) {
  return new _types_List_js__WEBPACK_IMPORTED_MODULE_3__["default"](
    (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_2__.map)((parent || _utils_window_js__WEBPACK_IMPORTED_MODULE_1__.globals.document).querySelectorAll(query), function (node) {
      return (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.adopt)(node)
    })
  )
}

// Scoped find method
function find(query) {
  return baseFind(query, this.node)
}

function findOne(query) {
  return (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.adopt)(this.node.querySelector(query))
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/core/textable.js":
/*!********************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/core/textable.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   amove: () => (/* binding */ amove),
/* harmony export */   ax: () => (/* binding */ ax),
/* harmony export */   ay: () => (/* binding */ ay),
/* harmony export */   build: () => (/* binding */ build),
/* harmony export */   center: () => (/* binding */ center),
/* harmony export */   cx: () => (/* binding */ cx),
/* harmony export */   cy: () => (/* binding */ cy),
/* harmony export */   length: () => (/* binding */ length),
/* harmony export */   move: () => (/* binding */ move),
/* harmony export */   plain: () => (/* binding */ plain),
/* harmony export */   x: () => (/* binding */ x),
/* harmony export */   y: () => (/* binding */ y)
/* harmony export */ });
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");


// Create plain text node
function plain(text) {
  // clear if build mode is disabled
  if (this._build === false) {
    this.clear()
  }

  // create text node
  this.node.appendChild(_utils_window_js__WEBPACK_IMPORTED_MODULE_0__.globals.document.createTextNode(text))

  return this
}

// Get length of text element
function length() {
  return this.node.getComputedTextLength()
}

// Move over x-axis
// Text is moved by its bounding box
// text-anchor does NOT matter
function x(x, box = this.bbox()) {
  if (x == null) {
    return box.x
  }

  return this.attr('x', this.attr('x') + x - box.x)
}

// Move over y-axis
function y(y, box = this.bbox()) {
  if (y == null) {
    return box.y
  }

  return this.attr('y', this.attr('y') + y - box.y)
}

function move(x, y, box = this.bbox()) {
  return this.x(x, box).y(y, box)
}

// Move center over x-axis
function cx(x, box = this.bbox()) {
  if (x == null) {
    return box.cx
  }

  return this.attr('x', this.attr('x') + x - box.cx)
}

// Move center over y-axis
function cy(y, box = this.bbox()) {
  if (y == null) {
    return box.cy
  }

  return this.attr('y', this.attr('y') + y - box.cy)
}

function center(x, y, box = this.bbox()) {
  return this.cx(x, box).cy(y, box)
}

function ax(x) {
  return this.attr('x', x)
}

function ay(y) {
  return this.attr('y', y)
}

function amove(x, y) {
  return this.ax(x).ay(y)
}

// Enable / disable build mode
function build(build) {
  this._build = !!build
  return this
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/optional/arrange.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/optional/arrange.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   after: () => (/* binding */ after),
/* harmony export */   back: () => (/* binding */ back),
/* harmony export */   backward: () => (/* binding */ backward),
/* harmony export */   before: () => (/* binding */ before),
/* harmony export */   forward: () => (/* binding */ forward),
/* harmony export */   front: () => (/* binding */ front),
/* harmony export */   insertAfter: () => (/* binding */ insertAfter),
/* harmony export */   insertBefore: () => (/* binding */ insertBefore),
/* harmony export */   next: () => (/* binding */ next),
/* harmony export */   position: () => (/* binding */ position),
/* harmony export */   prev: () => (/* binding */ prev),
/* harmony export */   siblings: () => (/* binding */ siblings)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");



// Get all siblings, including myself
function siblings() {
  return this.parent().children()
}

// Get the current position siblings
function position() {
  return this.parent().index(this)
}

// Get the next element (will return null if there is none)
function next() {
  return this.siblings()[this.position() + 1]
}

// Get the next element (will return null if there is none)
function prev() {
  return this.siblings()[this.position() - 1]
}

// Send given element one step forward
function forward() {
  const i = this.position()
  const p = this.parent()

  // move node one step forward
  p.add(this.remove(), i + 1)

  return this
}

// Send given element one step backward
function backward() {
  const i = this.position()
  const p = this.parent()

  p.add(this.remove(), i ? i - 1 : 0)

  return this
}

// Send given element all the way to the front
function front() {
  const p = this.parent()

  // Move node forward
  p.add(this.remove())

  return this
}

// Send given element all the way to the back
function back() {
  const p = this.parent()

  // Move node back
  p.add(this.remove(), 0)

  return this
}

// Inserts a given element before the targeted element
function before(element) {
  element = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.makeInstance)(element)
  element.remove()

  const i = this.position()

  this.parent().add(element, i)

  return this
}

// Inserts a given element after the targeted element
function after(element) {
  element = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.makeInstance)(element)
  element.remove()

  const i = this.position()

  this.parent().add(element, i + 1)

  return this
}

function insertBefore(element) {
  element = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.makeInstance)(element)
  element.before(this)
  return this
}

function insertAfter(element) {
  element = (0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.makeInstance)(element)
  element.after(this)
  return this
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)('Dom', {
  siblings,
  position,
  next,
  prev,
  forward,
  backward,
  front,
  back,
  before,
  after,
  insertBefore,
  insertAfter
})


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/optional/class.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/optional/class.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addClass: () => (/* binding */ addClass),
/* harmony export */   classes: () => (/* binding */ classes),
/* harmony export */   hasClass: () => (/* binding */ hasClass),
/* harmony export */   removeClass: () => (/* binding */ removeClass),
/* harmony export */   toggleClass: () => (/* binding */ toggleClass)
/* harmony export */ });
/* harmony import */ var _core_regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/regex.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");



// Return array of classes on the node
function classes() {
  const attr = this.attr('class')
  return attr == null ? [] : attr.trim().split(_core_regex_js__WEBPACK_IMPORTED_MODULE_0__.delimiter)
}

// Return true if class exists on the node, false otherwise
function hasClass(name) {
  return this.classes().indexOf(name) !== -1
}

// Add class to the node
function addClass(name) {
  if (!this.hasClass(name)) {
    const array = this.classes()
    array.push(name)
    this.attr('class', array.join(' '))
  }

  return this
}

// Remove class from the node
function removeClass(name) {
  if (this.hasClass(name)) {
    this.attr(
      'class',
      this.classes()
        .filter(function (c) {
          return c !== name
        })
        .join(' ')
    )
  }

  return this
}

// Toggle the presence of a class on the node
function toggleClass(name) {
  return this.hasClass(name) ? this.removeClass(name) : this.addClass(name)
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)('Dom', {
  classes,
  hasClass,
  addClass,
  removeClass,
  toggleClass
})


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/optional/css.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/optional/css.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   css: () => (/* binding */ css),
/* harmony export */   hide: () => (/* binding */ hide),
/* harmony export */   show: () => (/* binding */ show),
/* harmony export */   visible: () => (/* binding */ visible)
/* harmony export */ });
/* harmony import */ var _core_regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/regex.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");



// Dynamic style generator
function css(style, val) {
  const ret = {}
  if (arguments.length === 0) {
    // get full style as object
    this.node.style.cssText
      .split(/\s*;\s*/)
      .filter(function (el) {
        return !!el.length
      })
      .forEach(function (el) {
        const t = el.split(/\s*:\s*/)
        ret[t[0]] = t[1]
      })
    return ret
  }

  if (arguments.length < 2) {
    // get style properties as array
    if (Array.isArray(style)) {
      for (const name of style) {
        const cased = name
        ret[name] = this.node.style.getPropertyValue(cased)
      }
      return ret
    }

    // get style for property
    if (typeof style === 'string') {
      return this.node.style.getPropertyValue(style)
    }

    // set styles in object
    if (typeof style === 'object') {
      for (const name in style) {
        // set empty string if null/undefined/'' was given
        this.node.style.setProperty(
          name,
          style[name] == null || _core_regex_js__WEBPACK_IMPORTED_MODULE_0__.isBlank.test(style[name]) ? '' : style[name]
        )
      }
    }
  }

  // set style for property
  if (arguments.length === 2) {
    this.node.style.setProperty(
      style,
      val == null || _core_regex_js__WEBPACK_IMPORTED_MODULE_0__.isBlank.test(val) ? '' : val
    )
  }

  return this
}

// Show element
function show() {
  return this.css('display', '')
}

// Hide element
function hide() {
  return this.css('display', 'none')
}

// Is element visible?
function visible() {
  return this.css('display') !== 'none'
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_1__.registerMethods)('Dom', {
  css,
  show,
  hide,
  visible
})


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/optional/data.js":
/*!********************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/optional/data.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   data: () => (/* binding */ data)
/* harmony export */ });
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/utils.js */ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js");



// Store data values on svg nodes
function data(a, v, r) {
  if (a == null) {
    // get an object of attributes
    return this.data(
      (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.map)(
        (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.filter)(
          this.node.attributes,
          (el) => el.nodeName.indexOf('data-') === 0
        ),
        (el) => el.nodeName.slice(5)
      )
    )
  } else if (a instanceof Array) {
    const data = {}
    for (const key of a) {
      data[key] = this.data(key)
    }
    return data
  } else if (typeof a === 'object') {
    for (v in a) {
      this.data(v, a[v])
    }
  } else if (arguments.length < 2) {
    try {
      return JSON.parse(this.attr('data-' + a))
    } catch (e) {
      return this.attr('data-' + a)
    }
  } else {
    this.attr(
      'data-' + a,
      v === null
        ? null
        : r === true || typeof v === 'string' || typeof v === 'number'
          ? v
          : JSON.stringify(v)
    )
  }

  return this
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_0__.registerMethods)('Dom', { data })


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/optional/memory.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/optional/memory.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   forget: () => (/* binding */ forget),
/* harmony export */   memory: () => (/* binding */ memory),
/* harmony export */   remember: () => (/* binding */ remember)
/* harmony export */ });
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");


// Remember arbitrary data
function remember(k, v) {
  // remember every item in an object individually
  if (typeof arguments[0] === 'object') {
    for (const key in k) {
      this.remember(key, k[key])
    }
  } else if (arguments.length === 1) {
    // retrieve memory
    return this.memory()[k]
  } else {
    // store memory
    this.memory()[k] = v
  }

  return this
}

// Erase a given memory
function forget() {
  if (arguments.length === 0) {
    this._memory = {}
  } else {
    for (let i = arguments.length - 1; i >= 0; i--) {
      delete this.memory()[arguments[i]]
    }
  }
  return this
}

// This triggers creation of a new hidden class which is not performant
// However, this function is not rarely used so it will not happen frequently
// Return local memory object
function memory() {
  return (this._memory = this._memory || {})
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_0__.registerMethods)('Dom', { remember, forget, memory })


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/optional/sugar.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/optional/sugar.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _types_Color_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../types/Color.js */ "./node_modules/@svgdotjs/svg.js/src/types/Color.js");
/* harmony import */ var _elements_Element_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../elements/Element.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Element.js");
/* harmony import */ var _types_Matrix_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../types/Matrix.js */ "./node_modules/@svgdotjs/svg.js/src/types/Matrix.js");
/* harmony import */ var _types_Point_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../types/Point.js */ "./node_modules/@svgdotjs/svg.js/src/types/Point.js");
/* harmony import */ var _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../types/SVGNumber.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js");







// Define list of available attributes for stroke and fill
const sugar = {
  stroke: [
    'color',
    'width',
    'opacity',
    'linecap',
    'linejoin',
    'miterlimit',
    'dasharray',
    'dashoffset'
  ],
  fill: ['color', 'opacity', 'rule'],
  prefix: function (t, a) {
    return a === 'color' ? t : t + '-' + a
  }
}

// Add sugar for fill and stroke
;['fill', 'stroke'].forEach(function (m) {
  const extension = {}
  let i

  extension[m] = function (o) {
    if (typeof o === 'undefined') {
      return this.attr(m)
    }
    if (
      typeof o === 'string' ||
      o instanceof _types_Color_js__WEBPACK_IMPORTED_MODULE_1__["default"] ||
      _types_Color_js__WEBPACK_IMPORTED_MODULE_1__["default"].isRgb(o) ||
      o instanceof _elements_Element_js__WEBPACK_IMPORTED_MODULE_2__["default"]
    ) {
      this.attr(m, o)
    } else {
      // set all attributes from sugar.fill and sugar.stroke list
      for (i = sugar[m].length - 1; i >= 0; i--) {
        if (o[sugar[m][i]] != null) {
          this.attr(sugar.prefix(m, sugar[m][i]), o[sugar[m][i]])
        }
      }
    }

    return this
  }

  ;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_0__.registerMethods)(['Element', 'Runner'], extension)
})

;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_0__.registerMethods)(['Element', 'Runner'], {
  // Let the user set the matrix directly
  matrix: function (mat, b, c, d, e, f) {
    // Act as a getter
    if (mat == null) {
      return new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_3__["default"](this)
    }

    // Act as a setter, the user can pass a matrix or a set of numbers
    return this.attr('transform', new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_3__["default"](mat, b, c, d, e, f))
  },

  // Map rotation to transform
  rotate: function (angle, cx, cy) {
    return this.transform({ rotate: angle, ox: cx, oy: cy }, true)
  },

  // Map skew to transform
  skew: function (x, y, cx, cy) {
    return arguments.length === 1 || arguments.length === 3
      ? this.transform({ skew: x, ox: y, oy: cx }, true)
      : this.transform({ skew: [x, y], ox: cx, oy: cy }, true)
  },

  shear: function (lam, cx, cy) {
    return this.transform({ shear: lam, ox: cx, oy: cy }, true)
  },

  // Map scale to transform
  scale: function (x, y, cx, cy) {
    return arguments.length === 1 || arguments.length === 3
      ? this.transform({ scale: x, ox: y, oy: cx }, true)
      : this.transform({ scale: [x, y], ox: cx, oy: cy }, true)
  },

  // Map translate to transform
  translate: function (x, y) {
    return this.transform({ translate: [x, y] }, true)
  },

  // Map relative translations to transform
  relative: function (x, y) {
    return this.transform({ relative: [x, y] }, true)
  },

  // Map flip to transform
  flip: function (direction = 'both', origin = 'center') {
    if ('xybothtrue'.indexOf(direction) === -1) {
      origin = direction
      direction = 'both'
    }

    return this.transform({ flip: direction, origin: origin }, true)
  },

  // Opacity
  opacity: function (value) {
    return this.attr('opacity', value)
  }
})

;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_0__.registerMethods)('radius', {
  // Add x and y radius
  radius: function (x, y = x) {
    const type = (this._element || this).type
    return type === 'radialGradient'
      ? this.attr('r', new _types_SVGNumber_js__WEBPACK_IMPORTED_MODULE_5__["default"](x))
      : this.rx(x).ry(y)
  }
})

;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_0__.registerMethods)('Path', {
  // Get path length
  length: function () {
    return this.node.getTotalLength()
  },
  // Get point at length
  pointAt: function (length) {
    return new _types_Point_js__WEBPACK_IMPORTED_MODULE_4__["default"](this.node.getPointAtLength(length))
  }
})

;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_0__.registerMethods)(['Element', 'Runner'], {
  // Set font
  font: function (a, v) {
    if (typeof a === 'object') {
      for (v in a) this.font(v, a[v])
      return this
    }

    return a === 'leading'
      ? this.leading(v)
      : a === 'anchor'
        ? this.attr('text-anchor', v)
        : a === 'size' ||
            a === 'family' ||
            a === 'weight' ||
            a === 'stretch' ||
            a === 'variant' ||
            a === 'style'
          ? this.attr('font-' + a, v)
          : this.attr(a, v)
  }
})

// Add events to elements
const methods = [
  'click',
  'dblclick',
  'mousedown',
  'mouseup',
  'mouseover',
  'mouseout',
  'mousemove',
  'mouseenter',
  'mouseleave',
  'touchstart',
  'touchmove',
  'touchleave',
  'touchend',
  'touchcancel',
  'contextmenu',
  'wheel',
  'pointerdown',
  'pointermove',
  'pointerup',
  'pointerleave',
  'pointercancel'
].reduce(function (last, event) {
  // add event to Element
  const fn = function (f) {
    if (f === null) {
      this.off(event)
    } else {
      this.on(event, f)
    }
    return this
  }

  last[event] = fn
  return last
}, {})

;(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_0__.registerMethods)('Element', methods)


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/modules/optional/transform.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/modules/optional/transform.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   matrixify: () => (/* binding */ matrixify),
/* harmony export */   toParent: () => (/* binding */ toParent),
/* harmony export */   toRoot: () => (/* binding */ toRoot),
/* harmony export */   transform: () => (/* binding */ transform),
/* harmony export */   untransform: () => (/* binding */ untransform)
/* harmony export */ });
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/utils.js */ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js");
/* harmony import */ var _core_regex_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/regex.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _types_Matrix_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../types/Matrix.js */ "./node_modules/@svgdotjs/svg.js/src/types/Matrix.js");





// Reset all transformations
function untransform() {
  return this.attr('transform', null)
}

// merge the whole transformation chain into one matrix and returns it
function matrixify() {
  const matrix = (this.attr('transform') || '')
    // split transformations
    .split(_core_regex_js__WEBPACK_IMPORTED_MODULE_1__.transforms)
    .slice(0, -1)
    .map(function (str) {
      // generate key => value pairs
      const kv = str.trim().split('(')
      return [
        kv[0],
        kv[1].split(_core_regex_js__WEBPACK_IMPORTED_MODULE_1__.delimiter).map(function (str) {
          return parseFloat(str)
        })
      ]
    })
    .reverse()
    // merge every transformation into one matrix
    .reduce(function (matrix, transform) {
      if (transform[0] === 'matrix') {
        return matrix.lmultiply(_types_Matrix_js__WEBPACK_IMPORTED_MODULE_3__["default"].fromArray(transform[1]))
      }
      return matrix[transform[0]].apply(matrix, transform[1])
    }, new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_3__["default"]())

  return matrix
}

// add an element to another parent without changing the visual representation on the screen
function toParent(parent, i) {
  if (this === parent) return this

  if ((0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.isDescriptive)(this.node)) return this.addTo(parent, i)

  const ctm = this.screenCTM()
  const pCtm = parent.screenCTM().inverse()

  this.addTo(parent, i).untransform().transform(pCtm.multiply(ctm))

  return this
}

// same as above with parent equals root-svg
function toRoot(i) {
  return this.toParent(this.root(), i)
}

// Add transformations
function transform(o, relative) {
  // Act as a getter if no object was passed
  if (o == null || typeof o === 'string') {
    const decomposed = new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_3__["default"](this).decompose()
    return o == null ? decomposed : decomposed[o]
  }

  if (!_types_Matrix_js__WEBPACK_IMPORTED_MODULE_3__["default"].isMatrixLike(o)) {
    // Set the origin according to the defined transform
    o = { ...o, origin: (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_0__.getOrigin)(o, this) }
  }

  // The user can pass a boolean, an Element or an Matrix or nothing
  const cleanRelative = relative === true ? this : relative || false
  const result = new _types_Matrix_js__WEBPACK_IMPORTED_MODULE_3__["default"](cleanRelative).transform(o)
  return this.attr('transform', result)
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_2__.registerMethods)('Element', {
  untransform,
  matrixify,
  toParent,
  toRoot,
  transform
})


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/types/Base.js":
/*!*********************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/types/Base.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Base)
/* harmony export */ });
class Base {
  // constructor (node/*, {extensions = []} */) {
  //   // this.tags = []
  //   //
  //   // for (let extension of extensions) {
  //   //   extension.setup.call(this, node)
  //   //   this.tags.push(extension.name)
  //   // }
  // }
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/types/Box.js":
/*!********************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/types/Box.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   bbox: () => (/* binding */ bbox),
/* harmony export */   "default": () => (/* binding */ Box),
/* harmony export */   domContains: () => (/* binding */ domContains),
/* harmony export */   inside: () => (/* binding */ inside),
/* harmony export */   isNulledBox: () => (/* binding */ isNulledBox),
/* harmony export */   rbox: () => (/* binding */ rbox)
/* harmony export */ });
/* harmony import */ var _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/core/regex.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js");
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _utils_methods_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _Matrix_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Matrix.js */ "./node_modules/@svgdotjs/svg.js/src/types/Matrix.js");
/* harmony import */ var _Point_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Point.js */ "./node_modules/@svgdotjs/svg.js/src/types/Point.js");
/* harmony import */ var _modules_core_parser_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../modules/core/parser.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/parser.js");








function isNulledBox(box) {
  return !box.width && !box.height && !box.x && !box.y
}

function domContains(node) {
  return (
    node === _utils_window_js__WEBPACK_IMPORTED_MODULE_1__.globals.document ||
    (
      _utils_window_js__WEBPACK_IMPORTED_MODULE_1__.globals.document.documentElement.contains ||
      function (node) {
        // This is IE - it does not support contains() for top-level SVGs
        while (node.parentNode) {
          node = node.parentNode
        }
        return node === _utils_window_js__WEBPACK_IMPORTED_MODULE_1__.globals.document
      }
    ).call(_utils_window_js__WEBPACK_IMPORTED_MODULE_1__.globals.document.documentElement, node)
  )
}

class Box {
  constructor(...args) {
    this.init(...args)
  }

  addOffset() {
    // offset by window scroll position, because getBoundingClientRect changes when window is scrolled
    this.x += _utils_window_js__WEBPACK_IMPORTED_MODULE_1__.globals.window.pageXOffset
    this.y += _utils_window_js__WEBPACK_IMPORTED_MODULE_1__.globals.window.pageYOffset
    return new Box(this)
  }

  init(source) {
    const base = [0, 0, 0, 0]
    source =
      typeof source === 'string'
        ? source.split(_modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__.delimiter).map(parseFloat)
        : Array.isArray(source)
          ? source
          : typeof source === 'object'
            ? [
                source.left != null ? source.left : source.x,
                source.top != null ? source.top : source.y,
                source.width,
                source.height
              ]
            : arguments.length === 4
              ? [].slice.call(arguments)
              : base

    this.x = source[0] || 0
    this.y = source[1] || 0
    this.width = this.w = source[2] || 0
    this.height = this.h = source[3] || 0

    // Add more bounding box properties
    this.x2 = this.x + this.w
    this.y2 = this.y + this.h
    this.cx = this.x + this.w / 2
    this.cy = this.y + this.h / 2

    return this
  }

  isNulled() {
    return isNulledBox(this)
  }

  // Merge rect box with another, return a new instance
  merge(box) {
    const x = Math.min(this.x, box.x)
    const y = Math.min(this.y, box.y)
    const width = Math.max(this.x + this.width, box.x + box.width) - x
    const height = Math.max(this.y + this.height, box.y + box.height) - y

    return new Box(x, y, width, height)
  }

  toArray() {
    return [this.x, this.y, this.width, this.height]
  }

  toString() {
    return this.x + ' ' + this.y + ' ' + this.width + ' ' + this.height
  }

  transform(m) {
    if (!(m instanceof _Matrix_js__WEBPACK_IMPORTED_MODULE_4__["default"])) {
      m = new _Matrix_js__WEBPACK_IMPORTED_MODULE_4__["default"](m)
    }

    let xMin = Infinity
    let xMax = -Infinity
    let yMin = Infinity
    let yMax = -Infinity

    const pts = [
      new _Point_js__WEBPACK_IMPORTED_MODULE_5__["default"](this.x, this.y),
      new _Point_js__WEBPACK_IMPORTED_MODULE_5__["default"](this.x2, this.y),
      new _Point_js__WEBPACK_IMPORTED_MODULE_5__["default"](this.x, this.y2),
      new _Point_js__WEBPACK_IMPORTED_MODULE_5__["default"](this.x2, this.y2)
    ]

    pts.forEach(function (p) {
      p = p.transform(m)
      xMin = Math.min(xMin, p.x)
      xMax = Math.max(xMax, p.x)
      yMin = Math.min(yMin, p.y)
      yMax = Math.max(yMax, p.y)
    })

    return new Box(xMin, yMin, xMax - xMin, yMax - yMin)
  }
}

function getBox(el, getBBoxFn, retry) {
  let box

  try {
    // Try to get the box with the provided function
    box = getBBoxFn(el.node)

    // If the box is worthless and not even in the dom, retry
    // by throwing an error here...
    if (isNulledBox(box) && !domContains(el.node)) {
      throw new Error('Element not in the dom')
    }
  } catch (e) {
    // ... and calling the retry handler here
    box = retry(el)
  }

  return box
}

function bbox() {
  // Function to get bbox is getBBox()
  const getBBox = (node) => node.getBBox()

  // Take all measures so that a stupid browser renders the element
  // so we can get the bbox from it when we try again
  const retry = (el) => {
    try {
      const clone = el.clone().addTo((0,_modules_core_parser_js__WEBPACK_IMPORTED_MODULE_6__["default"])().svg).show()
      const box = clone.node.getBBox()
      clone.remove()
      return box
    } catch (e) {
      // We give up...
      throw new Error(
        `Getting bbox of element "${
          el.node.nodeName
        }" is not possible: ${e.toString()}`
      )
    }
  }

  const box = getBox(this, getBBox, retry)
  const bbox = new Box(box)

  return bbox
}

function rbox(el) {
  const getRBox = (node) => node.getBoundingClientRect()
  const retry = (el) => {
    // There is no point in trying tricks here because if we insert the element into the dom ourselves
    // it obviously will be at the wrong position
    throw new Error(
      `Getting rbox of element "${el.node.nodeName}" is not possible`
    )
  }

  const box = getBox(this, getRBox, retry)
  const rbox = new Box(box)

  // If an element was passed, we want the bbox in the coordinate system of that element
  if (el) {
    return rbox.transform(el.screenCTM().inverseO())
  }

  // Else we want it in absolute screen coordinates
  // Therefore we need to add the scrollOffset
  return rbox.addOffset()
}

// Checks whether the given point is inside the bounding box
function inside(x, y) {
  const box = this.bbox()

  return (
    x > box.x && y > box.y && x < box.x + box.width && y < box.y + box.height
  )
}

(0,_utils_methods_js__WEBPACK_IMPORTED_MODULE_3__.registerMethods)({
  viewbox: {
    viewbox(x, y, width, height) {
      // act as getter
      if (x == null) return new Box(this.attr('viewBox'))

      // act as setter
      return this.attr('viewBox', new Box(x, y, width, height))
    },

    zoom(level, point) {
      // Its best to rely on the attributes here and here is why:
      // clientXYZ: Doesn't work on non-root svgs because they dont have a CSSBox (silly!)
      // getBoundingClientRect: Doesn't work because Chrome just ignores width and height of nested svgs completely
      //                        that means, their clientRect is always as big as the content.
      //                        Furthermore this size is incorrect if the element is further transformed by its parents
      // computedStyle: Only returns meaningful values if css was used with px. We dont go this route here!
      // getBBox: returns the bounding box of its content - that doesn't help!
      let { width, height } = this.attr(['width', 'height'])

      // Width and height is a string when a number with a unit is present which we can't use
      // So we try clientXYZ
      if (
        (!width && !height) ||
        typeof width === 'string' ||
        typeof height === 'string'
      ) {
        width = this.node.clientWidth
        height = this.node.clientHeight
      }

      // Giving up...
      if (!width || !height) {
        throw new Error(
          'Impossible to get absolute width and height. Please provide an absolute width and height attribute on the zooming element'
        )
      }

      const v = this.viewbox()

      const zoomX = width / v.width
      const zoomY = height / v.height
      const zoom = Math.min(zoomX, zoomY)

      if (level == null) {
        return zoom
      }

      let zoomAmount = zoom / level

      // Set the zoomAmount to the highest value which is safe to process and recover from
      // The * 100 is a bit of wiggle room for the matrix transformation
      if (zoomAmount === Infinity) zoomAmount = Number.MAX_SAFE_INTEGER / 100

      point =
        point || new _Point_js__WEBPACK_IMPORTED_MODULE_5__["default"](width / 2 / zoomX + v.x, height / 2 / zoomY + v.y)

      const box = new Box(v).transform(
        new _Matrix_js__WEBPACK_IMPORTED_MODULE_4__["default"]({ scale: zoomAmount, origin: point })
      )

      return this.viewbox(box)
    }
  }
})

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_2__.register)(Box, 'Box')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/types/Color.js":
/*!**********************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/types/Color.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Color)
/* harmony export */ });
/* harmony import */ var _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/core/regex.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js");


function sixDigitHex(hex) {
  return hex.length === 4
    ? [
        '#',
        hex.substring(1, 2),
        hex.substring(1, 2),
        hex.substring(2, 3),
        hex.substring(2, 3),
        hex.substring(3, 4),
        hex.substring(3, 4)
      ].join('')
    : hex
}

function componentHex(component) {
  const integer = Math.round(component)
  const bounded = Math.max(0, Math.min(255, integer))
  const hex = bounded.toString(16)
  return hex.length === 1 ? '0' + hex : hex
}

function is(object, space) {
  for (let i = space.length; i--; ) {
    if (object[space[i]] == null) {
      return false
    }
  }
  return true
}

function getParameters(a, b) {
  const params = is(a, 'rgb')
    ? { _a: a.r, _b: a.g, _c: a.b, _d: 0, space: 'rgb' }
    : is(a, 'xyz')
      ? { _a: a.x, _b: a.y, _c: a.z, _d: 0, space: 'xyz' }
      : is(a, 'hsl')
        ? { _a: a.h, _b: a.s, _c: a.l, _d: 0, space: 'hsl' }
        : is(a, 'lab')
          ? { _a: a.l, _b: a.a, _c: a.b, _d: 0, space: 'lab' }
          : is(a, 'lch')
            ? { _a: a.l, _b: a.c, _c: a.h, _d: 0, space: 'lch' }
            : is(a, 'cmyk')
              ? { _a: a.c, _b: a.m, _c: a.y, _d: a.k, space: 'cmyk' }
              : { _a: 0, _b: 0, _c: 0, space: 'rgb' }

  params.space = b || params.space
  return params
}

function cieSpace(space) {
  if (space === 'lab' || space === 'xyz' || space === 'lch') {
    return true
  } else {
    return false
  }
}

function hueToRgb(p, q, t) {
  if (t < 0) t += 1
  if (t > 1) t -= 1
  if (t < 1 / 6) return p + (q - p) * 6 * t
  if (t < 1 / 2) return q
  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6
  return p
}

class Color {
  constructor(...inputs) {
    this.init(...inputs)
  }

  // Test if given value is a color
  static isColor(color) {
    return (
      color && (color instanceof Color || this.isRgb(color) || this.test(color))
    )
  }

  // Test if given value is an rgb object
  static isRgb(color) {
    return (
      color &&
      typeof color.r === 'number' &&
      typeof color.g === 'number' &&
      typeof color.b === 'number'
    )
  }

  /*
  Generating random colors
  */
  static random(mode = 'vibrant', t) {
    // Get the math modules
    const { random, round, sin, PI: pi } = Math

    // Run the correct generator
    if (mode === 'vibrant') {
      const l = (81 - 57) * random() + 57
      const c = (83 - 45) * random() + 45
      const h = 360 * random()
      const color = new Color(l, c, h, 'lch')
      return color
    } else if (mode === 'sine') {
      t = t == null ? random() : t
      const r = round(80 * sin((2 * pi * t) / 0.5 + 0.01) + 150)
      const g = round(50 * sin((2 * pi * t) / 0.5 + 4.6) + 200)
      const b = round(100 * sin((2 * pi * t) / 0.5 + 2.3) + 150)
      const color = new Color(r, g, b)
      return color
    } else if (mode === 'pastel') {
      const l = (94 - 86) * random() + 86
      const c = (26 - 9) * random() + 9
      const h = 360 * random()
      const color = new Color(l, c, h, 'lch')
      return color
    } else if (mode === 'dark') {
      const l = 10 + 10 * random()
      const c = (125 - 75) * random() + 86
      const h = 360 * random()
      const color = new Color(l, c, h, 'lch')
      return color
    } else if (mode === 'rgb') {
      const r = 255 * random()
      const g = 255 * random()
      const b = 255 * random()
      const color = new Color(r, g, b)
      return color
    } else if (mode === 'lab') {
      const l = 100 * random()
      const a = 256 * random() - 128
      const b = 256 * random() - 128
      const color = new Color(l, a, b, 'lab')
      return color
    } else if (mode === 'grey') {
      const grey = 255 * random()
      const color = new Color(grey, grey, grey)
      return color
    } else {
      throw new Error('Unsupported random color mode')
    }
  }

  // Test if given value is a color string
  static test(color) {
    return typeof color === 'string' && (_modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__.isHex.test(color) || _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__.isRgb.test(color))
  }

  cmyk() {
    // Get the rgb values for the current color
    const { _a, _b, _c } = this.rgb()
    const [r, g, b] = [_a, _b, _c].map((v) => v / 255)

    // Get the cmyk values in an unbounded format
    const k = Math.min(1 - r, 1 - g, 1 - b)

    if (k === 1) {
      // Catch the black case
      return new Color(0, 0, 0, 1, 'cmyk')
    }

    const c = (1 - r - k) / (1 - k)
    const m = (1 - g - k) / (1 - k)
    const y = (1 - b - k) / (1 - k)

    // Construct the new color
    const color = new Color(c, m, y, k, 'cmyk')
    return color
  }

  hsl() {
    // Get the rgb values
    const { _a, _b, _c } = this.rgb()
    const [r, g, b] = [_a, _b, _c].map((v) => v / 255)

    // Find the maximum and minimum values to get the lightness
    const max = Math.max(r, g, b)
    const min = Math.min(r, g, b)
    const l = (max + min) / 2

    // If the r, g, v values are identical then we are grey
    const isGrey = max === min

    // Calculate the hue and saturation
    const delta = max - min
    const s = isGrey
      ? 0
      : l > 0.5
        ? delta / (2 - max - min)
        : delta / (max + min)
    const h = isGrey
      ? 0
      : max === r
        ? ((g - b) / delta + (g < b ? 6 : 0)) / 6
        : max === g
          ? ((b - r) / delta + 2) / 6
          : max === b
            ? ((r - g) / delta + 4) / 6
            : 0

    // Construct and return the new color
    const color = new Color(360 * h, 100 * s, 100 * l, 'hsl')
    return color
  }

  init(a = 0, b = 0, c = 0, d = 0, space = 'rgb') {
    // This catches the case when a falsy value is passed like ''
    a = !a ? 0 : a

    // Reset all values in case the init function is rerun with new color space
    if (this.space) {
      for (const component in this.space) {
        delete this[this.space[component]]
      }
    }

    if (typeof a === 'number') {
      // Allow for the case that we don't need d...
      space = typeof d === 'string' ? d : space
      d = typeof d === 'string' ? 0 : d

      // Assign the values straight to the color
      Object.assign(this, { _a: a, _b: b, _c: c, _d: d, space })
      // If the user gave us an array, make the color from it
    } else if (a instanceof Array) {
      this.space = b || (typeof a[3] === 'string' ? a[3] : a[4]) || 'rgb'
      Object.assign(this, { _a: a[0], _b: a[1], _c: a[2], _d: a[3] || 0 })
    } else if (a instanceof Object) {
      // Set the object up and assign its values directly
      const values = getParameters(a, b)
      Object.assign(this, values)
    } else if (typeof a === 'string') {
      if (_modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__.isRgb.test(a)) {
        const noWhitespace = a.replace(_modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__.whitespace, '')
        const [_a, _b, _c] = _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__.rgb
          .exec(noWhitespace)
          .slice(1, 4)
          .map((v) => parseInt(v))
        Object.assign(this, { _a, _b, _c, _d: 0, space: 'rgb' })
      } else if (_modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__.isHex.test(a)) {
        const hexParse = (v) => parseInt(v, 16)
        const [, _a, _b, _c] = _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__.hex.exec(sixDigitHex(a)).map(hexParse)
        Object.assign(this, { _a, _b, _c, _d: 0, space: 'rgb' })
      } else throw Error("Unsupported string format, can't construct Color")
    }

    // Now add the components as a convenience
    const { _a, _b, _c, _d } = this
    const components =
      this.space === 'rgb'
        ? { r: _a, g: _b, b: _c }
        : this.space === 'xyz'
          ? { x: _a, y: _b, z: _c }
          : this.space === 'hsl'
            ? { h: _a, s: _b, l: _c }
            : this.space === 'lab'
              ? { l: _a, a: _b, b: _c }
              : this.space === 'lch'
                ? { l: _a, c: _b, h: _c }
                : this.space === 'cmyk'
                  ? { c: _a, m: _b, y: _c, k: _d }
                  : {}
    Object.assign(this, components)
  }

  lab() {
    // Get the xyz color
    const { x, y, z } = this.xyz()

    // Get the lab components
    const l = 116 * y - 16
    const a = 500 * (x - y)
    const b = 200 * (y - z)

    // Construct and return a new color
    const color = new Color(l, a, b, 'lab')
    return color
  }

  lch() {
    // Get the lab color directly
    const { l, a, b } = this.lab()

    // Get the chromaticity and the hue using polar coordinates
    const c = Math.sqrt(a ** 2 + b ** 2)
    let h = (180 * Math.atan2(b, a)) / Math.PI
    if (h < 0) {
      h *= -1
      h = 360 - h
    }

    // Make a new color and return it
    const color = new Color(l, c, h, 'lch')
    return color
  }
  /*
  Conversion Methods
  */

  rgb() {
    if (this.space === 'rgb') {
      return this
    } else if (cieSpace(this.space)) {
      // Convert to the xyz color space
      let { x, y, z } = this
      if (this.space === 'lab' || this.space === 'lch') {
        // Get the values in the lab space
        let { l, a, b } = this
        if (this.space === 'lch') {
          const { c, h } = this
          const dToR = Math.PI / 180
          a = c * Math.cos(dToR * h)
          b = c * Math.sin(dToR * h)
        }

        // Undo the nonlinear function
        const yL = (l + 16) / 116
        const xL = a / 500 + yL
        const zL = yL - b / 200

        // Get the xyz values
        const ct = 16 / 116
        const mx = 0.008856
        const nm = 7.787
        x = 0.95047 * (xL ** 3 > mx ? xL ** 3 : (xL - ct) / nm)
        y = 1.0 * (yL ** 3 > mx ? yL ** 3 : (yL - ct) / nm)
        z = 1.08883 * (zL ** 3 > mx ? zL ** 3 : (zL - ct) / nm)
      }

      // Convert xyz to unbounded rgb values
      const rU = x * 3.2406 + y * -1.5372 + z * -0.4986
      const gU = x * -0.9689 + y * 1.8758 + z * 0.0415
      const bU = x * 0.0557 + y * -0.204 + z * 1.057

      // Convert the values to true rgb values
      const pow = Math.pow
      const bd = 0.0031308
      const r = rU > bd ? 1.055 * pow(rU, 1 / 2.4) - 0.055 : 12.92 * rU
      const g = gU > bd ? 1.055 * pow(gU, 1 / 2.4) - 0.055 : 12.92 * gU
      const b = bU > bd ? 1.055 * pow(bU, 1 / 2.4) - 0.055 : 12.92 * bU

      // Make and return the color
      const color = new Color(255 * r, 255 * g, 255 * b)
      return color
    } else if (this.space === 'hsl') {
      // https://bgrins.github.io/TinyColor/docs/tinycolor.html
      // Get the current hsl values
      let { h, s, l } = this
      h /= 360
      s /= 100
      l /= 100

      // If we are grey, then just make the color directly
      if (s === 0) {
        l *= 255
        const color = new Color(l, l, l)
        return color
      }

      // TODO I have no idea what this does :D If you figure it out, tell me!
      const q = l < 0.5 ? l * (1 + s) : l + s - l * s
      const p = 2 * l - q

      // Get the rgb values
      const r = 255 * hueToRgb(p, q, h + 1 / 3)
      const g = 255 * hueToRgb(p, q, h)
      const b = 255 * hueToRgb(p, q, h - 1 / 3)

      // Make a new color
      const color = new Color(r, g, b)
      return color
    } else if (this.space === 'cmyk') {
      // https://gist.github.com/felipesabino/5066336
      // Get the normalised cmyk values
      const { c, m, y, k } = this

      // Get the rgb values
      const r = 255 * (1 - Math.min(1, c * (1 - k) + k))
      const g = 255 * (1 - Math.min(1, m * (1 - k) + k))
      const b = 255 * (1 - Math.min(1, y * (1 - k) + k))

      // Form the color and return it
      const color = new Color(r, g, b)
      return color
    } else {
      return this
    }
  }

  toArray() {
    const { _a, _b, _c, _d, space } = this
    return [_a, _b, _c, _d, space]
  }

  toHex() {
    const [r, g, b] = this._clamped().map(componentHex)
    return `#${r}${g}${b}`
  }

  toRgb() {
    const [rV, gV, bV] = this._clamped()
    const string = `rgb(${rV},${gV},${bV})`
    return string
  }

  toString() {
    return this.toHex()
  }

  xyz() {
    // Normalise the red, green and blue values
    const { _a: r255, _b: g255, _c: b255 } = this.rgb()
    const [r, g, b] = [r255, g255, b255].map((v) => v / 255)

    // Convert to the lab rgb space
    const rL = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92
    const gL = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92
    const bL = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92

    // Convert to the xyz color space without bounding the values
    const xU = (rL * 0.4124 + gL * 0.3576 + bL * 0.1805) / 0.95047
    const yU = (rL * 0.2126 + gL * 0.7152 + bL * 0.0722) / 1.0
    const zU = (rL * 0.0193 + gL * 0.1192 + bL * 0.9505) / 1.08883

    // Get the proper xyz values by applying the bounding
    const x = xU > 0.008856 ? Math.pow(xU, 1 / 3) : 7.787 * xU + 16 / 116
    const y = yU > 0.008856 ? Math.pow(yU, 1 / 3) : 7.787 * yU + 16 / 116
    const z = zU > 0.008856 ? Math.pow(zU, 1 / 3) : 7.787 * zU + 16 / 116

    // Make and return the color
    const color = new Color(x, y, z, 'xyz')
    return color
  }

  /*
  Input and Output methods
  */

  _clamped() {
    const { _a, _b, _c } = this.rgb()
    const { max, min, round } = Math
    const format = (v) => max(0, min(round(v), 255))
    return [_a, _b, _c].map(format)
  }

  /*
  Constructing colors
  */
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/types/EventTarget.js":
/*!****************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/types/EventTarget.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EventTarget)
/* harmony export */ });
/* harmony import */ var _modules_core_event_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/core/event.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/event.js");
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _Base_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Base.js */ "./node_modules/@svgdotjs/svg.js/src/types/Base.js");




class EventTarget extends _Base_js__WEBPACK_IMPORTED_MODULE_2__["default"] {
  addEventListener() {}

  dispatch(event, data, options) {
    return (0,_modules_core_event_js__WEBPACK_IMPORTED_MODULE_0__.dispatch)(this, event, data, options)
  }

  dispatchEvent(event) {
    const bag = this.getEventHolder().events
    if (!bag) return true

    const events = bag[event.type]

    for (const i in events) {
      for (const j in events[i]) {
        events[i][j](event)
      }
    }

    return !event.defaultPrevented
  }

  // Fire given event
  fire(event, data, options) {
    this.dispatch(event, data, options)
    return this
  }

  getEventHolder() {
    return this
  }

  getEventTarget() {
    return this
  }

  // Unbind event from listener
  off(event, listener, options) {
    (0,_modules_core_event_js__WEBPACK_IMPORTED_MODULE_0__.off)(this, event, listener, options)
    return this
  }

  // Bind given event to listener
  on(event, listener, binding, options) {
    (0,_modules_core_event_js__WEBPACK_IMPORTED_MODULE_0__.on)(this, event, listener, binding, options)
    return this
  }

  removeEventListener() {}
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_1__.register)(EventTarget, 'EventTarget')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/types/List.js":
/*!*********************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/types/List.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");

// import { subClassArray } from './ArrayPolyfill.js'

class List extends Array {
  constructor(arr = [], ...args) {
    super(arr, ...args)
    if (typeof arr === 'number') return this
    this.length = 0
    this.push(...arr)
  }
}

/* = subClassArray('List', Array, function (arr = []) {
  // This catches the case, that native map tries to create an array with new Array(1)
  if (typeof arr === 'number') return this
  this.length = 0
  this.push(...arr)
}) */

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (List);

;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.extend)([List], {
  each(fnOrMethodName, ...args) {
    if (typeof fnOrMethodName === 'function') {
      return this.map((el, i, arr) => {
        return fnOrMethodName.call(el, el, i, arr)
      })
    } else {
      return this.map((el) => {
        return el[fnOrMethodName](...args)
      })
    }
  },

  toArray() {
    return Array.prototype.concat.apply([], this)
  }
})

const reserved = ['toArray', 'constructor', 'each']

List.extend = function (methods) {
  methods = methods.reduce((obj, name) => {
    // Don't overwrite own methods
    if (reserved.includes(name)) return obj

    // Don't add private methods
    if (name[0] === '_') return obj

    // Allow access to original Array methods through a prefix
    if (name in Array.prototype) {
      obj['$' + name] = Array.prototype[name]
    }

    // Relay every call to each()
    obj[name] = function (...attrs) {
      return this.each(name, ...attrs)
    }
    return obj
  }, {})

  ;(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_0__.extend)([List], methods)
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/types/Matrix.js":
/*!***********************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/types/Matrix.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ctm: () => (/* binding */ ctm),
/* harmony export */   "default": () => (/* binding */ Matrix),
/* harmony export */   screenCTM: () => (/* binding */ screenCTM)
/* harmony export */ });
/* harmony import */ var _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/core/regex.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js");
/* harmony import */ var _utils_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/utils.js */ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js");
/* harmony import */ var _utils_adopter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/adopter.js */ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js");
/* harmony import */ var _elements_Element_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../elements/Element.js */ "./node_modules/@svgdotjs/svg.js/src/elements/Element.js");
/* harmony import */ var _Point_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Point.js */ "./node_modules/@svgdotjs/svg.js/src/types/Point.js");






function closeEnough(a, b, threshold) {
  return Math.abs(b - a) < (threshold || 1e-6)
}

class Matrix {
  constructor(...args) {
    this.init(...args)
  }

  static formatTransforms(o) {
    // Get all of the parameters required to form the matrix
    const flipBoth = o.flip === 'both' || o.flip === true
    const flipX = o.flip && (flipBoth || o.flip === 'x') ? -1 : 1
    const flipY = o.flip && (flipBoth || o.flip === 'y') ? -1 : 1
    const skewX =
      o.skew && o.skew.length
        ? o.skew[0]
        : isFinite(o.skew)
          ? o.skew
          : isFinite(o.skewX)
            ? o.skewX
            : 0
    const skewY =
      o.skew && o.skew.length
        ? o.skew[1]
        : isFinite(o.skew)
          ? o.skew
          : isFinite(o.skewY)
            ? o.skewY
            : 0
    const scaleX =
      o.scale && o.scale.length
        ? o.scale[0] * flipX
        : isFinite(o.scale)
          ? o.scale * flipX
          : isFinite(o.scaleX)
            ? o.scaleX * flipX
            : flipX
    const scaleY =
      o.scale && o.scale.length
        ? o.scale[1] * flipY
        : isFinite(o.scale)
          ? o.scale * flipY
          : isFinite(o.scaleY)
            ? o.scaleY * flipY
            : flipY
    const shear = o.shear || 0
    const theta = o.rotate || o.theta || 0
    const origin = new _Point_js__WEBPACK_IMPORTED_MODULE_4__["default"](
      o.origin || o.around || o.ox || o.originX,
      o.oy || o.originY
    )
    const ox = origin.x
    const oy = origin.y
    // We need Point to be invalid if nothing was passed because we cannot default to 0 here. That is why NaN
    const position = new _Point_js__WEBPACK_IMPORTED_MODULE_4__["default"](
      o.position || o.px || o.positionX || NaN,
      o.py || o.positionY || NaN
    )
    const px = position.x
    const py = position.y
    const translate = new _Point_js__WEBPACK_IMPORTED_MODULE_4__["default"](
      o.translate || o.tx || o.translateX,
      o.ty || o.translateY
    )
    const tx = translate.x
    const ty = translate.y
    const relative = new _Point_js__WEBPACK_IMPORTED_MODULE_4__["default"](
      o.relative || o.rx || o.relativeX,
      o.ry || o.relativeY
    )
    const rx = relative.x
    const ry = relative.y

    // Populate all of the values
    return {
      scaleX,
      scaleY,
      skewX,
      skewY,
      shear,
      theta,
      rx,
      ry,
      tx,
      ty,
      ox,
      oy,
      px,
      py
    }
  }

  static fromArray(a) {
    return { a: a[0], b: a[1], c: a[2], d: a[3], e: a[4], f: a[5] }
  }

  static isMatrixLike(o) {
    return (
      o.a != null ||
      o.b != null ||
      o.c != null ||
      o.d != null ||
      o.e != null ||
      o.f != null
    )
  }

  // left matrix, right matrix, target matrix which is overwritten
  static matrixMultiply(l, r, o) {
    // Work out the product directly
    const a = l.a * r.a + l.c * r.b
    const b = l.b * r.a + l.d * r.b
    const c = l.a * r.c + l.c * r.d
    const d = l.b * r.c + l.d * r.d
    const e = l.e + l.a * r.e + l.c * r.f
    const f = l.f + l.b * r.e + l.d * r.f

    // make sure to use local variables because l/r and o could be the same
    o.a = a
    o.b = b
    o.c = c
    o.d = d
    o.e = e
    o.f = f

    return o
  }

  around(cx, cy, matrix) {
    return this.clone().aroundO(cx, cy, matrix)
  }

  // Transform around a center point
  aroundO(cx, cy, matrix) {
    const dx = cx || 0
    const dy = cy || 0
    return this.translateO(-dx, -dy).lmultiplyO(matrix).translateO(dx, dy)
  }

  // Clones this matrix
  clone() {
    return new Matrix(this)
  }

  // Decomposes this matrix into its affine parameters
  decompose(cx = 0, cy = 0) {
    // Get the parameters from the matrix
    const a = this.a
    const b = this.b
    const c = this.c
    const d = this.d
    const e = this.e
    const f = this.f

    // Figure out if the winding direction is clockwise or counterclockwise
    const determinant = a * d - b * c
    const ccw = determinant > 0 ? 1 : -1

    // Since we only shear in x, we can use the x basis to get the x scale
    // and the rotation of the resulting matrix
    const sx = ccw * Math.sqrt(a * a + b * b)
    const thetaRad = Math.atan2(ccw * b, ccw * a)
    const theta = (180 / Math.PI) * thetaRad
    const ct = Math.cos(thetaRad)
    const st = Math.sin(thetaRad)

    // We can then solve the y basis vector simultaneously to get the other
    // two affine parameters directly from these parameters
    const lam = (a * c + b * d) / determinant
    const sy = (c * sx) / (lam * a - b) || (d * sx) / (lam * b + a)

    // Use the translations
    const tx = e - cx + cx * ct * sx + cy * (lam * ct * sx - st * sy)
    const ty = f - cy + cx * st * sx + cy * (lam * st * sx + ct * sy)

    // Construct the decomposition and return it
    return {
      // Return the affine parameters
      scaleX: sx,
      scaleY: sy,
      shear: lam,
      rotate: theta,
      translateX: tx,
      translateY: ty,
      originX: cx,
      originY: cy,

      // Return the matrix parameters
      a: this.a,
      b: this.b,
      c: this.c,
      d: this.d,
      e: this.e,
      f: this.f
    }
  }

  // Check if two matrices are equal
  equals(other) {
    if (other === this) return true
    const comp = new Matrix(other)
    return (
      closeEnough(this.a, comp.a) &&
      closeEnough(this.b, comp.b) &&
      closeEnough(this.c, comp.c) &&
      closeEnough(this.d, comp.d) &&
      closeEnough(this.e, comp.e) &&
      closeEnough(this.f, comp.f)
    )
  }

  // Flip matrix on x or y, at a given offset
  flip(axis, around) {
    return this.clone().flipO(axis, around)
  }

  flipO(axis, around) {
    return axis === 'x'
      ? this.scaleO(-1, 1, around, 0)
      : axis === 'y'
        ? this.scaleO(1, -1, 0, around)
        : this.scaleO(-1, -1, axis, around || axis) // Define an x, y flip point
  }

  // Initialize
  init(source) {
    const base = Matrix.fromArray([1, 0, 0, 1, 0, 0])

    // ensure source as object
    source =
      source instanceof _elements_Element_js__WEBPACK_IMPORTED_MODULE_3__["default"]
        ? source.matrixify()
        : typeof source === 'string'
          ? Matrix.fromArray(source.split(_modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__.delimiter).map(parseFloat))
          : Array.isArray(source)
            ? Matrix.fromArray(source)
            : typeof source === 'object' && Matrix.isMatrixLike(source)
              ? source
              : typeof source === 'object'
                ? new Matrix().transform(source)
                : arguments.length === 6
                  ? Matrix.fromArray([].slice.call(arguments))
                  : base

    // Merge the source matrix with the base matrix
    this.a = source.a != null ? source.a : base.a
    this.b = source.b != null ? source.b : base.b
    this.c = source.c != null ? source.c : base.c
    this.d = source.d != null ? source.d : base.d
    this.e = source.e != null ? source.e : base.e
    this.f = source.f != null ? source.f : base.f

    return this
  }

  inverse() {
    return this.clone().inverseO()
  }

  // Inverses matrix
  inverseO() {
    // Get the current parameters out of the matrix
    const a = this.a
    const b = this.b
    const c = this.c
    const d = this.d
    const e = this.e
    const f = this.f

    // Invert the 2x2 matrix in the top left
    const det = a * d - b * c
    if (!det) throw new Error('Cannot invert ' + this)

    // Calculate the top 2x2 matrix
    const na = d / det
    const nb = -b / det
    const nc = -c / det
    const nd = a / det

    // Apply the inverted matrix to the top right
    const ne = -(na * e + nc * f)
    const nf = -(nb * e + nd * f)

    // Construct the inverted matrix
    this.a = na
    this.b = nb
    this.c = nc
    this.d = nd
    this.e = ne
    this.f = nf

    return this
  }

  lmultiply(matrix) {
    return this.clone().lmultiplyO(matrix)
  }

  lmultiplyO(matrix) {
    const r = this
    const l = matrix instanceof Matrix ? matrix : new Matrix(matrix)

    return Matrix.matrixMultiply(l, r, this)
  }

  // Left multiplies by the given matrix
  multiply(matrix) {
    return this.clone().multiplyO(matrix)
  }

  multiplyO(matrix) {
    // Get the matrices
    const l = this
    const r = matrix instanceof Matrix ? matrix : new Matrix(matrix)

    return Matrix.matrixMultiply(l, r, this)
  }

  // Rotate matrix
  rotate(r, cx, cy) {
    return this.clone().rotateO(r, cx, cy)
  }

  rotateO(r, cx = 0, cy = 0) {
    // Convert degrees to radians
    r = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.radians)(r)

    const cos = Math.cos(r)
    const sin = Math.sin(r)

    const { a, b, c, d, e, f } = this

    this.a = a * cos - b * sin
    this.b = b * cos + a * sin
    this.c = c * cos - d * sin
    this.d = d * cos + c * sin
    this.e = e * cos - f * sin + cy * sin - cx * cos + cx
    this.f = f * cos + e * sin - cx * sin - cy * cos + cy

    return this
  }

  // Scale matrix
  scale() {
    return this.clone().scaleO(...arguments)
  }

  scaleO(x, y = x, cx = 0, cy = 0) {
    // Support uniform scaling
    if (arguments.length === 3) {
      cy = cx
      cx = y
      y = x
    }

    const { a, b, c, d, e, f } = this

    this.a = a * x
    this.b = b * y
    this.c = c * x
    this.d = d * y
    this.e = e * x - cx * x + cx
    this.f = f * y - cy * y + cy

    return this
  }

  // Shear matrix
  shear(a, cx, cy) {
    return this.clone().shearO(a, cx, cy)
  }

  // eslint-disable-next-line no-unused-vars
  shearO(lx, cx = 0, cy = 0) {
    const { a, b, c, d, e, f } = this

    this.a = a + b * lx
    this.c = c + d * lx
    this.e = e + f * lx - cy * lx

    return this
  }

  // Skew Matrix
  skew() {
    return this.clone().skewO(...arguments)
  }

  skewO(x, y = x, cx = 0, cy = 0) {
    // support uniformal skew
    if (arguments.length === 3) {
      cy = cx
      cx = y
      y = x
    }

    // Convert degrees to radians
    x = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.radians)(x)
    y = (0,_utils_utils_js__WEBPACK_IMPORTED_MODULE_1__.radians)(y)

    const lx = Math.tan(x)
    const ly = Math.tan(y)

    const { a, b, c, d, e, f } = this

    this.a = a + b * lx
    this.b = b + a * ly
    this.c = c + d * lx
    this.d = d + c * ly
    this.e = e + f * lx - cy * lx
    this.f = f + e * ly - cx * ly

    return this
  }

  // SkewX
  skewX(x, cx, cy) {
    return this.skew(x, 0, cx, cy)
  }

  // SkewY
  skewY(y, cx, cy) {
    return this.skew(0, y, cx, cy)
  }

  toArray() {
    return [this.a, this.b, this.c, this.d, this.e, this.f]
  }

  // Convert matrix to string
  toString() {
    return (
      'matrix(' +
      this.a +
      ',' +
      this.b +
      ',' +
      this.c +
      ',' +
      this.d +
      ',' +
      this.e +
      ',' +
      this.f +
      ')'
    )
  }

  // Transform a matrix into another matrix by manipulating the space
  transform(o) {
    // Check if o is a matrix and then left multiply it directly
    if (Matrix.isMatrixLike(o)) {
      const matrix = new Matrix(o)
      return matrix.multiplyO(this)
    }

    // Get the proposed transformations and the current transformations
    const t = Matrix.formatTransforms(o)
    const current = this
    const { x: ox, y: oy } = new _Point_js__WEBPACK_IMPORTED_MODULE_4__["default"](t.ox, t.oy).transform(current)

    // Construct the resulting matrix
    const transformer = new Matrix()
      .translateO(t.rx, t.ry)
      .lmultiplyO(current)
      .translateO(-ox, -oy)
      .scaleO(t.scaleX, t.scaleY)
      .skewO(t.skewX, t.skewY)
      .shearO(t.shear)
      .rotateO(t.theta)
      .translateO(ox, oy)

    // If we want the origin at a particular place, we force it there
    if (isFinite(t.px) || isFinite(t.py)) {
      const origin = new _Point_js__WEBPACK_IMPORTED_MODULE_4__["default"](ox, oy).transform(transformer)
      // TODO: Replace t.px with isFinite(t.px)
      // Doesn't work because t.px is also 0 if it wasn't passed
      const dx = isFinite(t.px) ? t.px - origin.x : 0
      const dy = isFinite(t.py) ? t.py - origin.y : 0
      transformer.translateO(dx, dy)
    }

    // Translate now after positioning
    transformer.translateO(t.tx, t.ty)
    return transformer
  }

  // Translate matrix
  translate(x, y) {
    return this.clone().translateO(x, y)
  }

  translateO(x, y) {
    this.e += x || 0
    this.f += y || 0
    return this
  }

  valueOf() {
    return {
      a: this.a,
      b: this.b,
      c: this.c,
      d: this.d,
      e: this.e,
      f: this.f
    }
  }
}

function ctm() {
  return new Matrix(this.node.getCTM())
}

function screenCTM() {
  try {
    /* https://bugzilla.mozilla.org/show_bug.cgi?id=1344537
       This is needed because FF does not return the transformation matrix
       for the inner coordinate system when getScreenCTM() is called on nested svgs.
       However all other Browsers do that */
    if (typeof this.isRoot === 'function' && !this.isRoot()) {
      const rect = this.rect(1, 1)
      const m = rect.node.getScreenCTM()
      rect.remove()
      return new Matrix(m)
    }
    return new Matrix(this.node.getScreenCTM())
  } catch (e) {
    console.warn(
      `Cannot get CTM from SVG node ${this.node.nodeName}. Is the element rendered?`
    )
    return new Matrix()
  }
}

(0,_utils_adopter_js__WEBPACK_IMPORTED_MODULE_2__.register)(Matrix, 'Matrix')


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/types/PathArray.js":
/*!**************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/types/PathArray.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PathArray)
/* harmony export */ });
/* harmony import */ var _SVGArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SVGArray.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGArray.js");
/* harmony import */ var _modules_core_parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/core/parser.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/parser.js");
/* harmony import */ var _Box_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Box.js */ "./node_modules/@svgdotjs/svg.js/src/types/Box.js");
/* harmony import */ var _utils_pathParser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/pathParser.js */ "./node_modules/@svgdotjs/svg.js/src/utils/pathParser.js");





function arrayToString(a) {
  let s = ''
  for (let i = 0, il = a.length; i < il; i++) {
    s += a[i][0]

    if (a[i][1] != null) {
      s += a[i][1]

      if (a[i][2] != null) {
        s += ' '
        s += a[i][2]

        if (a[i][3] != null) {
          s += ' '
          s += a[i][3]
          s += ' '
          s += a[i][4]

          if (a[i][5] != null) {
            s += ' '
            s += a[i][5]
            s += ' '
            s += a[i][6]

            if (a[i][7] != null) {
              s += ' '
              s += a[i][7]
            }
          }
        }
      }
    }
  }

  return s + ' '
}

class PathArray extends _SVGArray_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
  // Get bounding box of path
  bbox() {
    (0,_modules_core_parser_js__WEBPACK_IMPORTED_MODULE_1__["default"])().path.setAttribute('d', this.toString())
    return new _Box_js__WEBPACK_IMPORTED_MODULE_2__["default"](_modules_core_parser_js__WEBPACK_IMPORTED_MODULE_1__["default"].nodes.path.getBBox())
  }

  // Move path string
  move(x, y) {
    // get bounding box of current situation
    const box = this.bbox()

    // get relative offset
    x -= box.x
    y -= box.y

    if (!isNaN(x) && !isNaN(y)) {
      // move every point
      for (let l, i = this.length - 1; i >= 0; i--) {
        l = this[i][0]

        if (l === 'M' || l === 'L' || l === 'T') {
          this[i][1] += x
          this[i][2] += y
        } else if (l === 'H') {
          this[i][1] += x
        } else if (l === 'V') {
          this[i][1] += y
        } else if (l === 'C' || l === 'S' || l === 'Q') {
          this[i][1] += x
          this[i][2] += y
          this[i][3] += x
          this[i][4] += y

          if (l === 'C') {
            this[i][5] += x
            this[i][6] += y
          }
        } else if (l === 'A') {
          this[i][6] += x
          this[i][7] += y
        }
      }
    }

    return this
  }

  // Absolutize and parse path to array
  parse(d = 'M0 0') {
    if (Array.isArray(d)) {
      d = Array.prototype.concat.apply([], d).toString()
    }

    return (0,_utils_pathParser_js__WEBPACK_IMPORTED_MODULE_3__.pathParser)(d)
  }

  // Resize path string
  size(width, height) {
    // get bounding box of current situation
    const box = this.bbox()
    let i, l

    // If the box width or height is 0 then we ignore
    // transformations on the respective axis
    box.width = box.width === 0 ? 1 : box.width
    box.height = box.height === 0 ? 1 : box.height

    // recalculate position of all points according to new size
    for (i = this.length - 1; i >= 0; i--) {
      l = this[i][0]

      if (l === 'M' || l === 'L' || l === 'T') {
        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x
        this[i][2] = ((this[i][2] - box.y) * height) / box.height + box.y
      } else if (l === 'H') {
        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x
      } else if (l === 'V') {
        this[i][1] = ((this[i][1] - box.y) * height) / box.height + box.y
      } else if (l === 'C' || l === 'S' || l === 'Q') {
        this[i][1] = ((this[i][1] - box.x) * width) / box.width + box.x
        this[i][2] = ((this[i][2] - box.y) * height) / box.height + box.y
        this[i][3] = ((this[i][3] - box.x) * width) / box.width + box.x
        this[i][4] = ((this[i][4] - box.y) * height) / box.height + box.y

        if (l === 'C') {
          this[i][5] = ((this[i][5] - box.x) * width) / box.width + box.x
          this[i][6] = ((this[i][6] - box.y) * height) / box.height + box.y
        }
      } else if (l === 'A') {
        // resize radii
        this[i][1] = (this[i][1] * width) / box.width
        this[i][2] = (this[i][2] * height) / box.height

        // move position values
        this[i][6] = ((this[i][6] - box.x) * width) / box.width + box.x
        this[i][7] = ((this[i][7] - box.y) * height) / box.height + box.y
      }
    }

    return this
  }

  // Convert array to string
  toString() {
    return arrayToString(this)
  }
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/types/Point.js":
/*!**********************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/types/Point.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Point),
/* harmony export */   point: () => (/* binding */ point)
/* harmony export */ });
/* harmony import */ var _Matrix_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Matrix.js */ "./node_modules/@svgdotjs/svg.js/src/types/Matrix.js");


class Point {
  // Initialize
  constructor(...args) {
    this.init(...args)
  }

  // Clone point
  clone() {
    return new Point(this)
  }

  init(x, y) {
    const base = { x: 0, y: 0 }

    // ensure source as object
    const source = Array.isArray(x)
      ? { x: x[0], y: x[1] }
      : typeof x === 'object'
        ? { x: x.x, y: x.y }
        : { x: x, y: y }

    // merge source
    this.x = source.x == null ? base.x : source.x
    this.y = source.y == null ? base.y : source.y

    return this
  }

  toArray() {
    return [this.x, this.y]
  }

  transform(m) {
    return this.clone().transformO(m)
  }

  // Transform point with matrix
  transformO(m) {
    if (!_Matrix_js__WEBPACK_IMPORTED_MODULE_0__["default"].isMatrixLike(m)) {
      m = new _Matrix_js__WEBPACK_IMPORTED_MODULE_0__["default"](m)
    }

    const { x, y } = this

    // Perform the matrix multiplication
    this.x = m.a * x + m.c * y + m.e
    this.y = m.b * x + m.d * y + m.f

    return this
  }
}

function point(x, y) {
  return new Point(x, y).transformO(this.screenCTM().inverseO())
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/types/PointArray.js":
/*!***************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/types/PointArray.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PointArray)
/* harmony export */ });
/* harmony import */ var _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/core/regex.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js");
/* harmony import */ var _SVGArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SVGArray.js */ "./node_modules/@svgdotjs/svg.js/src/types/SVGArray.js");
/* harmony import */ var _Box_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Box.js */ "./node_modules/@svgdotjs/svg.js/src/types/Box.js");
/* harmony import */ var _Matrix_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Matrix.js */ "./node_modules/@svgdotjs/svg.js/src/types/Matrix.js");





class PointArray extends _SVGArray_js__WEBPACK_IMPORTED_MODULE_1__["default"] {
  // Get bounding box of points
  bbox() {
    let maxX = -Infinity
    let maxY = -Infinity
    let minX = Infinity
    let minY = Infinity
    this.forEach(function (el) {
      maxX = Math.max(el[0], maxX)
      maxY = Math.max(el[1], maxY)
      minX = Math.min(el[0], minX)
      minY = Math.min(el[1], minY)
    })
    return new _Box_js__WEBPACK_IMPORTED_MODULE_2__["default"](minX, minY, maxX - minX, maxY - minY)
  }

  // Move point string
  move(x, y) {
    const box = this.bbox()

    // get relative offset
    x -= box.x
    y -= box.y

    // move every point
    if (!isNaN(x) && !isNaN(y)) {
      for (let i = this.length - 1; i >= 0; i--) {
        this[i] = [this[i][0] + x, this[i][1] + y]
      }
    }

    return this
  }

  // Parse point string and flat array
  parse(array = [0, 0]) {
    const points = []

    // if it is an array, we flatten it and therefore clone it to 1 depths
    if (array instanceof Array) {
      array = Array.prototype.concat.apply([], array)
    } else {
      // Else, it is considered as a string
      // parse points
      array = array.trim().split(_modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__.delimiter).map(parseFloat)
    }

    // validate points - https://svgwg.org/svg2-draft/shapes.html#DataTypePoints
    // Odd number of coordinates is an error. In such cases, drop the last odd coordinate.
    if (array.length % 2 !== 0) array.pop()

    // wrap points in two-tuples
    for (let i = 0, len = array.length; i < len; i = i + 2) {
      points.push([array[i], array[i + 1]])
    }

    return points
  }

  // Resize poly string
  size(width, height) {
    let i
    const box = this.bbox()

    // recalculate position of all points according to new size
    for (i = this.length - 1; i >= 0; i--) {
      if (box.width)
        this[i][0] = ((this[i][0] - box.x) * width) / box.width + box.x
      if (box.height)
        this[i][1] = ((this[i][1] - box.y) * height) / box.height + box.y
    }

    return this
  }

  // Convert array to line object
  toLine() {
    return {
      x1: this[0][0],
      y1: this[0][1],
      x2: this[1][0],
      y2: this[1][1]
    }
  }

  // Convert array to string
  toString() {
    const array = []
    // convert to a poly point string
    for (let i = 0, il = this.length; i < il; i++) {
      array.push(this[i].join(','))
    }

    return array.join(' ')
  }

  transform(m) {
    return this.clone().transformO(m)
  }

  // transform points with matrix (similar to Point.transform)
  transformO(m) {
    if (!_Matrix_js__WEBPACK_IMPORTED_MODULE_3__["default"].isMatrixLike(m)) {
      m = new _Matrix_js__WEBPACK_IMPORTED_MODULE_3__["default"](m)
    }

    for (let i = this.length; i--; ) {
      // Perform the matrix multiplication
      const [x, y] = this[i]
      this[i][0] = m.a * x + m.c * y + m.e
      this[i][1] = m.b * x + m.d * y + m.f
    }

    return this
  }
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/types/SVGArray.js":
/*!*************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/types/SVGArray.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SVGArray)
/* harmony export */ });
/* harmony import */ var _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/core/regex.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js");


class SVGArray extends Array {
  constructor(...args) {
    super(...args)
    this.init(...args)
  }

  clone() {
    return new this.constructor(this)
  }

  init(arr) {
    // This catches the case, that native map tries to create an array with new Array(1)
    if (typeof arr === 'number') return this
    this.length = 0
    this.push(...this.parse(arr))
    return this
  }

  // Parse whitespace separated string
  parse(array = []) {
    // If already is an array, no need to parse it
    if (array instanceof Array) return array

    return array.trim().split(_modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__.delimiter).map(parseFloat)
  }

  toArray() {
    return Array.prototype.concat.apply([], this)
  }

  toSet() {
    return new Set(this)
  }

  toString() {
    return this.join(' ')
  }

  // Flattens the array if needed
  valueOf() {
    const ret = []
    ret.push(...this)
    return ret
  }
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js":
/*!**************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/types/SVGNumber.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SVGNumber)
/* harmony export */ });
/* harmony import */ var _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/core/regex.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js");


// Module for unit conversions
class SVGNumber {
  // Initialize
  constructor(...args) {
    this.init(...args)
  }

  convert(unit) {
    return new SVGNumber(this.value, unit)
  }

  // Divide number
  divide(number) {
    number = new SVGNumber(number)
    return new SVGNumber(this / number, this.unit || number.unit)
  }

  init(value, unit) {
    unit = Array.isArray(value) ? value[1] : unit
    value = Array.isArray(value) ? value[0] : value

    // initialize defaults
    this.value = 0
    this.unit = unit || ''

    // parse value
    if (typeof value === 'number') {
      // ensure a valid numeric value
      this.value = isNaN(value)
        ? 0
        : !isFinite(value)
          ? value < 0
            ? -3.4e38
            : +3.4e38
          : value
    } else if (typeof value === 'string') {
      unit = value.match(_modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__.numberAndUnit)

      if (unit) {
        // make value numeric
        this.value = parseFloat(unit[1])

        // normalize
        if (unit[5] === '%') {
          this.value /= 100
        } else if (unit[5] === 's') {
          this.value *= 1000
        }

        // store unit
        this.unit = unit[5]
      }
    } else {
      if (value instanceof SVGNumber) {
        this.value = value.valueOf()
        this.unit = value.unit
      }
    }

    return this
  }

  // Subtract number
  minus(number) {
    number = new SVGNumber(number)
    return new SVGNumber(this - number, this.unit || number.unit)
  }

  // Add number
  plus(number) {
    number = new SVGNumber(number)
    return new SVGNumber(this + number, this.unit || number.unit)
  }

  // Multiply number
  times(number) {
    number = new SVGNumber(number)
    return new SVGNumber(this * number, this.unit || number.unit)
  }

  toArray() {
    return [this.value, this.unit]
  }

  toJSON() {
    return this.toString()
  }

  toString() {
    return (
      (this.unit === '%'
        ? ~~(this.value * 1e8) / 1e6
        : this.unit === 's'
          ? this.value / 1e3
          : this.value) + this.unit
    )
  }

  valueOf() {
    return this.value
  }
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/utils/adopter.js":
/*!************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/utils/adopter.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   adopt: () => (/* binding */ adopt),
/* harmony export */   assignNewId: () => (/* binding */ assignNewId),
/* harmony export */   create: () => (/* binding */ create),
/* harmony export */   eid: () => (/* binding */ eid),
/* harmony export */   extend: () => (/* binding */ extend),
/* harmony export */   getClass: () => (/* binding */ getClass),
/* harmony export */   makeInstance: () => (/* binding */ makeInstance),
/* harmony export */   mockAdopt: () => (/* binding */ mockAdopt),
/* harmony export */   nodeOrNew: () => (/* binding */ nodeOrNew),
/* harmony export */   register: () => (/* binding */ register),
/* harmony export */   root: () => (/* binding */ root),
/* harmony export */   wrapWithAttrCheck: () => (/* binding */ wrapWithAttrCheck)
/* harmony export */ });
/* harmony import */ var _methods_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./methods.js */ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils.js */ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js");
/* harmony import */ var _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../modules/core/namespaces.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/namespaces.js");
/* harmony import */ var _utils_window_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/window.js */ "./node_modules/@svgdotjs/svg.js/src/utils/window.js");
/* harmony import */ var _types_Base_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../types/Base.js */ "./node_modules/@svgdotjs/svg.js/src/types/Base.js");






const elements = {}
const root = '___SYMBOL___ROOT___'

// Method for element creation
function create(name, ns = _modules_core_namespaces_js__WEBPACK_IMPORTED_MODULE_2__.svg) {
  // create element
  return _utils_window_js__WEBPACK_IMPORTED_MODULE_3__.globals.document.createElementNS(ns, name)
}

function makeInstance(element, isHTML = false) {
  if (element instanceof _types_Base_js__WEBPACK_IMPORTED_MODULE_4__["default"]) return element

  if (typeof element === 'object') {
    return adopter(element)
  }

  if (element == null) {
    return new elements[root]()
  }

  if (typeof element === 'string' && element.trim().charAt(0) !== '<') {
    return adopter(_utils_window_js__WEBPACK_IMPORTED_MODULE_3__.globals.document.querySelector(element))
  }

  // Make sure, that HTML elements are created with the correct namespace
  const wrapper = isHTML ? _utils_window_js__WEBPACK_IMPORTED_MODULE_3__.globals.document.createElement('div') : create('svg')
  wrapper.innerHTML = element.trim()

  // We use firstElementChild here to skip potential comment nodes (#1339),
  element = adopter(wrapper.firstElementChild)

  // make sure, that element doesn't have its wrapper attached
  wrapper.removeChild(wrapper.firstElementChild)
  return element
}

function nodeOrNew(name, node) {
  return node &&
    (node instanceof _utils_window_js__WEBPACK_IMPORTED_MODULE_3__.globals.window.Node ||
      (node.ownerDocument &&
        node instanceof node.ownerDocument.defaultView.Node))
    ? node
    : create(name)
}

// Adopt existing svg elements
function adopt(node) {
  // check for presence of node
  if (!node) return null

  // make sure a node isn't already adopted
  if (node.instance instanceof _types_Base_js__WEBPACK_IMPORTED_MODULE_4__["default"]) return node.instance

  if (node.nodeName === '#document-fragment') {
    return new elements.Fragment(node)
  }

  // initialize variables
  let className = (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.capitalize)(node.nodeName || 'Dom')

  // Make sure that gradients are adopted correctly
  if (className === 'LinearGradient' || className === 'RadialGradient') {
    className = 'Gradient'

    // Fallback to Dom if element is not known
  } else if (!elements[className]) {
    className = 'Dom'
  }

  return new elements[className](node)
}

let adopter = adopt

function mockAdopt(mock = adopt) {
  adopter = mock
}

function register(element, name = element.name, asRoot = false) {
  elements[name] = element
  if (asRoot) elements[root] = element

  ;(0,_methods_js__WEBPACK_IMPORTED_MODULE_0__.addMethodNames)(Object.getOwnPropertyNames(element.prototype))

  return element
}

function getClass(name) {
  return elements[name]
}

// Element id sequence
let did = 1000

// Get next named element id
function eid(name) {
  return 'Svgjs' + (0,_utils_js__WEBPACK_IMPORTED_MODULE_1__.capitalize)(name) + did++
}

// Deep new id assignment
function assignNewId(node) {
  // do the same for SVG child nodes as well
  for (let i = node.children.length - 1; i >= 0; i--) {
    assignNewId(node.children[i])
  }

  if (node.id) {
    node.id = eid(node.nodeName)
    return node
  }

  return node
}

// Method for extending objects
function extend(modules, methods) {
  let key, i

  modules = Array.isArray(modules) ? modules : [modules]

  for (i = modules.length - 1; i >= 0; i--) {
    for (key in methods) {
      modules[i].prototype[key] = methods[key]
    }
  }
}

function wrapWithAttrCheck(fn) {
  return function (...args) {
    const o = args[args.length - 1]

    if (o && o.constructor === Object && !(o instanceof Array)) {
      return fn.apply(this, args.slice(0, -1)).attr(o)
    } else {
      return fn.apply(this, args)
    }
  }
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/utils/methods.js":
/*!************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/utils/methods.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   addMethodNames: () => (/* binding */ addMethodNames),
/* harmony export */   getMethodNames: () => (/* binding */ getMethodNames),
/* harmony export */   getMethodsFor: () => (/* binding */ getMethodsFor),
/* harmony export */   registerMethods: () => (/* binding */ registerMethods)
/* harmony export */ });
const methods = {}
const names = []

function registerMethods(name, m) {
  if (Array.isArray(name)) {
    for (const _name of name) {
      registerMethods(_name, m)
    }
    return
  }

  if (typeof name === 'object') {
    for (const _name in name) {
      registerMethods(_name, name[_name])
    }
    return
  }

  addMethodNames(Object.getOwnPropertyNames(m))
  methods[name] = Object.assign(methods[name] || {}, m)
}

function getMethodsFor(name) {
  return methods[name] || {}
}

function getMethodNames() {
  return [...new Set(names)]
}

function addMethodNames(_names) {
  names.push(..._names)
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/utils/pathParser.js":
/*!***************************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/utils/pathParser.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   pathParser: () => (/* binding */ pathParser)
/* harmony export */ });
/* harmony import */ var _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/core/regex.js */ "./node_modules/@svgdotjs/svg.js/src/modules/core/regex.js");
/* harmony import */ var _types_Point_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types/Point.js */ "./node_modules/@svgdotjs/svg.js/src/types/Point.js");



const segmentParameters = {
  M: 2,
  L: 2,
  H: 1,
  V: 1,
  C: 6,
  S: 4,
  Q: 4,
  T: 2,
  A: 7,
  Z: 0
}

const pathHandlers = {
  M: function (c, p, p0) {
    p.x = p0.x = c[0]
    p.y = p0.y = c[1]

    return ['M', p.x, p.y]
  },
  L: function (c, p) {
    p.x = c[0]
    p.y = c[1]
    return ['L', c[0], c[1]]
  },
  H: function (c, p) {
    p.x = c[0]
    return ['H', c[0]]
  },
  V: function (c, p) {
    p.y = c[0]
    return ['V', c[0]]
  },
  C: function (c, p) {
    p.x = c[4]
    p.y = c[5]
    return ['C', c[0], c[1], c[2], c[3], c[4], c[5]]
  },
  S: function (c, p) {
    p.x = c[2]
    p.y = c[3]
    return ['S', c[0], c[1], c[2], c[3]]
  },
  Q: function (c, p) {
    p.x = c[2]
    p.y = c[3]
    return ['Q', c[0], c[1], c[2], c[3]]
  },
  T: function (c, p) {
    p.x = c[0]
    p.y = c[1]
    return ['T', c[0], c[1]]
  },
  Z: function (c, p, p0) {
    p.x = p0.x
    p.y = p0.y
    return ['Z']
  },
  A: function (c, p) {
    p.x = c[5]
    p.y = c[6]
    return ['A', c[0], c[1], c[2], c[3], c[4], c[5], c[6]]
  }
}

const mlhvqtcsaz = 'mlhvqtcsaz'.split('')

for (let i = 0, il = mlhvqtcsaz.length; i < il; ++i) {
  pathHandlers[mlhvqtcsaz[i]] = (function (i) {
    return function (c, p, p0) {
      if (i === 'H') c[0] = c[0] + p.x
      else if (i === 'V') c[0] = c[0] + p.y
      else if (i === 'A') {
        c[5] = c[5] + p.x
        c[6] = c[6] + p.y
      } else {
        for (let j = 0, jl = c.length; j < jl; ++j) {
          c[j] = c[j] + (j % 2 ? p.y : p.x)
        }
      }

      return pathHandlers[i](c, p, p0)
    }
  })(mlhvqtcsaz[i].toUpperCase())
}

function makeAbsolut(parser) {
  const command = parser.segment[0]
  return pathHandlers[command](parser.segment.slice(1), parser.p, parser.p0)
}

function segmentComplete(parser) {
  return (
    parser.segment.length &&
    parser.segment.length - 1 ===
      segmentParameters[parser.segment[0].toUpperCase()]
  )
}

function startNewSegment(parser, token) {
  parser.inNumber && finalizeNumber(parser, false)
  const pathLetter = _modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__.isPathLetter.test(token)

  if (pathLetter) {
    parser.segment = [token]
  } else {
    const lastCommand = parser.lastCommand
    const small = lastCommand.toLowerCase()
    const isSmall = lastCommand === small
    parser.segment = [small === 'm' ? (isSmall ? 'l' : 'L') : lastCommand]
  }

  parser.inSegment = true
  parser.lastCommand = parser.segment[0]

  return pathLetter
}

function finalizeNumber(parser, inNumber) {
  if (!parser.inNumber) throw new Error('Parser Error')
  parser.number && parser.segment.push(parseFloat(parser.number))
  parser.inNumber = inNumber
  parser.number = ''
  parser.pointSeen = false
  parser.hasExponent = false

  if (segmentComplete(parser)) {
    finalizeSegment(parser)
  }
}

function finalizeSegment(parser) {
  parser.inSegment = false
  if (parser.absolute) {
    parser.segment = makeAbsolut(parser)
  }
  parser.segments.push(parser.segment)
}

function isArcFlag(parser) {
  if (!parser.segment.length) return false
  const isArc = parser.segment[0].toUpperCase() === 'A'
  const length = parser.segment.length

  return isArc && (length === 4 || length === 5)
}

function isExponential(parser) {
  return parser.lastToken.toUpperCase() === 'E'
}

const pathDelimiters = new Set([' ', ',', '\t', '\n', '\r', '\f'])
function pathParser(d, toAbsolute = true) {
  let index = 0
  let token = ''
  const parser = {
    segment: [],
    inNumber: false,
    number: '',
    lastToken: '',
    inSegment: false,
    segments: [],
    pointSeen: false,
    hasExponent: false,
    absolute: toAbsolute,
    p0: new _types_Point_js__WEBPACK_IMPORTED_MODULE_1__["default"](),
    p: new _types_Point_js__WEBPACK_IMPORTED_MODULE_1__["default"]()
  }

  while (((parser.lastToken = token), (token = d.charAt(index++)))) {
    if (!parser.inSegment) {
      if (startNewSegment(parser, token)) {
        continue
      }
    }

    if (token === '.') {
      if (parser.pointSeen || parser.hasExponent) {
        finalizeNumber(parser, false)
        --index
        continue
      }
      parser.inNumber = true
      parser.pointSeen = true
      parser.number += token
      continue
    }

    if (!isNaN(parseInt(token))) {
      if (parser.number === '0' || isArcFlag(parser)) {
        parser.inNumber = true
        parser.number = token
        finalizeNumber(parser, true)
        continue
      }

      parser.inNumber = true
      parser.number += token
      continue
    }

    if (pathDelimiters.has(token)) {
      if (parser.inNumber) {
        finalizeNumber(parser, false)
      }
      continue
    }

    if (token === '-' || token === '+') {
      if (parser.inNumber && !isExponential(parser)) {
        finalizeNumber(parser, false)
        --index
        continue
      }
      parser.number += token
      parser.inNumber = true
      continue
    }

    if (token.toUpperCase() === 'E') {
      parser.number += token
      parser.hasExponent = true
      continue
    }

    if (_modules_core_regex_js__WEBPACK_IMPORTED_MODULE_0__.isPathLetter.test(token)) {
      if (parser.inNumber) {
        finalizeNumber(parser, false)
      } else if (!segmentComplete(parser)) {
        throw new Error('parser Error')
      } else {
        finalizeSegment(parser)
      }
      --index
    }
  }

  if (parser.inNumber) {
    finalizeNumber(parser, false)
  }

  if (parser.inSegment && segmentComplete(parser)) {
    finalizeSegment(parser)
  }

  return parser.segments
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/utils/utils.js":
/*!**********************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/utils/utils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   capitalize: () => (/* binding */ capitalize),
/* harmony export */   degrees: () => (/* binding */ degrees),
/* harmony export */   filter: () => (/* binding */ filter),
/* harmony export */   getOrigin: () => (/* binding */ getOrigin),
/* harmony export */   isDescriptive: () => (/* binding */ isDescriptive),
/* harmony export */   map: () => (/* binding */ map),
/* harmony export */   proportionalSize: () => (/* binding */ proportionalSize),
/* harmony export */   radians: () => (/* binding */ radians),
/* harmony export */   unCamelCase: () => (/* binding */ unCamelCase),
/* harmony export */   writeDataToDom: () => (/* binding */ writeDataToDom)
/* harmony export */ });
// Map function
function map(array, block) {
  let i
  const il = array.length
  const result = []

  for (i = 0; i < il; i++) {
    result.push(block(array[i]))
  }

  return result
}

// Filter function
function filter(array, block) {
  let i
  const il = array.length
  const result = []

  for (i = 0; i < il; i++) {
    if (block(array[i])) {
      result.push(array[i])
    }
  }

  return result
}

// Degrees to radians
function radians(d) {
  return ((d % 360) * Math.PI) / 180
}

// Radians to degrees
function degrees(r) {
  return ((r * 180) / Math.PI) % 360
}

// Convert camel cased string to dash separated
function unCamelCase(s) {
  return s.replace(/([A-Z])/g, function (m, g) {
    return '-' + g.toLowerCase()
  })
}

// Capitalize first letter of a string
function capitalize(s) {
  return s.charAt(0).toUpperCase() + s.slice(1)
}

// Calculate proportional width and height values when necessary
function proportionalSize(element, width, height, box) {
  if (width == null || height == null) {
    box = box || element.bbox()

    if (width == null) {
      width = (box.width / box.height) * height
    } else if (height == null) {
      height = (box.height / box.width) * width
    }
  }

  return {
    width: width,
    height: height
  }
}

/**
 * This function adds support for string origins.
 * It searches for an origin in o.origin o.ox and o.originX.
 * This way, origin: {x: 'center', y: 50} can be passed as well as ox: 'center', oy: 50
 **/
function getOrigin(o, element) {
  const origin = o.origin
  // First check if origin is in ox or originX
  let ox = o.ox != null ? o.ox : o.originX != null ? o.originX : 'center'
  let oy = o.oy != null ? o.oy : o.originY != null ? o.originY : 'center'

  // Then check if origin was used and overwrite in that case
  if (origin != null) {
    ;[ox, oy] = Array.isArray(origin)
      ? origin
      : typeof origin === 'object'
        ? [origin.x, origin.y]
        : [origin, origin]
  }

  // Make sure to only call bbox when actually needed
  const condX = typeof ox === 'string'
  const condY = typeof oy === 'string'
  if (condX || condY) {
    const { height, width, x, y } = element.bbox()

    // And only overwrite if string was passed for this specific axis
    if (condX) {
      ox = ox.includes('left')
        ? x
        : ox.includes('right')
          ? x + width
          : x + width / 2
    }

    if (condY) {
      oy = oy.includes('top')
        ? y
        : oy.includes('bottom')
          ? y + height
          : y + height / 2
    }
  }

  // Return the origin as it is if it wasn't a string
  return [ox, oy]
}

const descriptiveElements = new Set(['desc', 'metadata', 'title'])
const isDescriptive = (element) =>
  descriptiveElements.has(element.nodeName)

const writeDataToDom = (element, data, defaults = {}) => {
  const cloned = { ...data }

  for (const key in cloned) {
    if (cloned[key].valueOf() === defaults[key]) {
      delete cloned[key]
    }
  }

  if (Object.keys(cloned).length) {
    element.node.setAttribute('data-svgjs', JSON.stringify(cloned)) // see #428
  } else {
    element.node.removeAttribute('data-svgjs')
    element.node.removeAttribute('svgjs:data')
  }
}


/***/ }),

/***/ "./node_modules/@svgdotjs/svg.js/src/utils/window.js":
/*!***********************************************************!*\
  !*** ./node_modules/@svgdotjs/svg.js/src/utils/window.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getWindow: () => (/* binding */ getWindow),
/* harmony export */   globals: () => (/* binding */ globals),
/* harmony export */   registerWindow: () => (/* binding */ registerWindow),
/* harmony export */   restoreWindow: () => (/* binding */ restoreWindow),
/* harmony export */   saveWindow: () => (/* binding */ saveWindow),
/* harmony export */   withWindow: () => (/* binding */ withWindow)
/* harmony export */ });
const globals = {
  window: typeof window === 'undefined' ? null : window,
  document: typeof document === 'undefined' ? null : document
}

function registerWindow(win = null, doc = null) {
  globals.window = win
  globals.document = doc
}

const save = {}

function saveWindow() {
  save.window = globals.window
  save.document = globals.document
}

function restoreWindow() {
  globals.window = save.window
  globals.document = save.document
}

function withWindow(win, fn) {
  saveWindow()
  registerWindow(win, win.document)
  fn(win, win.document)
  restoreWindow()
}

function getWindow() {
  return globals.window
}


/***/ }),

/***/ "./node_modules/lodash/_DataView.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_DataView.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;


/***/ }),

/***/ "./node_modules/lodash/_Hash.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_Hash.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hashClear = __webpack_require__(/*! ./_hashClear */ "./node_modules/lodash/_hashClear.js"),
    hashDelete = __webpack_require__(/*! ./_hashDelete */ "./node_modules/lodash/_hashDelete.js"),
    hashGet = __webpack_require__(/*! ./_hashGet */ "./node_modules/lodash/_hashGet.js"),
    hashHas = __webpack_require__(/*! ./_hashHas */ "./node_modules/lodash/_hashHas.js"),
    hashSet = __webpack_require__(/*! ./_hashSet */ "./node_modules/lodash/_hashSet.js");

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),

/***/ "./node_modules/lodash/_ListCache.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_ListCache.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var listCacheClear = __webpack_require__(/*! ./_listCacheClear */ "./node_modules/lodash/_listCacheClear.js"),
    listCacheDelete = __webpack_require__(/*! ./_listCacheDelete */ "./node_modules/lodash/_listCacheDelete.js"),
    listCacheGet = __webpack_require__(/*! ./_listCacheGet */ "./node_modules/lodash/_listCacheGet.js"),
    listCacheHas = __webpack_require__(/*! ./_listCacheHas */ "./node_modules/lodash/_listCacheHas.js"),
    listCacheSet = __webpack_require__(/*! ./_listCacheSet */ "./node_modules/lodash/_listCacheSet.js");

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),

/***/ "./node_modules/lodash/_Map.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Map.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),

/***/ "./node_modules/lodash/_MapCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_MapCache.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mapCacheClear = __webpack_require__(/*! ./_mapCacheClear */ "./node_modules/lodash/_mapCacheClear.js"),
    mapCacheDelete = __webpack_require__(/*! ./_mapCacheDelete */ "./node_modules/lodash/_mapCacheDelete.js"),
    mapCacheGet = __webpack_require__(/*! ./_mapCacheGet */ "./node_modules/lodash/_mapCacheGet.js"),
    mapCacheHas = __webpack_require__(/*! ./_mapCacheHas */ "./node_modules/lodash/_mapCacheHas.js"),
    mapCacheSet = __webpack_require__(/*! ./_mapCacheSet */ "./node_modules/lodash/_mapCacheSet.js");

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),

/***/ "./node_modules/lodash/_Promise.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_Promise.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;


/***/ }),

/***/ "./node_modules/lodash/_Set.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Set.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;


/***/ }),

/***/ "./node_modules/lodash/_SetCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_SetCache.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js"),
    setCacheAdd = __webpack_require__(/*! ./_setCacheAdd */ "./node_modules/lodash/_setCacheAdd.js"),
    setCacheHas = __webpack_require__(/*! ./_setCacheHas */ "./node_modules/lodash/_setCacheHas.js");

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;


/***/ }),

/***/ "./node_modules/lodash/_Stack.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_Stack.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    stackClear = __webpack_require__(/*! ./_stackClear */ "./node_modules/lodash/_stackClear.js"),
    stackDelete = __webpack_require__(/*! ./_stackDelete */ "./node_modules/lodash/_stackDelete.js"),
    stackGet = __webpack_require__(/*! ./_stackGet */ "./node_modules/lodash/_stackGet.js"),
    stackHas = __webpack_require__(/*! ./_stackHas */ "./node_modules/lodash/_stackHas.js"),
    stackSet = __webpack_require__(/*! ./_stackSet */ "./node_modules/lodash/_stackSet.js");

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;


/***/ }),

/***/ "./node_modules/lodash/_Symbol.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ "./node_modules/lodash/_Uint8Array.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_Uint8Array.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),

/***/ "./node_modules/lodash/_WeakMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_WeakMap.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;


/***/ }),

/***/ "./node_modules/lodash/_apply.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_apply.js ***!
  \***************************************/
/***/ ((module) => {

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;


/***/ }),

/***/ "./node_modules/lodash/_arrayEach.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayEach.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;


/***/ }),

/***/ "./node_modules/lodash/_arrayFilter.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_arrayFilter.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),

/***/ "./node_modules/lodash/_arrayLikeKeys.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_arrayLikeKeys.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseTimes = __webpack_require__(/*! ./_baseTimes */ "./node_modules/lodash/_baseTimes.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;


/***/ }),

/***/ "./node_modules/lodash/_arrayMap.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_arrayMap.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),

/***/ "./node_modules/lodash/_arrayPush.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayPush.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),

/***/ "./node_modules/lodash/_arraySome.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arraySome.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;


/***/ }),

/***/ "./node_modules/lodash/_assignMergeValue.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_assignMergeValue.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js"),
    eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignMergeValue;


/***/ }),

/***/ "./node_modules/lodash/_assignValue.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_assignValue.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js"),
    eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),

/***/ "./node_modules/lodash/_assocIndexOf.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_assocIndexOf.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),

/***/ "./node_modules/lodash/_baseAssign.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseAssign.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;


/***/ }),

/***/ "./node_modules/lodash/_baseAssignIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseAssignIn.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;


/***/ }),

/***/ "./node_modules/lodash/_baseAssignValue.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseAssignValue.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defineProperty = __webpack_require__(/*! ./_defineProperty */ "./node_modules/lodash/_defineProperty.js");

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),

/***/ "./node_modules/lodash/_baseClone.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseClone.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    arrayEach = __webpack_require__(/*! ./_arrayEach */ "./node_modules/lodash/_arrayEach.js"),
    assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    baseAssign = __webpack_require__(/*! ./_baseAssign */ "./node_modules/lodash/_baseAssign.js"),
    baseAssignIn = __webpack_require__(/*! ./_baseAssignIn */ "./node_modules/lodash/_baseAssignIn.js"),
    cloneBuffer = __webpack_require__(/*! ./_cloneBuffer */ "./node_modules/lodash/_cloneBuffer.js"),
    copyArray = __webpack_require__(/*! ./_copyArray */ "./node_modules/lodash/_copyArray.js"),
    copySymbols = __webpack_require__(/*! ./_copySymbols */ "./node_modules/lodash/_copySymbols.js"),
    copySymbolsIn = __webpack_require__(/*! ./_copySymbolsIn */ "./node_modules/lodash/_copySymbolsIn.js"),
    getAllKeys = __webpack_require__(/*! ./_getAllKeys */ "./node_modules/lodash/_getAllKeys.js"),
    getAllKeysIn = __webpack_require__(/*! ./_getAllKeysIn */ "./node_modules/lodash/_getAllKeysIn.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    initCloneArray = __webpack_require__(/*! ./_initCloneArray */ "./node_modules/lodash/_initCloneArray.js"),
    initCloneByTag = __webpack_require__(/*! ./_initCloneByTag */ "./node_modules/lodash/_initCloneByTag.js"),
    initCloneObject = __webpack_require__(/*! ./_initCloneObject */ "./node_modules/lodash/_initCloneObject.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isMap = __webpack_require__(/*! ./isMap */ "./node_modules/lodash/isMap.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isSet = __webpack_require__(/*! ./isSet */ "./node_modules/lodash/isSet.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;


/***/ }),

/***/ "./node_modules/lodash/_baseCreate.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseCreate.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;


/***/ }),

/***/ "./node_modules/lodash/_baseFor.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseFor.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createBaseFor = __webpack_require__(/*! ./_createBaseFor */ "./node_modules/lodash/_createBaseFor.js");

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;


/***/ }),

/***/ "./node_modules/lodash/_baseGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseGet.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),

/***/ "./node_modules/lodash/_baseGetAllKeys.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_baseGetAllKeys.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ "./node_modules/lodash/_arrayPush.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;


/***/ }),

/***/ "./node_modules/lodash/_baseGetTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ "./node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__(/*! ./_objectToString */ "./node_modules/lodash/_objectToString.js");

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ "./node_modules/lodash/_baseIsArguments.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsArguments.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),

/***/ "./node_modules/lodash/_baseIsEqual.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIsEqual.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqualDeep = __webpack_require__(/*! ./_baseIsEqualDeep */ "./node_modules/lodash/_baseIsEqualDeep.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;


/***/ }),

/***/ "./node_modules/lodash/_baseIsEqualDeep.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsEqualDeep.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    equalArrays = __webpack_require__(/*! ./_equalArrays */ "./node_modules/lodash/_equalArrays.js"),
    equalByTag = __webpack_require__(/*! ./_equalByTag */ "./node_modules/lodash/_equalByTag.js"),
    equalObjects = __webpack_require__(/*! ./_equalObjects */ "./node_modules/lodash/_equalObjects.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;


/***/ }),

/***/ "./node_modules/lodash/_baseIsMap.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsMap.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike(value) && getTag(value) == mapTag;
}

module.exports = baseIsMap;


/***/ }),

/***/ "./node_modules/lodash/_baseIsNative.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIsNative.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isMasked = __webpack_require__(/*! ./_isMasked */ "./node_modules/lodash/_isMasked.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    toSource = __webpack_require__(/*! ./_toSource */ "./node_modules/lodash/_toSource.js");

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),

/***/ "./node_modules/lodash/_baseIsSet.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsSet.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var setTag = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike(value) && getTag(value) == setTag;
}

module.exports = baseIsSet;


/***/ }),

/***/ "./node_modules/lodash/_baseIsTypedArray.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_baseIsTypedArray.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;


/***/ }),

/***/ "./node_modules/lodash/_baseKeys.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseKeys.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    nativeKeys = __webpack_require__(/*! ./_nativeKeys */ "./node_modules/lodash/_nativeKeys.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;


/***/ }),

/***/ "./node_modules/lodash/_baseKeysIn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseKeysIn.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    nativeKeysIn = __webpack_require__(/*! ./_nativeKeysIn */ "./node_modules/lodash/_nativeKeysIn.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;


/***/ }),

/***/ "./node_modules/lodash/_baseMerge.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseMerge.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    assignMergeValue = __webpack_require__(/*! ./_assignMergeValue */ "./node_modules/lodash/_assignMergeValue.js"),
    baseFor = __webpack_require__(/*! ./_baseFor */ "./node_modules/lodash/_baseFor.js"),
    baseMergeDeep = __webpack_require__(/*! ./_baseMergeDeep */ "./node_modules/lodash/_baseMergeDeep.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js"),
    safeGet = __webpack_require__(/*! ./_safeGet */ "./node_modules/lodash/_safeGet.js");

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack);
    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

module.exports = baseMerge;


/***/ }),

/***/ "./node_modules/lodash/_baseMergeDeep.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_baseMergeDeep.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assignMergeValue = __webpack_require__(/*! ./_assignMergeValue */ "./node_modules/lodash/_assignMergeValue.js"),
    cloneBuffer = __webpack_require__(/*! ./_cloneBuffer */ "./node_modules/lodash/_cloneBuffer.js"),
    cloneTypedArray = __webpack_require__(/*! ./_cloneTypedArray */ "./node_modules/lodash/_cloneTypedArray.js"),
    copyArray = __webpack_require__(/*! ./_copyArray */ "./node_modules/lodash/_copyArray.js"),
    initCloneObject = __webpack_require__(/*! ./_initCloneObject */ "./node_modules/lodash/_initCloneObject.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isArrayLikeObject = __webpack_require__(/*! ./isArrayLikeObject */ "./node_modules/lodash/isArrayLikeObject.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isPlainObject = __webpack_require__(/*! ./isPlainObject */ "./node_modules/lodash/isPlainObject.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js"),
    safeGet = __webpack_require__(/*! ./_safeGet */ "./node_modules/lodash/_safeGet.js"),
    toPlainObject = __webpack_require__(/*! ./toPlainObject */ "./node_modules/lodash/toPlainObject.js");

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

module.exports = baseMergeDeep;


/***/ }),

/***/ "./node_modules/lodash/_baseRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseRest.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js"),
    overRest = __webpack_require__(/*! ./_overRest */ "./node_modules/lodash/_overRest.js"),
    setToString = __webpack_require__(/*! ./_setToString */ "./node_modules/lodash/_setToString.js");

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;


/***/ }),

/***/ "./node_modules/lodash/_baseSetToString.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseSetToString.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var constant = __webpack_require__(/*! ./constant */ "./node_modules/lodash/constant.js"),
    defineProperty = __webpack_require__(/*! ./_defineProperty */ "./node_modules/lodash/_defineProperty.js"),
    identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js");

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;


/***/ }),

/***/ "./node_modules/lodash/_baseTimes.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseTimes.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;


/***/ }),

/***/ "./node_modules/lodash/_baseToString.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseToString.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),

/***/ "./node_modules/lodash/_baseUnary.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseUnary.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),

/***/ "./node_modules/lodash/_cacheHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_cacheHas.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;


/***/ }),

/***/ "./node_modules/lodash/_castPath.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_castPath.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isKey = __webpack_require__(/*! ./_isKey */ "./node_modules/lodash/_isKey.js"),
    stringToPath = __webpack_require__(/*! ./_stringToPath */ "./node_modules/lodash/_stringToPath.js"),
    toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js");

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),

/***/ "./node_modules/lodash/_cloneArrayBuffer.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_cloneArrayBuffer.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Uint8Array = __webpack_require__(/*! ./_Uint8Array */ "./node_modules/lodash/_Uint8Array.js");

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;


/***/ }),

/***/ "./node_modules/lodash/_cloneBuffer.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneBuffer.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;


/***/ }),

/***/ "./node_modules/lodash/_cloneDataView.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_cloneDataView.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js");

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;


/***/ }),

/***/ "./node_modules/lodash/_cloneRegExp.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneRegExp.js ***!
  \*********************************************/
/***/ ((module) => {

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;


/***/ }),

/***/ "./node_modules/lodash/_cloneSymbol.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneSymbol.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js");

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;


/***/ }),

/***/ "./node_modules/lodash/_cloneTypedArray.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_cloneTypedArray.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js");

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;


/***/ }),

/***/ "./node_modules/lodash/_copyArray.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_copyArray.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;


/***/ }),

/***/ "./node_modules/lodash/_copyObject.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_copyObject.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js");

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;


/***/ }),

/***/ "./node_modules/lodash/_copySymbols.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_copySymbols.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js");

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;


/***/ }),

/***/ "./node_modules/lodash/_copySymbolsIn.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_copySymbolsIn.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    getSymbolsIn = __webpack_require__(/*! ./_getSymbolsIn */ "./node_modules/lodash/_getSymbolsIn.js");

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;


/***/ }),

/***/ "./node_modules/lodash/_coreJsData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_coreJsData.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),

/***/ "./node_modules/lodash/_createAssigner.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_createAssigner.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseRest = __webpack_require__(/*! ./_baseRest */ "./node_modules/lodash/_baseRest.js"),
    isIterateeCall = __webpack_require__(/*! ./_isIterateeCall */ "./node_modules/lodash/_isIterateeCall.js");

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;


/***/ }),

/***/ "./node_modules/lodash/_createBaseFor.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_createBaseFor.js ***!
  \***********************************************/
/***/ ((module) => {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;


/***/ }),

/***/ "./node_modules/lodash/_defineProperty.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_defineProperty.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js");

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),

/***/ "./node_modules/lodash/_equalArrays.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_equalArrays.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var SetCache = __webpack_require__(/*! ./_SetCache */ "./node_modules/lodash/_SetCache.js"),
    arraySome = __webpack_require__(/*! ./_arraySome */ "./node_modules/lodash/_arraySome.js"),
    cacheHas = __webpack_require__(/*! ./_cacheHas */ "./node_modules/lodash/_cacheHas.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;


/***/ }),

/***/ "./node_modules/lodash/_equalByTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_equalByTag.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    Uint8Array = __webpack_require__(/*! ./_Uint8Array */ "./node_modules/lodash/_Uint8Array.js"),
    eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js"),
    equalArrays = __webpack_require__(/*! ./_equalArrays */ "./node_modules/lodash/_equalArrays.js"),
    mapToArray = __webpack_require__(/*! ./_mapToArray */ "./node_modules/lodash/_mapToArray.js"),
    setToArray = __webpack_require__(/*! ./_setToArray */ "./node_modules/lodash/_setToArray.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;


/***/ }),

/***/ "./node_modules/lodash/_equalObjects.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_equalObjects.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getAllKeys = __webpack_require__(/*! ./_getAllKeys */ "./node_modules/lodash/_getAllKeys.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;


/***/ }),

/***/ "./node_modules/lodash/_freeGlobal.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

module.exports = freeGlobal;


/***/ }),

/***/ "./node_modules/lodash/_getAllKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getAllKeys.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ "./node_modules/lodash/_baseGetAllKeys.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;


/***/ }),

/***/ "./node_modules/lodash/_getAllKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getAllKeysIn.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ "./node_modules/lodash/_baseGetAllKeys.js"),
    getSymbolsIn = __webpack_require__(/*! ./_getSymbolsIn */ "./node_modules/lodash/_getSymbolsIn.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;


/***/ }),

/***/ "./node_modules/lodash/_getMapData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getMapData.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isKeyable = __webpack_require__(/*! ./_isKeyable */ "./node_modules/lodash/_isKeyable.js");

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),

/***/ "./node_modules/lodash/_getNative.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getNative.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsNative = __webpack_require__(/*! ./_baseIsNative */ "./node_modules/lodash/_baseIsNative.js"),
    getValue = __webpack_require__(/*! ./_getValue */ "./node_modules/lodash/_getValue.js");

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),

/***/ "./node_modules/lodash/_getPrototype.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getPrototype.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;


/***/ }),

/***/ "./node_modules/lodash/_getRawTag.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getRawTag.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ "./node_modules/lodash/_getSymbols.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getSymbols.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayFilter = __webpack_require__(/*! ./_arrayFilter */ "./node_modules/lodash/_arrayFilter.js"),
    stubArray = __webpack_require__(/*! ./stubArray */ "./node_modules/lodash/stubArray.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;


/***/ }),

/***/ "./node_modules/lodash/_getSymbolsIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getSymbolsIn.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ "./node_modules/lodash/_arrayPush.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js"),
    stubArray = __webpack_require__(/*! ./stubArray */ "./node_modules/lodash/stubArray.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;


/***/ }),

/***/ "./node_modules/lodash/_getTag.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_getTag.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DataView = __webpack_require__(/*! ./_DataView */ "./node_modules/lodash/_DataView.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js"),
    Promise = __webpack_require__(/*! ./_Promise */ "./node_modules/lodash/_Promise.js"),
    Set = __webpack_require__(/*! ./_Set */ "./node_modules/lodash/_Set.js"),
    WeakMap = __webpack_require__(/*! ./_WeakMap */ "./node_modules/lodash/_WeakMap.js"),
    baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    toSource = __webpack_require__(/*! ./_toSource */ "./node_modules/lodash/_toSource.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;


/***/ }),

/***/ "./node_modules/lodash/_getValue.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_getValue.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),

/***/ "./node_modules/lodash/_hashClear.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_hashClear.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),

/***/ "./node_modules/lodash/_hashDelete.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_hashDelete.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),

/***/ "./node_modules/lodash/_hashGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashGet.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),

/***/ "./node_modules/lodash/_hashHas.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashHas.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),

/***/ "./node_modules/lodash/_hashSet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashSet.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),

/***/ "./node_modules/lodash/_initCloneArray.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_initCloneArray.js ***!
  \************************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;


/***/ }),

/***/ "./node_modules/lodash/_initCloneByTag.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_initCloneByTag.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js"),
    cloneDataView = __webpack_require__(/*! ./_cloneDataView */ "./node_modules/lodash/_cloneDataView.js"),
    cloneRegExp = __webpack_require__(/*! ./_cloneRegExp */ "./node_modules/lodash/_cloneRegExp.js"),
    cloneSymbol = __webpack_require__(/*! ./_cloneSymbol */ "./node_modules/lodash/_cloneSymbol.js"),
    cloneTypedArray = __webpack_require__(/*! ./_cloneTypedArray */ "./node_modules/lodash/_cloneTypedArray.js");

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return new Ctor;

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return new Ctor;

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;


/***/ }),

/***/ "./node_modules/lodash/_initCloneObject.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_initCloneObject.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseCreate = __webpack_require__(/*! ./_baseCreate */ "./node_modules/lodash/_baseCreate.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js");

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;


/***/ }),

/***/ "./node_modules/lodash/_isIndex.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_isIndex.js ***!
  \*****************************************/
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),

/***/ "./node_modules/lodash/_isIterateeCall.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_isIterateeCall.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;


/***/ }),

/***/ "./node_modules/lodash/_isKey.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_isKey.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),

/***/ "./node_modules/lodash/_isKeyable.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_isKeyable.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),

/***/ "./node_modules/lodash/_isMasked.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_isMasked.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var coreJsData = __webpack_require__(/*! ./_coreJsData */ "./node_modules/lodash/_coreJsData.js");

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),

/***/ "./node_modules/lodash/_isPrototype.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_isPrototype.js ***!
  \*********************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;


/***/ }),

/***/ "./node_modules/lodash/_listCacheClear.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_listCacheClear.js ***!
  \************************************************/
/***/ ((module) => {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),

/***/ "./node_modules/lodash/_listCacheDelete.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_listCacheDelete.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),

/***/ "./node_modules/lodash/_listCacheGet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheGet.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),

/***/ "./node_modules/lodash/_listCacheHas.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheHas.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),

/***/ "./node_modules/lodash/_listCacheSet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheSet.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheClear.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_mapCacheClear.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Hash = __webpack_require__(/*! ./_Hash */ "./node_modules/lodash/_Hash.js"),
    ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js");

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheDelete.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_mapCacheDelete.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheGet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheGet.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheHas.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheSet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheSet.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),

/***/ "./node_modules/lodash/_mapToArray.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_mapToArray.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;


/***/ }),

/***/ "./node_modules/lodash/_memoizeCapped.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_memoizeCapped.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var memoize = __webpack_require__(/*! ./memoize */ "./node_modules/lodash/memoize.js");

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;


/***/ }),

/***/ "./node_modules/lodash/_nativeCreate.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeCreate.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js");

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),

/***/ "./node_modules/lodash/_nativeKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_nativeKeys.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),

/***/ "./node_modules/lodash/_nativeKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeKeysIn.js ***!
  \**********************************************/
/***/ ((module) => {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;


/***/ }),

/***/ "./node_modules/lodash/_nodeUtil.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_nodeUtil.js ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;


/***/ }),

/***/ "./node_modules/lodash/_objectToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_objectToString.js ***!
  \************************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "./node_modules/lodash/_overArg.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_overArg.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),

/***/ "./node_modules/lodash/_overRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_overRest.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var apply = __webpack_require__(/*! ./_apply */ "./node_modules/lodash/_apply.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;


/***/ }),

/***/ "./node_modules/lodash/_root.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ "./node_modules/lodash/_safeGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_safeGet.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

module.exports = safeGet;


/***/ }),

/***/ "./node_modules/lodash/_setCacheAdd.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheAdd.js ***!
  \*********************************************/
/***/ ((module) => {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;


/***/ }),

/***/ "./node_modules/lodash/_setCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheHas.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;


/***/ }),

/***/ "./node_modules/lodash/_setToArray.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_setToArray.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;


/***/ }),

/***/ "./node_modules/lodash/_setToString.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setToString.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseSetToString = __webpack_require__(/*! ./_baseSetToString */ "./node_modules/lodash/_baseSetToString.js"),
    shortOut = __webpack_require__(/*! ./_shortOut */ "./node_modules/lodash/_shortOut.js");

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;


/***/ }),

/***/ "./node_modules/lodash/_shortOut.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_shortOut.js ***!
  \******************************************/
/***/ ((module) => {

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;


/***/ }),

/***/ "./node_modules/lodash/_stackClear.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_stackClear.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js");

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;


/***/ }),

/***/ "./node_modules/lodash/_stackDelete.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_stackDelete.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;


/***/ }),

/***/ "./node_modules/lodash/_stackGet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackGet.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;


/***/ }),

/***/ "./node_modules/lodash/_stackHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackHas.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;


/***/ }),

/***/ "./node_modules/lodash/_stackSet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackSet.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js"),
    MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js");

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;


/***/ }),

/***/ "./node_modules/lodash/_stringToPath.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_stringToPath.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var memoizeCapped = __webpack_require__(/*! ./_memoizeCapped */ "./node_modules/lodash/_memoizeCapped.js");

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),

/***/ "./node_modules/lodash/_toKey.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_toKey.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;


/***/ }),

/***/ "./node_modules/lodash/_toSource.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_toSource.js ***!
  \******************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),

/***/ "./node_modules/lodash/cloneDeep.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/cloneDeep.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseClone = __webpack_require__(/*! ./_baseClone */ "./node_modules/lodash/_baseClone.js");

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

module.exports = cloneDeep;


/***/ }),

/***/ "./node_modules/lodash/constant.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/constant.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;


/***/ }),

/***/ "./node_modules/lodash/eq.js":
/*!***********************************!*\
  !*** ./node_modules/lodash/eq.js ***!
  \***********************************/
/***/ ((module) => {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),

/***/ "./node_modules/lodash/get.js":
/*!************************************!*\
  !*** ./node_modules/lodash/get.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__(/*! ./_baseGet */ "./node_modules/lodash/_baseGet.js");

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ }),

/***/ "./node_modules/lodash/identity.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/identity.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),

/***/ "./node_modules/lodash/isArguments.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArguments.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsArguments = __webpack_require__(/*! ./_baseIsArguments */ "./node_modules/lodash/_baseIsArguments.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),

/***/ "./node_modules/lodash/isArray.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isArray.js ***!
  \****************************************/
/***/ ((module) => {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),

/***/ "./node_modules/lodash/isArrayLike.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArrayLike.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js");

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),

/***/ "./node_modules/lodash/isArrayLikeObject.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/isArrayLikeObject.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;


/***/ }),

/***/ "./node_modules/lodash/isBuffer.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isBuffer.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js"),
    stubFalse = __webpack_require__(/*! ./stubFalse */ "./node_modules/lodash/stubFalse.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;


/***/ }),

/***/ "./node_modules/lodash/isEqual.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isEqual.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ "./node_modules/lodash/_baseIsEqual.js");

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;


/***/ }),

/***/ "./node_modules/lodash/isFunction.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/isFunction.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),

/***/ "./node_modules/lodash/isLength.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isLength.js ***!
  \*****************************************/
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),

/***/ "./node_modules/lodash/isMap.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isMap.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsMap = __webpack_require__(/*! ./_baseIsMap */ "./node_modules/lodash/_baseIsMap.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsMap = nodeUtil && nodeUtil.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

module.exports = isMap;


/***/ }),

/***/ "./node_modules/lodash/isObject.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ "./node_modules/lodash/isObjectLike.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isObjectLike.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ "./node_modules/lodash/isPlainObject.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/isPlainObject.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var objectTag = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;


/***/ }),

/***/ "./node_modules/lodash/isSet.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isSet.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsSet = __webpack_require__(/*! ./_baseIsSet */ "./node_modules/lodash/_baseIsSet.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

module.exports = isSet;


/***/ }),

/***/ "./node_modules/lodash/isSymbol.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isSymbol.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ "./node_modules/lodash/isTypedArray.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isTypedArray.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsTypedArray = __webpack_require__(/*! ./_baseIsTypedArray */ "./node_modules/lodash/_baseIsTypedArray.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;


/***/ }),

/***/ "./node_modules/lodash/keys.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/keys.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ "./node_modules/lodash/_arrayLikeKeys.js"),
    baseKeys = __webpack_require__(/*! ./_baseKeys */ "./node_modules/lodash/_baseKeys.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;


/***/ }),

/***/ "./node_modules/lodash/keysIn.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/keysIn.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ "./node_modules/lodash/_arrayLikeKeys.js"),
    baseKeysIn = __webpack_require__(/*! ./_baseKeysIn */ "./node_modules/lodash/_baseKeysIn.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;


/***/ }),

/***/ "./node_modules/lodash/memoize.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/memoize.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;


/***/ }),

/***/ "./node_modules/lodash/merge.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/merge.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseMerge = __webpack_require__(/*! ./_baseMerge */ "./node_modules/lodash/_baseMerge.js"),
    createAssigner = __webpack_require__(/*! ./_createAssigner */ "./node_modules/lodash/_createAssigner.js");

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

module.exports = merge;


/***/ }),

/***/ "./node_modules/lodash/stubArray.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubArray.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),

/***/ "./node_modules/lodash/stubFalse.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubFalse.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ "./node_modules/lodash/toPlainObject.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/toPlainObject.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

module.exports = toPlainObject;


/***/ }),

/***/ "./node_modules/lodash/toString.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toString.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseToString = __webpack_require__(/*! ./_baseToString */ "./node_modules/lodash/_baseToString.js");

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/atp-synthase.svg":
/*!*************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/atp-synthase.svg ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"atp-synthase\" transform=\"translate(0, 0)\">\n    <g id=\"base\">\n      <g id=\"i-subunit\">\n        <path d=\"M1034.112,291.597 L1062.208,291.597 C1066.083,291.597 1069.225,295.178 1069.225,299.597 L1069.225,382.957 C1069.225,387.375 1066.083,390.957 1062.208,390.957 L1034.112,390.957 C1030.237,390.957 1027.096,387.375 1027.096,382.957 L1027.096,299.597 C1027.096,295.178 1030.237,291.597 1034.112,291.597 z\" fill=\"#C7B29E\"/>\n        <path d=\"M1034.112,291.597 L1062.208,291.597 C1066.083,291.597 1069.225,295.178 1069.225,299.597 L1069.225,382.957 C1069.225,387.375 1066.083,390.957 1062.208,390.957 L1034.112,390.957 C1030.237,390.957 1027.096,387.375 1027.096,382.957 L1027.096,299.597 C1027.096,295.178 1030.237,291.597 1034.112,291.597 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n      <g id=\"gamma-subunit\">\n        <path d=\"M1090.885,319.445 C1083.062,319.445 1076.72,301.671 1076.72,279.745 C1076.72,257.819 1083.062,240.045 1090.885,240.045 C1098.707,240.045 1105.049,257.819 1105.049,279.745 C1105.049,301.671 1098.707,319.445 1090.885,319.445 z\" fill=\"#F6E8D7\"/>\n        <path d=\"M1090.885,319.445 C1083.062,319.445 1076.72,301.671 1076.72,279.745 C1076.72,257.819 1083.062,240.045 1090.885,240.045 C1098.707,240.045 1105.049,257.819 1105.049,279.745 C1105.049,301.671 1098.707,319.445 1090.885,319.445 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n      <g id=\"ii-subunit\">\n        <path d=\"M1027.424,383.195 C1021.48,383.195 1016.661,341.25 1016.661,289.508 C1016.661,237.766 1021.48,195.82 1027.424,195.82 C1033.369,195.82 1038.188,237.766 1038.188,289.508 C1038.188,341.25 1033.369,383.195 1027.424,383.195 z\" fill=\"#E4D3BD\"/>\n        <path d=\"M1027.424,383.195 C1021.48,383.195 1016.661,341.25 1016.661,289.508 C1016.661,237.766 1021.48,195.82 1027.424,195.82 C1033.369,195.82 1038.188,237.766 1038.188,289.508 C1038.188,341.25 1033.369,383.195 1027.424,383.195 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n      <g id=\"c-ring\">\n        <path d=\"M1116.085,285.483 C1121.111,285.483 1125.185,310.134 1125.185,340.541 C1125.185,370.949 1121.111,395.6 1116.085,395.6 C1111.807,394.652 1110.306,383.081 1109.785,379.931 C1109.086,384.096 1108.368,388.379 1106.614,392.259 C1105.992,393.635 1105.138,395.347 1103.485,395.6 C1099.207,394.652 1097.706,383.081 1097.185,379.931 C1096.486,384.096 1095.768,388.379 1094.014,392.259 C1093.392,393.635 1092.538,395.347 1090.885,395.6 C1086.607,394.652 1085.106,383.081 1084.585,379.931 C1083.886,384.096 1083.168,388.379 1081.414,392.259 C1080.792,393.635 1079.938,395.347 1078.285,395.6 C1074.007,394.652 1072.505,383.078 1071.985,379.928 C1071.286,384.094 1070.567,388.378 1068.813,392.259 C1068.191,393.635 1067.337,395.347 1065.684,395.6 C1060.658,395.6 1056.584,370.949 1056.584,340.541 C1056.584,310.134 1060.658,285.483 1065.684,285.483 C1069.962,286.43 1071.464,298.005 1071.985,301.155 C1072.683,296.989 1073.402,292.705 1075.156,288.824 C1075.778,287.448 1076.632,285.736 1078.285,285.483 C1082.562,286.43 1084.065,298.003 1084.585,301.152 C1085.284,296.987 1086.002,292.704 1087.756,288.824 C1088.378,287.448 1089.232,285.736 1090.885,285.483 C1095.162,286.43 1096.665,298.003 1097.185,301.152 C1097.884,296.987 1098.602,292.704 1100.356,288.824 C1100.978,287.448 1101.832,285.736 1103.485,285.483 C1107.762,286.43 1109.265,298.003 1109.785,301.152 C1110.484,296.987 1111.202,292.704 1112.956,288.824 C1113.578,287.448 1114.432,285.736 1116.085,285.483 z\" fill=\"#E4D3BD\"/>\n        <path d=\"M1116.085,285.483 C1121.111,285.483 1125.185,310.134 1125.185,340.541 C1125.185,370.949 1121.111,395.6 1116.085,395.6 C1111.807,394.652 1110.306,383.081 1109.785,379.931 C1109.086,384.096 1108.368,388.379 1106.614,392.259 C1105.992,393.635 1105.138,395.347 1103.485,395.6 C1099.207,394.652 1097.706,383.081 1097.185,379.931 C1096.486,384.096 1095.768,388.379 1094.014,392.259 C1093.392,393.635 1092.538,395.347 1090.885,395.6 C1086.607,394.652 1085.106,383.081 1084.585,379.931 C1083.886,384.096 1083.168,388.379 1081.414,392.259 C1080.792,393.635 1079.938,395.347 1078.285,395.6 C1074.007,394.652 1072.505,383.078 1071.985,379.928 C1071.286,384.094 1070.567,388.378 1068.813,392.259 C1068.191,393.635 1067.337,395.347 1065.684,395.6 C1060.658,395.6 1056.584,370.949 1056.584,340.541 C1056.584,310.134 1060.658,285.483 1065.684,285.483 C1069.962,286.43 1071.464,298.005 1071.985,301.155 C1072.683,296.989 1073.402,292.705 1075.156,288.824 C1075.778,287.448 1076.632,285.736 1078.285,285.483 C1082.562,286.43 1084.065,298.003 1084.585,301.152 C1085.284,296.987 1086.002,292.704 1087.756,288.824 C1088.378,287.448 1089.232,285.736 1090.885,285.483 C1095.162,286.43 1096.665,298.003 1097.185,301.152 C1097.884,296.987 1098.602,292.704 1100.356,288.824 C1100.978,287.448 1101.832,285.736 1103.485,285.483 C1107.762,286.43 1109.265,298.003 1109.785,301.152 C1110.484,296.987 1111.202,292.704 1112.956,288.824 C1113.578,287.448 1114.432,285.736 1116.085,285.483 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n    </g>\n    <g id=\"head\">\n      <g id=\"beta-subunit\">\n        <path d=\"M1122.002,258.488 C1108.427,258.488 1097.423,240.332 1097.423,217.937 C1097.423,195.542 1108.427,177.386 1122.002,177.386 C1135.577,177.386 1146.581,195.542 1146.581,217.937 C1146.581,240.332 1135.577,258.488 1122.002,258.488 z\" fill=\"#C7B29E\"/>\n        <path d=\"M1122.002,258.488 C1108.427,258.488 1097.423,240.332 1097.423,217.937 C1097.423,195.542 1108.427,177.386 1122.002,177.386 C1135.577,177.386 1146.581,195.542 1146.581,217.937 C1146.581,240.332 1135.577,258.488 1122.002,258.488 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n      <g id=\"beta-subunit\">\n        <path d=\"M1059.766,258.488 C1046.191,258.488 1035.187,240.332 1035.187,217.937 C1035.187,195.542 1046.191,177.386 1059.766,177.386 C1073.341,177.386 1084.345,195.542 1084.345,217.937 C1084.345,240.332 1073.341,258.488 1059.766,258.488 z\" fill=\"#C7B29E\"/>\n        <path d=\"M1059.766,258.488 C1046.191,258.488 1035.187,240.332 1035.187,217.937 C1035.187,195.542 1046.191,177.386 1059.766,177.386 C1073.341,177.386 1084.345,195.542 1084.345,217.937 C1084.345,240.332 1073.341,258.488 1059.766,258.488 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n      <g id=\"alpha-subunit\">\n        <path d=\"M1091.519,258.488 C1077.945,258.488 1066.94,240.332 1066.94,217.937 C1066.94,195.542 1077.945,177.386 1091.519,177.386 C1105.094,177.386 1116.098,195.542 1116.098,217.937 C1116.098,240.332 1105.094,258.488 1091.519,258.488 z\" fill=\"#D6C2AD\"/>\n        <path d=\"M1091.519,258.488 C1077.945,258.488 1066.94,240.332 1066.94,217.937 C1066.94,195.542 1077.945,177.386 1091.519,177.386 C1105.094,177.386 1116.098,195.542 1116.098,217.937 C1116.098,240.332 1105.094,258.488 1091.519,258.488 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n    </g>\n    <g id=\"subunits\">\n      <text transform=\"matrix(1, 0, 0, 1, 1091.019, 249.488)\">\n        <tspan x=\"-2.62\" y=\"2.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">𝛼</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 1121.502, 249.488)\">\n        <tspan x=\"-2.465\" y=\"2.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">𝛽</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 1059.266, 249.488)\">\n        <tspan x=\"-2.465\" y=\"2.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">𝛽</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 1090.385, 272.773)\">\n        <tspan x=\"-2.14\" y=\"2.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">𝛾</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 1045.639, 370.657)\">\n        <tspan x=\"-1.389\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">I</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 1026.924, 213.734)\">\n        <tspan x=\"-2.315\" y=\"2.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">𝛿</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 1026.924, 321.319)\">\n        <tspan x=\"-2.778\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">II</tspan>\n      </text>\n    </g>\n    <g id=\"reaction\">\n      <g>\n        <path d=\"M1035.563,172.122 C1054.158,191.868 1070.244,203.864 1091.281,203.864 C1117.669,203.864 1139.483,181.757 1154.852,165.192\" fill-opacity=\"0\" stroke=\"#41719C\" stroke-width=\"3\"/>\n        <path d=\"M1035.563,172.122 L1040.551,171.344 L1029.883,165.933 L1034.362,177.024 z\" fill=\"#41719C\" fill-opacity=\"1\" stroke=\"#41719C\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n      <text transform=\"matrix(1, 0, 0, 1, 1021.553, 146.15)\">\n        <tspan x=\"-22.447\" y=\"7.212\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">ATP</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 1180.086, 146.15)\">\n        <tspan x=\"-47.692\" y=\"7.212\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">ADP + P</tspan>\n        <tspan x=\"44.582\" y=\"7.212\" font-family=\"Arial,ArialMT\" font-size=\"14\" fill=\"#000000\">i</tspan>\n      </text>\n    </g>\n    <g id=\"label\">\n      <text transform=\"matrix(1, 0, 0, 1, 1079.385, 574.538)\">\n        <tspan x=\"-66.148\" y=\"4.5\" font-family=\"Arial,ArialMT\" font-size=\"21\" fill=\"#000000\">ATP Synthase</tspan>\n      </text>\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/cytochrome-b6f.svg":
/*!***************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/cytochrome-b6f.svg ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"cytochrome-b6f\" transform=\"translate(0, 0)\">\n    <g id=\"core\">\n      <path d=\"M655.498,267.457 C675.147,267.457 691.076,293.75 691.076,326.183 C691.192,332.982 690.245,339.323 688.994,345.965 C699.86,349.08 703.904,361.547 704.283,371.638 C704.283,386.256 695.46,398.106 684.576,398.106 C675.306,397.791 669.131,390.242 666.527,381.963 C663.169,383.981 659.363,384.747 655.498,384.909 C646.635,384.927 639.904,379.589 634.281,373.32 C640.079,370.835 644.441,366.313 644.888,359.837 C644.301,348.973 632.875,344.517 623.487,344.171 L621.677,344.237 C620.378,338.308 620.013,332.235 619.92,326.183 C619.992,321.52 619.905,324.167 620.268,318.247 C621.897,319.181 623.796,319.344 625.629,319.445 C633.624,319.445 640.104,312.363 640.104,303.627 C640.004,296.459 635.609,289.785 628.42,288.182 C633.651,277.454 643.014,267.978 655.498,267.457 z\" fill=\"#B2C7DA\"/>\n      <path d=\"M655.498,267.457 C675.147,267.457 691.076,293.75 691.076,326.183 C691.192,332.982 690.245,339.323 688.994,345.965 C699.86,349.08 703.904,361.547 704.283,371.638 C704.283,386.256 695.46,398.106 684.576,398.106 C675.306,397.791 669.131,390.242 666.527,381.963 C663.169,383.981 659.363,384.747 655.498,384.909 C646.635,384.927 639.904,379.589 634.281,373.32 C640.079,370.835 644.441,366.313 644.888,359.837 C644.301,348.973 632.875,344.517 623.487,344.171 L621.677,344.237 C620.378,338.308 620.013,332.235 619.92,326.183 C619.992,321.52 619.905,324.167 620.268,318.247 C621.897,319.181 623.796,319.344 625.629,319.445 C633.624,319.445 640.104,312.363 640.104,303.627 C640.004,296.459 635.609,289.785 628.42,288.182 C633.651,277.454 643.014,267.978 655.498,267.457 z\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n    </g>\n    <g id=\"rieske\">\n      <path d=\"M661.032,384.909 C661.032,395.793 653.332,405.166 639.099,405.166 C624.867,405.166 613.944,397.91 613.944,387.026 C613.944,376.143 625.523,370.284 639.756,370.284 C653.988,370.284 661.032,374.025 661.032,384.909 z\" fill=\"#B2C7DA\"/>\n      <path d=\"M661.032,384.909 C661.032,395.793 653.332,405.166 639.099,405.166 C624.867,405.166 613.944,397.91 613.944,387.026 C613.944,376.143 625.523,370.284 639.756,370.284 C653.988,370.284 661.032,374.025 661.032,384.909 z\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n    </g>\n    <path d=\"M715.576,471.247 C704.692,471.247 695.869,459.397 695.869,444.779 C695.869,430.161 704.692,418.311 715.576,418.311 C726.46,418.311 735.283,430.161 735.283,444.779 C735.283,459.397 726.46,471.247 715.576,471.247 z\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"2\" display=\"none\"/>\n    <path d=\"M652.677,417.378 C651.378,411.449 651.013,405.375 650.92,399.324 C650.992,394.66 650.905,397.307 651.268,391.387 C652.897,392.321 654.796,392.485 656.629,392.586 C664.624,392.586 671.104,385.504 671.104,376.767 C671.004,369.599 666.609,362.925 659.42,361.323 C664.651,350.595 674.014,341.119 686.498,340.598 C706.147,340.598 722.076,366.89 722.076,399.324 C722.076,431.757 706.147,458.049 686.498,458.049 C677.635,458.068 670.904,452.729 665.281,446.46 C671.079,443.976 675.441,439.454 675.888,432.978 C675.301,422.114 663.875,417.658 654.487,417.311 L652.677,417.378 z\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"2\" display=\"none\"/>\n    <g id=\"cofactors\">\n      <g id=\"b6l\">\n        <text transform=\"matrix(1, 0, 0, 1, 666.625, 340.175)\">\n          <tspan x=\"-2.781\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">b</tspan>\n        </text>\n        <text transform=\"matrix(1, 0, 0, 1, 670.266, 343.072)\">\n          <tspan x=\"-1.668\" y=\"1\" font-family=\"Arial,ArialMT\" font-size=\"6\" font-style=\"italic\" fill=\"#000000\">L</tspan>\n        </text>\n      </g>\n      <text transform=\"matrix(1, 0, 0, 1, 648.547, 306.901)\">\n        <tspan x=\"-5.558\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">Q</tspan>\n        <tspan x=\"2.221\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"6\" fill=\"#000000\">n</tspan>\n      </text>\n      <path d=\"M656.401,344.833 L661.727,340.305\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n      <path d=\"M662.635,360.504 L657.061,355.749\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n      <text transform=\"matrix(1, 0, 0, 1, 687.415, 389.241)\">\n        <tspan x=\"-1.389\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" font-style=\"italic\" fill=\"#000000\">f</tspan>\n      </text>\n      <path d=\"M684.843,383.195 L678.856,375.36\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n      <text transform=\"matrix(1, 0, 0, 1, 669.694, 367.504)\">\n        <tspan x=\"-13.793\" y=\"2.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">Fe₂S₂</tspan>\n      </text>\n      <g id=\"b6h\">\n        <text transform=\"matrix(1, 0, 0, 1, 666.127, 314.582)\">\n          <tspan x=\"-2.781\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">b</tspan>\n        </text>\n        <text transform=\"matrix(1, 0, 0, 1, 670.266, 317.479)\">\n          <tspan x=\"-2.167\" y=\"1\" font-family=\"Arial,ArialMT\" font-size=\"6\" font-style=\"italic\" fill=\"#000000\">H</tspan>\n        </text>\n      </g>\n      <path d=\"M667.23,330.916 L667.23,322.27\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n      <text transform=\"matrix(1, 0, 0, 1, 650.529, 350.479)\">\n        <tspan x=\"-5.558\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">Q</tspan>\n        <tspan x=\"2.221\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"6\" fill=\"#000000\">p</tspan>\n      </text>\n      <path d=\"M661.975,313.358 L656.401,308.603\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n    </g>\n    <g id=\"label\">\n      <text transform=\"matrix(1, 0, 0, 1, 654.194, 574.038)\">\n        <tspan x=\"-72.705\" y=\"5\" font-family=\"Arial,ArialMT\" font-size=\"21\" fill=\"#000000\">Cytochrome </tspan>\n        <tspan x=\"46.332\" y=\"5\" font-family=\"Arial,ArialMT\" font-size=\"21\" font-style=\"italic\" fill=\"#000000\">b₆f</tspan>\n      </text>\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/cytochrome-c6.svg":
/*!**************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/cytochrome-c6.svg ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"cytochrome-c6\" transform=\"translate(0, 0)\">\n    <g id=\"shape\">\n      <path d=\"M765.396,461.225 C755.975,461.225 748.337,453.587 748.337,444.165 C748.337,434.744 755.975,427.106 765.396,427.106 C774.818,427.106 782.456,434.744 782.456,444.165 C782.456,453.587 774.818,461.225 765.396,461.225 z\" fill=\"#FF2B2B\"/>\n      <path d=\"M765.396,461.225 C755.975,461.225 748.337,453.587 748.337,444.165 C748.337,434.744 755.975,427.106 765.396,427.106 C774.818,427.106 782.456,434.744 782.456,444.165 C782.456,453.587 774.818,461.225 765.396,461.225 z\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n    </g>\n    <g id=\"cofactor\">\n      <path d=\"M762.184,438.133 L761.2,435.103 L763.777,433.23 L766.355,435.103 L765.37,438.133 z M776.445,438.133 L777.43,435.103 L774.852,433.23 L772.275,435.103 L773.259,438.133 z M765.37,444.052 L766.355,447.082 L763.777,448.955 L761.2,447.082 L762.184,444.052 z M776.445,444.052 L777.43,447.082 L774.852,448.955 L772.275,447.082 L773.259,444.052 z M772.275,435.036 L769.315,432.886 L766.355,435.036 M772.275,447.14 L769.315,449.29 L766.355,447.14 M762.166,444.052 L760.015,441.092 L762.166,438.133 M776.522,444.052 L778.672,441.092 L776.522,438.133\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"0.75\"/>\n      <g>\n        <path d=\"M766.457,442.199 L766.457,438.923 L768.666,438.923 L768.666,439.31 L766.89,439.31 L766.89,440.324 L768.427,440.324 L768.427,440.711 L766.89,440.711 L766.89,442.199 z\" fill=\"#000000\"/>\n        <path d=\"M770.802,441.435 L771.218,441.486 Q771.119,441.85 770.853,442.051 Q770.588,442.252 770.174,442.252 Q769.654,442.252 769.349,441.932 Q769.044,441.611 769.044,441.032 Q769.044,440.434 769.352,440.103 Q769.66,439.772 770.152,439.772 Q770.628,439.772 770.929,440.096 Q771.231,440.42 771.231,441.008 Q771.231,441.044 771.229,441.115 L769.459,441.115 Q769.482,441.506 769.681,441.714 Q769.879,441.922 770.177,441.922 Q770.398,441.922 770.554,441.805 Q770.71,441.689 770.802,441.435 z M769.482,440.784 L770.807,440.784 Q770.78,440.485 770.655,440.335 Q770.462,440.103 770.156,440.103 Q769.879,440.103 769.691,440.288 Q769.502,440.474 769.482,440.784 z\" fill=\"#000000\"/>\n      </g>\n    </g>\n    <text transform=\"matrix(1, 0, 0, 1, 763.499, 480.233)\">\n      <tspan x=\"-28.347\" y=\"6.378\" font-family=\"Arial,ArialMT\" font-size=\"21\" fill=\"#000000\">Cyt c₆</tspan>\n    </text>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/electron-flux.svg":
/*!**************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/electron-flux.svg ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"electron-flux\" transform=\"translate(0, 0)\">\n    <g id=\"pc-to-ps-i\">\n      <path d=\"M841.221,412.224 C823.496,431.894 808.142,443.837 788.078,443.837\" fill-opacity=\"0\" stroke=\"#F8941D\" stroke-width=\"3\"/>\n      <path d=\"M841.221,412.224 L842.53,417.099 L846.763,405.911 L836.217,411.557 z\" fill=\"#F8941D\" fill-opacity=\"1\" stroke=\"#F8941D\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n    </g>\n    <g id=\"b6f-to-pc\">\n      <path d=\"M730.813,439.253 C713.872,434.135 699.731,416.062 689.304,401.988\" fill-opacity=\"0\" stroke=\"#F8941D\" stroke-width=\"3\"/>\n      <path d=\"M730.813,439.253 L727.414,442.985 L739.118,440.515 L728.675,434.68 z\" fill=\"#F8941D\" fill-opacity=\"1\" stroke=\"#F8941D\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n    </g>\n    <g id=\"ps-i-to-fd\">\n      <path d=\"M852.334,249.445 L852.334,275.829\" fill-opacity=\"0\" stroke=\"#F8941D\" stroke-width=\"3\"/>\n      <path d=\"M852.334,249.445 L856.534,252.245 L852.334,241.045 L848.134,252.245 z\" fill=\"#F8941D\" fill-opacity=\"1\" stroke=\"#F8941D\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n    </g>\n    <g id=\"fd-to-fnr\">\n      <path d=\"M869.148,165.664 L859.029,184.313\" fill-opacity=\"0\" stroke=\"#F8941D\" stroke-width=\"3\"/>\n      <path d=\"M869.148,165.664 L871.505,170.128 L873.155,158.281 L864.122,166.122 z\" fill=\"#F8941D\" fill-opacity=\"1\" stroke=\"#F8941D\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n    </g>\n    <g id=\"flow-q-cycle\">\n      <g>\n        <path d=\"M552.895,352.348 C574.015,364.242 597.894,361.953 617.113,358.17\" fill-opacity=\"0\" stroke=\"#F8941D\" stroke-width=\"3\"/>\n        <path d=\"M617.113,358.17 L615.25,362.862 L625.329,356.42 L613.5,354.646 z\" fill=\"#F8941D\" fill-opacity=\"1\" stroke=\"#F8941D\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n      <g>\n        <path d=\"M628.891,307.535 C603.438,303.518 580.06,313.116 561.96,322.513\" fill-opacity=\"0\" stroke=\"#F8941D\" stroke-width=\"3\"/>\n        <path d=\"M561.96,322.513 L562.441,317.488 L554.558,326.485 L566.413,324.889 z\" fill=\"#F8941D\" fill-opacity=\"1\" stroke=\"#F8941D\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n    </g>\n    <g id=\"ps-ii-to-pq\">\n      <path d=\"M496.773,320.56 C477.285,306.9 441.565,310.935 414.488,314.678\" fill-opacity=\"0\" stroke=\"#F8941D\" stroke-width=\"3\"/>\n      <path d=\"M496.773,320.56 L491.858,321.71 L502.903,326.303 L497.601,315.581 z\" fill=\"#F8941D\" fill-opacity=\"1\" stroke=\"#F8941D\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n    </g>\n    <g id=\"fd-to-cyt-b6f\">\n      <path d=\"M673.549,253.71 C695.089,206.767 749.784,205.734 818.663,205.734\" fill-opacity=\"0\" stroke=\"#F8941D\" stroke-width=\"3\"/>\n      <path d=\"M673.549,253.71 L670.667,249.566 L670.47,261.526 L678.483,252.645 z\" fill=\"#F8941D\" fill-opacity=\"1\" stroke=\"#F8941D\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/ferredoxin.svg":
/*!***********************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/ferredoxin.svg ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"ferredoxin\" transform=\"translate(0, 0)\">\n    <g id=\"shape\">\n      <path d=\"M854.896,226.945 C845.475,226.945 837.837,219.307 837.837,209.886 C837.837,200.464 845.475,192.827 854.896,192.827 C864.318,192.827 871.956,200.464 871.956,209.886 C871.956,219.307 864.318,226.945 854.896,226.945 z\" fill=\"#A08C79\"/>\n      <path d=\"M854.896,226.945 C845.475,226.945 837.837,219.307 837.837,209.886 C837.837,200.464 845.475,192.827 854.896,192.827 C864.318,192.827 871.956,200.464 871.956,209.886 C871.956,219.307 864.318,226.945 854.896,226.945 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n    </g>\n    <text transform=\"matrix(1, 0, 0, 1, 882.063, 238.536)\">\n      <tspan x=\"-12.253\" y=\"4.689\" font-family=\"Arial,ArialMT\" font-size=\"21\" fill=\"#000000\">Fd</tspan>\n    </text>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/fnr.svg":
/*!****************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/fnr.svg ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"fnr\" transform=\"translate(0, 0)\">\n    <g id=\"shape\">\n      <path d=\"M884.643,149.036 C875.221,149.036 867.584,141.398 867.584,131.977 C867.584,122.555 875.221,114.917 884.643,114.917 C894.065,114.917 901.702,122.555 901.702,131.977 C901.702,141.398 894.065,149.036 884.643,149.036 z\" fill=\"#EECC00\"/>\n      <path d=\"M884.643,149.036 C875.221,149.036 867.584,141.398 867.584,131.977 C867.584,122.555 875.221,114.917 884.643,114.917 C894.065,114.917 901.702,122.555 901.702,131.977 C901.702,141.398 894.065,149.036 884.643,149.036 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n    </g>\n    <g id=\"reaction\">\n      <g>\n        <path d=\"M940.627,92.514 C922.032,112.26 905.946,124.255 884.91,124.255 C858.521,124.255 836.707,102.149 821.338,85.584\" fill-opacity=\"0\" stroke=\"#41719C\" stroke-width=\"3\"/>\n        <path d=\"M940.627,92.514 L941.828,97.416 L946.307,86.325 L935.639,91.736 z\" fill=\"#41719C\" fill-opacity=\"1\" stroke=\"#41719C\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n      <text transform=\"matrix(1, 0, 0, 1, 828.651, 66.755)\">\n        <tspan x=\"-38.402\" y=\"8\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">NADP⁺</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 963.656, 66.755)\">\n        <tspan x=\"-42.006\" y=\"7.212\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">NADPH</tspan>\n      </text>\n    </g>\n    <text transform=\"matrix(1, 0, 0, 1, 917.873, 162.576)\">\n      <tspan x=\"-21.579\" y=\"4.689\" font-family=\"Arial,ArialMT\" font-size=\"21\" fill=\"#000000\">FNR</tspan>\n    </text>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/ion-channels.svg":
/*!*************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/ion-channels.svg ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"ion-channels\" transform=\"translate(0, 0)\">\n    <g id=\"ca-channel\">\n      <g id=\"shape\">\n        <path d=\"M1227.972,372.685 L1219.594,383.444 L1227.972,372.685 L1219.594,383.444 L1200.532,383.444 L1219.594,383.444 L1200.532,383.444 L1192.154,372.685 L1200.532,383.444 L1192.154,372.685 L1192.154,290.132 L1192.154,372.685 L1192.154,290.132 L1227.972,290.132 L1192.154,290.132 L1227.972,290.132 L1227.972,372.685 L1227.972,290.132 L1227.972,372.685 z\" fill=\"#959595\"/>\n        <path d=\"M1227.972,372.685 L1219.594,383.444 L1227.972,372.685 L1219.594,383.444 L1200.532,383.444 L1219.594,383.444 L1200.532,383.444 L1192.154,372.685 L1200.532,383.444 L1192.154,372.685 L1192.154,290.132 L1192.154,372.685 L1192.154,290.132 L1227.972,290.132 L1192.154,290.132 L1227.972,290.132 L1227.972,372.685 L1227.972,290.132 L1227.972,372.685 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n    </g>\n    <g id=\"k-channel\">\n      <g id=\"shape\">\n        <path d=\"M1260.337,383.444 L1279.399,383.444 L1287.777,372.685 L1287.777,300.89 L1279.399,290.132 L1260.337,290.132 L1251.959,300.89 L1251.959,372.685 L1260.337,383.444 z\" fill=\"#959595\"/>\n        <path d=\"M1260.337,383.444 L1279.399,383.444 L1287.777,372.685 L1287.777,300.89 L1279.399,290.132 L1260.337,290.132 L1251.959,300.89 L1251.959,372.685 L1260.337,383.444 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n    </g>\n    <g id=\"pmf\">\n      <text transform=\"matrix(1, 0, 0, 1, 1358.84, 336.004)\">\n        <tspan x=\"-33.548\" y=\"5.5\" font-family=\"Arial,ArialMT\" font-size=\"18\" fill=\"#EE6600\">ΔΨ/</tspan>\n        <tspan x=\"-1.485\" y=\"5.5\" font-family=\"Arial,ArialMT\" font-size=\"18\" fill=\"#EE6600\">Δ</tspan>\n        <tspan x=\"10.538\" y=\"5.5\" font-family=\"Arial,ArialMT\" font-size=\"18\" fill=\"#EE6600\">pH</tspan>\n      </text>\n    </g>\n    <g id=\"label\">\n      <text transform=\"matrix(1, 0, 0, 1, 1243.67, 574.538)\" id=\"Ion_Channels\">\n        <tspan x=\"-61.877\" y=\"4.5\" font-family=\"Arial,ArialMT\" font-size=\"21\" fill=\"#000000\">Ion Channels</tspan>\n      </text>\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/ion-flux.svg":
/*!*********************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/ion-flux.svg ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"ion-flux\" transform=\"translate(0, 0)\">\n    <g id=\"ca-channel\">\n      <text transform=\"matrix(1, 0, 0, 1, 1209.563, 436.118)\" id=\"Ca⁺\">\n        <tspan x=\"-20.402\" y=\"8\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">Ca⁺</tspan>\n      </text>\n      <g id=\"direction\">\n        <path d=\"M1210.063,409.591 L1210.063,254.585\" fill-opacity=\"0\" stroke=\"#00BCFF\" stroke-width=\"3\"/>\n        <path d=\"M1210.063,409.591 L1205.863,406.791 L1210.063,417.991 L1214.263,406.791 z\" fill=\"#00BCFF\" fill-opacity=\"1\" stroke=\"#00BCFF\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n    </g>\n    <g id=\"k-channel\">\n      <text transform=\"matrix(1, 0, 0, 1, 1280.918, 236.382)\">\n        <tspan x=\"-13.729\" y=\"8\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">H⁺</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 1269.368, 439.123)\">\n        <tspan x=\"-13.066\" y=\"8\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">K⁺</tspan>\n      </text>\n      <g id=\"direction\">\n        <path d=\"M1264.812,408.277 L1264.812,253.271\" fill-opacity=\"0\" stroke=\"#00BCFF\" stroke-width=\"3\"/>\n        <path d=\"M1264.812,408.277 L1260.612,405.477 L1264.812,416.677 L1269.012,405.477 z\" fill=\"#00BCFF\" fill-opacity=\"1\" stroke=\"#00BCFF\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n      <g id=\"direction\">\n        <path d=\"M1274.923,265.298 L1274.923,420.304\" fill-opacity=\"0\" stroke=\"#00BCFF\" stroke-width=\"3\"/>\n        <path d=\"M1274.923,265.298 L1279.123,268.098 L1274.923,256.898 L1270.723,268.098 z\" fill=\"#00BCFF\" fill-opacity=\"1\" stroke=\"#00BCFF\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/lumen.svg":
/*!******************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/lumen.svg ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"lumen\" transform=\"translate(0, 0)\">\n    <path d=\"M-0,376.004 L1400,376.004 L1400,600 L-0,600 L-0,376.004 z\" fill=\"#FFE5E5\"/>\n    <text transform=\"matrix(1, 0, 0, 1, 1358.84, 392.945)\">\n      <tspan x=\"-30.04\" y=\"7.212\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">lumen</tspan>\n    </text>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/photosystem-i.svg":
/*!**************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/photosystem-i.svg ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"photosystem-i\" transform=\"translate(0, 0)\">\n    <g id=\"antenna\">\n      <g id=\"lhca\">\n        <path d=\"M891.728,291.597 L916.885,291.597 C922.992,291.597 927.943,296.413 927.943,302.355 L927.943,374.15 C927.943,380.092 922.992,384.909 916.885,384.909 L891.728,384.909 C885.621,384.909 880.67,380.092 880.67,374.15 L880.67,302.355 C880.67,296.413 885.621,291.597 891.728,291.597 z\" fill=\"#008000\"/>\n        <path d=\"M891.728,291.597 L916.885,291.597 C922.992,291.597 927.943,296.413 927.943,302.355 L927.943,374.15 C927.943,380.092 922.992,384.909 916.885,384.909 L891.728,384.909 C885.621,384.909 880.67,380.092 880.67,374.15 L880.67,302.355 C880.67,296.413 885.621,291.597 891.728,291.597 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n      <g id=\"lhca\">\n        <path d=\"M786.926,291.597 L812.083,291.597 C818.19,291.597 823.141,296.413 823.141,302.355 L823.141,374.15 C823.141,380.092 818.19,384.909 812.083,384.909 L786.926,384.909 C780.819,384.909 775.869,380.092 775.869,374.15 L775.869,302.355 C775.869,296.413 780.819,291.597 786.926,291.597 z\" fill=\"#008000\"/>\n        <path d=\"M786.926,291.597 L812.083,291.597 C818.19,291.597 823.141,296.413 823.141,302.355 L823.141,374.15 C823.141,380.092 818.19,384.909 812.083,384.909 L786.926,384.909 C780.819,384.909 775.869,380.092 775.869,374.15 L775.869,302.355 C775.869,296.413 780.819,291.597 786.926,291.597 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n    </g>\n    <g id=\"core\">\n      <path d=\"M869.29,279.265 C886.885,279.265 901.148,305.674 901.148,338.253 C901.148,370.831 886.885,397.241 869.29,397.241 C862.033,397.14 856.035,392.784 851.656,387.306 C847.349,392.99 841.219,396.904 834.021,397.241 C816.427,397.241 802.164,370.831 802.164,338.253 C802.164,305.674 816.427,279.265 834.021,279.265 C841.278,279.365 847.276,283.721 851.656,289.199 C855.963,283.515 862.093,279.602 869.29,279.265 z\" fill=\"#0CB04B\"/>\n      <path d=\"M869.29,279.265 C886.885,279.265 901.148,305.674 901.148,338.253 C901.148,370.831 886.885,397.241 869.29,397.241 C862.033,397.14 856.035,392.784 851.656,387.306 C847.349,392.99 841.219,396.904 834.021,397.241 C816.427,397.241 802.164,370.831 802.164,338.253 C802.164,305.674 816.427,279.265 834.021,279.265 C841.278,279.365 847.276,283.721 851.656,289.199 C855.963,283.515 862.093,279.602 869.29,279.265 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n    </g>\n    <text transform=\"matrix(1, 0, 0, 1, 851.544, 378.284)\" id=\"center\">\n      <tspan x=\"-10.509\" y=\"4.5\" font-family=\"Arial-BoldMT\" font-size=\"14\" fill=\"#000000\">P</tspan>\n      <tspan x=\"-1.171\" y=\"4.5\" font-family=\"Arial-BoldMT\" font-size=\"7\" fill=\"#000000\">700</tspan>\n    </text>\n    <g id=\"cofactors\">\n      <text transform=\"matrix(1, 0, 0, 1, 839.873, 310.422)\">\n        <tspan x=\"-5.055\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">F</tspan>\n        <tspan x=\"1.053\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"6\" fill=\"#000000\">A</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 855.114, 296.961)\">\n        <tspan x=\"-5.055\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">F</tspan>\n        <tspan x=\"1.053\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"6\" fill=\"#000000\">B</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 851.544, 325.517)\">\n        <tspan x=\"-5.055\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">F</tspan>\n        <tspan x=\"1.053\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"6\" fill=\"#000000\">X</tspan>\n      </text>\n      <path d=\"M845.989,318.422 L841.815,314.773\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n      <path d=\"M844.714,303.422 L848.888,299.835\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n      <path d=\"M839.814,378.658 L828.749,364.75\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n      <path d=\"M875.91,364.75 L864.844,378.658\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\" stroke-dasharray=\"2,2\"/>\n      <path d=\"M825.237,354.881 L828.748,338.892\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n      <path d=\"M836.778,331.271 L845.329,327.239\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n      <text transform=\"matrix(1, 0, 0, 1, 827.814, 334.111)\">\n        <tspan x=\"-7.004\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">A</tspan>\n        <tspan x=\"-0.334\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"6\" fill=\"#000000\">1B</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 825.167, 360.584)\">\n        <tspan x=\"-7.004\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">A</tspan>\n        <tspan x=\"-0.334\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"6\" fill=\"#000000\">0B</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 877.883, 334.726)\">\n        <tspan x=\"-7.004\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">A</tspan>\n        <tspan x=\"-0.334\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"6\" fill=\"#000000\">1A</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 879.769, 360.584)\">\n        <tspan x=\"-7.004\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">A</tspan>\n        <tspan x=\"-0.334\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"6\" fill=\"#000000\">0A</tspan>\n      </text>\n      <path d=\"M859.33,327.239 L867.88,331.271\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\" stroke-dasharray=\"2,2\"/>\n      <path d=\"M875.91,338.892 L879.422,354.881\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\" stroke-dasharray=\"2,2\"/>\n    </g>\n    <g id=\"light\">\n      <path d=\"M782.7,275.747 L765.376,255.981 L771.055,253.128 L757.394,229.837 L730.296,245.066 L754.259,261.862 L746.255,267.226 L769.287,283.728 L762.321,286.945 L799.497,313.819 L777.083,279.153 L782.7,275.747 z\" fill=\"#FFEC7F\"/>\n      <path d=\"M757.394,229.837 L771.055,253.128 L765.376,255.981 L782.7,275.747 L782.7,275.747 L777.083,279.153 L799.497,313.819 L762.321,286.945 L769.286,283.728 L746.255,267.226 L754.259,261.862 L730.296,245.066 L757.394,229.837 z M757.028,231.19 L732.171,245.159 L754.833,261.043 L756.027,261.881 L754.815,262.693 L748.01,267.253 L769.869,282.915 L771.265,283.915 L769.706,284.635 L764.292,287.136 L795.763,309.885 L776.243,279.696 L775.684,278.832 L776.564,278.298 L781.163,275.51 L764.624,256.641 L763.772,255.668 L764.927,255.088 L769.652,252.714 L757.028,231.19 z\" fill=\"#000000\"/>\n    </g>\n    <g id=\"label\">\n      <text transform=\"matrix(1, 0, 0, 1, 848.998, 574.538)\">\n        <tspan x=\"-66.527\" y=\"4.5\" font-family=\"Arial,ArialMT\" font-size=\"21\" fill=\"#000000\">Photosystem I</tspan>\n      </text>\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/photosystem-ii-repair.svg":
/*!**********************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/photosystem-ii-repair.svg ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <defs>\n    <pattern id=\"Pattern_1\" patternUnits=\"userSpaceOnUse\" x=\"227.713\" y=\"51.755\" width=\"40\" height=\"40\" patternTransform=\"matrix(0.29, 0, 0, 0.29, 0, 0)\">\n      <g transform=\"translate(-0, -0)\">\n        <path d=\"M40,0 L0,0 L0,40 L40,40 L40,0 z\" fill=\"#BFBFBF\"/>\n        <path d=\"M30,0 L40,10 L40,0 L30,0 z\" fill=\"#808080\"/>\n        <path d=\"M0,40 L0,30 L10,40 L0,40 z\" fill=\"#808080\"/>\n        <path d=\"M30,40 L40,40 L40,30 L10,0 L0,0 L0,10\" fill=\"#808080\"/>\n      </g>\n    </pattern>\n  </defs>\n  <g id=\"photosystem-ii-repair\" transform=\"translate(0, 0)\">\n    <g id=\"core\">\n      <path d=\"M279.906,51.517 C288.842,51.623 295.177,58.023 299.897,64.925 C290.659,66.659 285.627,75.039 285.22,83.924 C285.221,94.604 293.067,103.261 302.747,103.261 C305.751,103.28 307.465,102.621 310.077,101.404 C310.186,103.313 310.129,102.064 310.173,105.154 C310.122,119.439 304.257,142.573 293.484,152.939 C303.059,155.695 312.471,161.08 313.12,171.324 C313.12,183.2 301.054,192.827 286.169,192.827 C281.221,192.788 276.256,191.812 271.878,189.454 C267.545,191.967 262.502,192.628 257.588,192.827 C242.703,192.827 230.637,183.2 230.637,171.324 C231.039,163.41 235.938,161.4 241.853,156.682 L241.601,156.288 C244.383,159.803 248.31,162.117 252.796,162.371 C266.372,162.371 277.379,137.721 277.379,107.313 C276.802,91.44 275.15,71.912 264.517,58.977 C268.591,54.468 273.945,52.108 279.906,51.517 L279.906,51.517 z\" fill=\"#B4D66F\"/>\n      <path d=\"M279.906,51.517 C288.842,51.623 295.177,58.023 299.897,64.925 C290.659,66.659 285.627,75.039 285.22,83.924 C285.221,94.604 293.067,103.261 302.747,103.261 C305.751,103.28 307.465,102.621 310.077,101.404 C310.186,103.313 310.129,102.064 310.173,105.154 C310.122,119.439 304.257,142.573 293.484,152.939 C303.059,155.695 312.471,161.08 313.12,171.324 C313.12,183.2 301.054,192.827 286.169,192.827 C281.221,192.788 276.256,191.812 271.878,189.454 C267.545,191.967 262.502,192.628 257.588,192.827 C242.703,192.827 230.637,183.2 230.637,171.324 C231.039,163.41 235.938,161.4 241.853,156.682 L241.601,156.288 C244.383,159.803 248.31,162.117 252.796,162.371 C266.372,162.371 277.379,137.721 277.379,107.313 C276.802,91.44 275.15,71.912 264.517,58.977 C268.591,54.468 273.945,52.108 279.906,51.517 L279.906,51.517 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n    </g>\n    <g id=\"d1\">\n      <g id=\"photosystem-ii-repair-d1\">\n        <path d=\"M252.296,161.871 C238.719,161.871 227.713,137.221 227.713,106.813 C227.713,76.405 238.719,51.755 252.296,51.755 C265.872,51.755 276.879,76.405 276.879,106.813 C276.879,137.221 265.872,161.871 252.296,161.871 z\" fill=\"url(#Pattern_1)\"/>\n        <path d=\"M252.296,161.871 C238.719,161.871 227.713,137.221 227.713,106.813 C227.713,76.405 238.719,51.755 252.296,51.755 C265.872,51.755 276.879,76.405 276.879,106.813 C276.879,137.221 265.872,161.871 252.296,161.871 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n      <text transform=\"matrix(1, 0, 0, 1, 251.954, 140.33)\">\n        <tspan x=\"-8.948\" y=\"4.5\" font-family=\"Arial,ArialMT\" font-size=\"14\" fill=\"#000000\">D1</tspan>\n      </text>\n    </g>\n    <g id=\"antenna\">\n      <g id=\"lhcb\">\n        <path d=\"M199.103,64.684 L224.26,64.684 C230.367,64.684 235.318,69.225 235.318,74.826 L235.318,142.51 C235.318,148.112 230.367,152.652 224.26,152.652 L199.103,152.652 C192.996,152.652 188.045,148.112 188.045,142.51 L188.045,74.826 C188.045,69.225 192.996,64.684 199.103,64.684 z\" fill=\"#8BC300\"/>\n        <path d=\"M199.103,64.684 L224.26,64.684 C230.367,64.684 235.318,69.225 235.318,74.826 L235.318,142.51 C235.318,148.112 230.367,152.652 224.26,152.652 L199.103,152.652 C192.996,152.652 188.045,148.112 188.045,142.51 L188.045,74.826 C188.045,69.225 192.996,64.684 199.103,64.684 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n      <g id=\"lhcb\">\n        <path d=\"M162.104,64.684 L187.261,64.684 C193.368,64.684 198.319,69.225 198.319,74.826 L198.319,142.51 C198.319,148.112 193.368,152.652 187.261,152.652 L162.104,152.652 C155.997,152.652 151.046,148.112 151.046,142.51 L151.046,74.826 C151.046,69.225 155.997,64.684 162.104,64.684 z\" fill=\"#8BC300\"/>\n        <path d=\"M162.104,64.684 L187.261,64.684 C193.368,64.684 198.319,69.225 198.319,74.826 L198.319,142.51 C198.319,148.112 193.368,152.652 187.261,152.652 L162.104,152.652 C155.997,152.652 151.046,148.112 151.046,142.51 L151.046,74.826 C151.046,69.225 155.997,64.684 162.104,64.684 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n    </g>\n    <g id=\"cycle\">\n      <g>\n        <path d=\"M386.992,257.171 C392.09,218.842 396.374,189.139 383.483,161.597 C372.141,137.364 356.506,120.434 327.632,111.689\" fill-opacity=\"0\" stroke=\"#B4D66F\" stroke-width=\"4\" stroke-dasharray=\"12,4\"/>\n        <path d=\"M386.992,257.171 L382.647,253.376 L385.747,266.69 L392.166,254.621 z\" fill=\"#B4D66F\" fill-opacity=\"1\" stroke=\"#B4D66F\" stroke-width=\"4\" stroke-opacity=\"1\"/>\n      </g>\n      <g>\n        <path d=\"M194.942,180.037 C170.999,199.57 168.196,215.87 172.831,236.127 C178.75,261.991 183.746,269.985 201.233,281.773\" fill-opacity=\"0\" stroke=\"#983432\" stroke-width=\"4\" stroke-dasharray=\"12,4\"/>\n        <path d=\"M194.942,180.037 L195.274,185.796 L202.609,174.261 L189.498,178.129 z\" fill=\"#983432\" fill-opacity=\"1\" stroke=\"#983432\" stroke-width=\"4\" stroke-opacity=\"1\"/>\n      </g>\n      <text transform=\"matrix(1, 0, 0, 1, 138.727, 196.734)\">\n        <tspan x=\"-25.938\" y=\"4.5\" font-family=\"Arial,ArialMT\" font-size=\"14\" fill=\"#000000\">damage</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 414.208, 173.962)\">\n        <tspan x=\"-19.114\" y=\"4.5\" font-family=\"Arial,ArialMT\" font-size=\"14\" fill=\"#000000\">repair</tspan>\n      </text>\n    </g>\n    <g id=\"light\">\n      <path d=\"M161.912,52.225 L144.588,32.459 L150.267,29.606 L136.606,6.315 L109.508,21.544 L133.471,38.34 L125.467,43.703 L148.498,60.205 L141.533,63.422 L178.709,90.296 L156.295,55.631 L161.912,52.225 z\" fill=\"#FFEC7F\"/>\n      <path d=\"M136.606,6.315 L150.267,29.606 L144.588,32.459 L161.912,52.225 L161.912,52.225 L156.294,55.631 L178.708,90.296 L141.533,63.422 L148.498,60.205 L125.467,43.703 L133.471,38.34 L109.508,21.544 L136.606,6.315 z M136.24,7.668 L111.383,21.637 L134.044,37.521 L135.239,38.358 L134.027,39.17 L127.223,43.731 L149.081,59.392 L150.477,60.393 L148.918,61.113 L143.504,63.613 L174.975,86.363 L155.455,56.174 L154.896,55.309 L155.776,54.776 L160.374,51.987 L143.836,33.118 L142.984,32.146 L144.139,31.565 L148.864,29.191 L136.24,7.668 z\" fill=\"#000000\"/>\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/photosystem-ii.svg":
/*!***************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/photosystem-ii.svg ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"photosystem-ii\" transform=\"translate(0, 0)\">\n    <g id=\"fluorescence\">\n      <path d=\"M331.952,220.062 C336.305,226.505 338.122,223.592 339.949,227.289 C341.176,229.771 341.356,230.994 339.036,233.332 C337.741,234.529 336.758,236.616 337.815,238.755 C338.873,240.894 340.763,241.464 342.864,241.078 C344.608,240.757 346.856,241.262 347.914,243.401 C348.971,245.54 347.922,247.608 346.693,248.824 C345.274,250.227 344.416,252.107 345.473,254.246 C346.53,256.385 348.897,256.826 350.522,256.57 C352.248,256.298 354.514,256.754 355.571,258.893 C356.629,261.032 355.62,263.111 354.351,264.316 C352.79,265.797 352.073,267.599 353.131,269.738 C354.188,271.877 355.902,272.456 358.18,272.062 C359.916,271.761 362.172,272.246 363.229,274.385 C364.286,276.524 364.395,277.602 362.009,279.807 C360.714,281.004 359.731,283.091 360.788,285.23 C361.846,287.369 363.736,287.94 365.837,287.553 C367.581,287.233 369.829,287.738 370.887,289.877 C371.944,292.016 370.895,294.084 369.666,295.299 C368.247,296.702 367.389,298.583 368.446,300.722 C369.503,302.861 371.87,303.301 373.495,303.045 C375.221,302.773 377.487,303.23 378.544,305.369 C379.602,307.508 378.593,309.586 377.324,310.791 C375.763,312.273 375.046,314.075 376.104,316.214 C377.161,318.352 378.875,318.931 381.153,318.537 C382.889,318.236 385.145,318.721 386.202,320.86 C387.259,322.999 384.481,324.803 384.982,326.283\" fill-opacity=\"0\" stroke=\"#EF2D37\" stroke-width=\"2\"/>\n      <path d=\"M331.952,220.062 L336.262,220.433 L328.486,213.751 L329.952,223.899 z\" fill=\"#EF2D37\" fill-opacity=\"1\" stroke=\"#EF2D37\" stroke-width=\"2\" stroke-opacity=\"1\"/>\n    </g>\n    <g id=\"core\">\n      <path d=\"M395.811,281.773 C404.748,281.879 411.083,288.279 415.802,295.181 C406.565,296.915 401.533,305.296 401.126,314.18 C401.126,324.86 408.973,333.517 418.652,333.517 C421.657,333.536 423.371,332.878 425.982,331.661 C426.091,333.569 426.034,332.32 426.078,335.411 C426.027,349.696 420.163,372.829 409.389,383.195 C418.965,385.952 428.377,391.336 429.026,401.581 C429.026,413.456 416.959,423.083 402.074,423.083 C397.126,423.044 392.162,422.068 387.784,419.71 C383.45,422.223 378.407,422.885 373.493,423.083 C358.609,423.083 346.542,413.456 346.542,401.581 C346.945,393.666 351.844,391.657 357.758,386.938 C348.423,373.186 344.484,354.49 344.118,338.253 C344.118,307.845 355.125,283.194 368.701,283.194 C373.362,283.288 377.246,286.053 380.114,289.542 C384.329,284.992 389.565,282.053 395.811,281.773 L395.811,281.773 z\" fill=\"#B4D66F\"/>\n      <path d=\"M395.811,281.773 C404.748,281.879 411.083,288.279 415.802,295.181 C406.565,296.915 401.533,305.296 401.126,314.18 C401.126,324.86 408.973,333.517 418.652,333.517 C421.657,333.536 423.371,332.878 425.982,331.661 C426.091,333.569 426.034,332.32 426.078,335.411 C426.027,349.696 420.163,372.829 409.389,383.195 C418.965,385.952 428.377,391.336 429.026,401.581 C429.026,413.456 416.959,423.083 402.074,423.083 C397.126,423.044 392.162,422.068 387.784,419.71 C383.45,422.223 378.407,422.885 373.493,423.083 C358.609,423.083 346.542,413.456 346.542,401.581 C346.945,393.666 351.844,391.657 357.758,386.938 C348.423,373.186 344.484,354.49 344.118,338.253 C344.118,307.845 355.125,283.194 368.701,283.194 C373.362,283.288 377.246,286.053 380.114,289.542 C384.329,284.992 389.565,282.053 395.811,281.773 L395.811,281.773 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n    </g>\n    <g id=\"antenna\">\n      <g id=\"lhcb\">\n        <path d=\"M315.009,292.94 L340.166,292.94 C346.273,292.94 351.224,297.481 351.224,303.083 L351.224,370.767 C351.224,376.368 346.273,380.909 340.166,380.909 L315.009,380.909 C308.902,380.909 303.951,376.368 303.951,370.767 L303.951,303.083 C303.951,297.481 308.902,292.94 315.009,292.94 z\" fill=\"#8CC400\"/>\n        <path d=\"M315.009,292.94 L340.166,292.94 C346.273,292.94 351.224,297.481 351.224,303.083 L351.224,370.767 C351.224,376.368 346.273,380.909 340.166,380.909 L315.009,380.909 C308.902,380.909 303.951,376.368 303.951,370.767 L303.951,303.083 C303.951,297.481 308.902,292.94 315.009,292.94 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n      <g id=\"lhcb\">\n        <path d=\"M280.01,292.94 L305.167,292.94 C311.274,292.94 316.225,297.481 316.225,303.083 L316.225,370.767 C316.225,376.368 311.274,380.909 305.167,380.909 L280.01,380.909 C273.903,380.909 268.952,376.368 268.952,370.767 L268.952,303.083 C268.952,297.481 273.903,292.94 280.01,292.94 z\" fill=\"#8CC400\"/>\n        <path d=\"M280.01,292.94 L305.167,292.94 C311.274,292.94 316.225,297.481 316.225,303.083 L316.225,370.767 C316.225,376.368 311.274,380.909 305.167,380.909 L280.01,380.909 C273.903,380.909 268.952,376.368 268.952,370.767 L268.952,303.083 C268.952,297.481 273.903,292.94 280.01,292.94 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n    </g>\n    <g id=\"water-split\">\n      <text transform=\"matrix(1, 0, 0, 1, 352.14, 464.889)\">\n        <tspan x=\"-23.062\" y=\"8.212\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">H₂O</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 421.816, 464.889)\">\n        <tspan x=\"-14.396\" y=\"8.212\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">O₂</tspan>\n      </text>\n      <g>\n        <path d=\"M353.376,448.164 C353.363,428.717 367.707,412.942 385.413,412.93 C400.189,412.92 412.638,423.889 416.362,438.821\" fill-opacity=\"0\" stroke=\"#3A658B\" stroke-width=\"3\"/>\n        <path d=\"M416.362,438.821 L411.854,436.551 L417.381,447.159 L420.192,435.532 z\" fill=\"#3A658B\" fill-opacity=\"1\" stroke=\"#3A658B\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n      <text transform=\"matrix(1, 0, 0, 1, 503.931, 492.677)\">\n        <tspan x=\"-13.729\" y=\"8\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">H⁺</tspan>\n      </text>\n    </g>\n    <text transform=\"matrix(1, 0, 0, 1, 384.586, 374.195)\" id=\"photosystem-ii-center\">\n      <tspan x=\"-10.509\" y=\"4.5\" font-family=\"Arial-BoldMT\" font-size=\"14\" fill=\"#000000\">P</tspan>\n      <tspan x=\"-1.171\" y=\"4.5\" font-family=\"Arial-BoldMT\" font-size=\"7\" fill=\"#000000\">680</tspan>\n    </text>\n    <g id=\"cofactors\">\n      <text transform=\"matrix(1, 0, 0, 1, 371.868, 391.909)\">\n        <tspan x=\"-5.657\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">Y</tspan>\n        <tspan x=\"1.013\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"6\" fill=\"#000000\">z</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 398.541, 403.233)\">\n        <tspan x=\"-15.447\" y=\"2.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">CaMn₄</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 391.413, 317.33)\">\n        <tspan x=\"-5.89\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">Q</tspan>\n        <tspan x=\"1.888\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"6\" fill=\"#000000\">B</tspan>\n      </text>\n      <path d=\"M382.041,400.106 L377.867,396.458\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n      <path d=\"M374.577,365.344 L367.782,356.562\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n      <path d=\"M364.772,344.205 L367.782,330.704\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n      <path d=\"M375.812,323.083 L384.362,319.051\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n      <text transform=\"matrix(1, 0, 0, 1, 365.733, 325.923)\">\n        <tspan x=\"-5.89\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">Q</tspan>\n        <tspan x=\"1.888\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"6\" fill=\"#000000\">A</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 369.095, 352.397)\">\n        <tspan x=\"-11.898\" y=\"1.5\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">Pheo</tspan>\n      </text>\n      <path d=\"M377.53,386.298 L383.103,381.544\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n    </g>\n    <g id=\"light\">\n      <path d=\"M289.026,275.747 L271.702,255.981 L277.381,253.128 L263.72,229.837 L236.622,245.066 L260.584,261.862 L252.581,267.226 L275.612,283.728 L268.647,286.945 L305.822,313.819 L283.408,279.153 L289.026,275.747 z\" fill=\"#FFEC7F\"/>\n      <path d=\"M263.72,229.837 L277.381,253.128 L271.702,255.981 L289.026,275.747 L289.026,275.747 L283.408,279.153 L305.822,313.819 L268.647,286.945 L275.612,283.728 L252.581,267.226 L260.584,261.862 L236.622,245.066 L263.72,229.837 z M263.354,231.19 L238.497,245.159 L261.158,261.043 L262.353,261.881 L261.141,262.693 L254.336,267.253 L276.195,282.915 L277.591,283.915 L276.031,284.635 L270.618,287.136 L302.088,309.885 L282.569,279.696 L282.01,278.832 L282.89,278.298 L287.488,275.51 L270.949,256.641 L270.098,255.668 L271.253,255.088 L275.978,252.714 L263.354,231.19 z\" fill=\"#000000\"/>\n    </g>\n    <g id=\"label\">\n      <text transform=\"matrix(1, 0, 0, 1, 379.998, 574.538)\">\n        <tspan x=\"-69.445\" y=\"4.5\" font-family=\"Arial,ArialMT\" font-size=\"21\" fill=\"#000000\">Photosystem II</tspan>\n      </text>\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/plastocyanin.svg":
/*!*************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/plastocyanin.svg ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"plastocyanin\" transform=\"translate(0, 0)\">\n    <g id=\"shape\">\n      <path d=\"M765.396,461.225 C755.975,461.225 748.337,453.587 748.337,444.165 C748.337,434.744 755.975,427.106 765.396,427.106 C774.818,427.106 782.456,434.744 782.456,444.165 C782.456,453.587 774.818,461.225 765.396,461.225 z\" fill=\"#5B9BD5\"/>\n      <path d=\"M765.396,461.225 C755.975,461.225 748.337,453.587 748.337,444.165 C748.337,434.744 755.975,427.106 765.396,427.106 C774.818,427.106 782.456,434.744 782.456,444.165 C782.456,453.587 774.818,461.225 765.396,461.225 z\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n    </g>\n    <g id=\"cofactor\">\n      <text transform=\"matrix(1, 0, 0, 1, 774.896, 438.433)\">\n        <tspan x=\"-14.586\" y=\"5.378\" font-family=\"Arial,ArialMT\" font-size=\"10\" fill=\"#000000\">Cu²⁺</tspan>\n      </text>\n    </g>\n    <text transform=\"matrix(1, 0, 0, 1, 768.896, 480.233)\">\n      <tspan x=\"-14.586\" y=\"5.378\" font-family=\"Arial,ArialMT\" font-size=\"21\" fill=\"#000000\">Pc</tspan>\n    </text>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/plastoquinone.svg":
/*!**************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/plastoquinone.svg ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"plastoquinone\" transform=\"translate(0, 0)\">\n    <g id=\"shape\">\n      <path d=\"M519.983,354.984 L510.134,337.925 L519.983,320.865 L539.681,320.865 L549.53,337.925 L539.681,354.984 z\" fill=\"#FFE698\"/>\n      <path d=\"M519.983,354.984 L510.134,337.925 L519.983,320.865 L539.681,320.865 L549.53,337.925 L539.681,354.984 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n    </g>\n    <text transform=\"matrix(1, 0, 0, 1, 529.332, 390.225)\">\n      <tspan x=\"-45.271\" y=\"5.689\" font-family=\"Arial,ArialMT\" font-size=\"21\" fill=\"#000000\">PQ/PQH₂</tspan>\n    </text>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/proton-flux.svg":
/*!************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/proton-flux.svg ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"proton-flux\" transform=\"translate(0, 0)\">\n    <g>\n      <g id=\"ps-ii-atp-synthase\">\n        <path d=\"M997.144,487.575 C918.689,503.493 853.657,513.312 766.726,513.312 C664.863,513.312 581.4,508.078 522.072,496.247\" fill-opacity=\"0\" stroke=\"#00BCFF\" stroke-width=\"3\"/>\n        <path d=\"M997.144,487.575 L995.242,492.251 L1005.374,485.892 L993.559,484.021 z\" fill=\"#00BCFF\" fill-opacity=\"1\" stroke=\"#00BCFF\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n      <g id=\"h2o_lumen\">\n        <path d=\"M489.463,462.261 C480.427,446.861 450.435,434.397 427.051,425.211\" fill-opacity=\"0\" stroke=\"#00BCFF\" stroke-width=\"3\"/>\n        <path d=\"M489.463,462.261 L484.632,460.797 L491.895,470.301 L492.672,458.365 z\" fill=\"#00BCFF\" fill-opacity=\"1\" stroke=\"#00BCFF\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n    </g>\n    <g id=\"atp-synthase\">\n      <g>\n        <path d=\"M1124.963,99.587 C1103.894,118.51 1091.082,134.839 1091.082,156.221 L1091.082,407.359 C1091.082,434.065 1067.677,456.142 1050.138,471.697\" fill-opacity=\"0\" stroke=\"#00BCFF\" stroke-width=\"3\"/>\n        <path d=\"M1124.963,99.587 L1125.626,104.591 L1131.28,94.05 L1120.089,98.274 z\" fill=\"#00BCFF\" fill-opacity=\"1\" stroke=\"#00BCFF\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n      <text transform=\"matrix(1, 0, 0, 1, 1151.418, 85.829)\">\n        <tspan x=\"-13.729\" y=\"8\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">H⁺</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 1030.685, 480.747)\">\n        <tspan x=\"-13.729\" y=\"8\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">H⁺</tspan>\n      </text>\n    </g>\n    <g id=\"stroma-ps-ii\">\n      <g>\n        <path d=\"M415.571,253.347 C414.877,268.923 422.449,282.144 430.181,292.514\" fill-opacity=\"0\" stroke=\"#00BCFF\" stroke-width=\"3\"/>\n        <path d=\"M430.181,292.514 L425.149,292.917 L435.383,299.109 L431.745,287.714 z\" fill=\"#00BCFF\" fill-opacity=\"1\" stroke=\"#00BCFF\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n      <text transform=\"matrix(1, 0, 0, 1, 420.743, 237.847)\">\n        <tspan x=\"-13.729\" y=\"8\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">H⁺</tspan>\n      </text>\n    </g>\n    <g id=\"stroma-b6f\">\n      <g>\n        <path d=\"M626.694,254.347 C627.388,269.923 619.816,283.144 612.084,293.514\" fill-opacity=\"0\" stroke=\"#00BCFF\" stroke-width=\"3\"/>\n        <path d=\"M612.084,293.514 L610.52,288.714 L606.882,300.109 L617.115,293.917 z\" fill=\"#00BCFF\" fill-opacity=\"1\" stroke=\"#00BCFF\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n      <text transform=\"matrix(1, 0, 0, 1, 631.035, 238.847)\">\n        <tspan x=\"-13.729\" y=\"8\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">H⁺</tspan>\n      </text>\n    </g>\n    <g id=\"b6f-lumen\">\n      <g>\n        <path d=\"M628.978,366.195 C599.455,375.608 595.214,405.38 621.862,421.125\" fill-opacity=\"0\" stroke=\"#00BCFF\" stroke-width=\"3\"/>\n        <path d=\"M621.862,421.125 L617.513,423.689 L629.425,424.78 L621.168,416.126 z\" fill=\"#00BCFF\" fill-opacity=\"1\" stroke=\"#00BCFF\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n      <text transform=\"matrix(1, 0, 0, 1, 652.013, 433.79)\">\n        <tspan x=\"-13.729\" y=\"8\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">H⁺</tspan>\n      </text>\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/ptox.svg":
/*!*****************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/ptox.svg ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"ptox\" transform=\"translate(0, 0)\">\n    <g id=\"shape\">\n      <path d=\"M529.832,302.301 C511.558,302.301 496.745,292.471 496.745,280.346 C496.745,268.22 511.558,258.39 529.832,258.39 C548.106,258.39 562.919,268.22 562.919,280.346 C562.919,292.471 548.106,302.301 529.832,302.301 z\" fill=\"#C2AAFF\"/>\n      <path d=\"M529.832,302.301 C511.558,302.301 496.745,292.471 496.745,280.346 C496.745,268.22 511.558,258.39 529.832,258.39 C548.106,258.39 562.919,268.22 562.919,280.346 C562.919,292.471 548.106,302.301 529.832,302.301 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n    </g>\n    <text transform=\"matrix(1, 0, 0, 1, 529.332, 279.846)\">\n      <tspan x=\"-24.341\" y=\"5.5\" font-family=\"Arial,ArialMT\" font-size=\"18\" fill=\"#000000\">PTOX</tspan>\n    </text>\n    <g id=\"reaction\">\n      <g>\n        <path d=\"M561.614,243.741 C551.06,257.538 541.669,265.828 529.576,265.828 C513.595,265.828 500.385,248.871 491.077,236.166\" fill-opacity=\"0\" stroke=\"#41719C\" stroke-width=\"3\"/>\n        <path d=\"M561.614,243.741 L563.345,248.483 L566.582,236.968 L556.571,243.515 z\" fill=\"#41719C\" fill-opacity=\"1\" stroke=\"#41719C\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n      <text transform=\"matrix(1, 0, 0, 1, 490.177, 214.32)\">\n        <tspan x=\"-14.396\" y=\"8\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">O₂</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 570.337, 214.32)\">\n        <tspan x=\"-23.062\" y=\"8\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">H₂O</tspan>\n      </text>\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/quenching.svg":
/*!**********************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/quenching.svg ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"quenching\" transform=\"translate(0, 0)\">\n    <g id=\"pmf\">\n      <g>\n        <path d=\"M134.204,442.013 C167.869,484.817 173.944,489.253 214.047,506.28 C248.338,520.839 363.007,515.226 393.063,515.933\" fill-opacity=\"0\" stroke=\"#EF2D37\" stroke-width=\"4\" stroke-dasharray=\"12,4\"/>\n        <path d=\"M134.204,442.013 L139.956,441.572 L128.283,434.456 L132.398,447.492 z\" fill=\"#EF2D37\" fill-opacity=\"1\" stroke=\"#EF2D37\" stroke-width=\"4\" stroke-opacity=\"1\"/>\n      </g>\n      <g>\n        <path d=\"M260.647,406.851 C273.605,452.142 303.979,490.827 345.682,509.239 C381.841,525.203 455.614,508.552 480.194,498.857\" fill-opacity=\"0\" stroke=\"#EF2D37\" stroke-width=\"4\" stroke-dasharray=\"12,4\"/>\n        <path d=\"M260.647,406.851 L266.082,408.783 L258.306,397.54 L256.772,411.125 z\" fill=\"#EF2D37\" fill-opacity=\"1\" stroke=\"#EF2D37\" stroke-width=\"4\" stroke-opacity=\"1\"/>\n      </g>\n    </g>\n    <g id=\"qi\">\n      <text transform=\"matrix(1, 0, 0, 1, 84.384, 180.776)\">\n        <tspan x=\"-10.008\" y=\"7.455\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">qI</tspan>\n      </text>\n      <g>\n        <path d=\"M114.6,163.212 L144.5,139.069\" fill-opacity=\"0\" stroke=\"#EF2D37\" stroke-width=\"4\" stroke-dasharray=\"8,8\"/>\n        <path d=\"M114.6,163.212 L114.074,157.468 L107.131,169.244 L120.105,164.937 z\" fill=\"#EF2D37\" fill-opacity=\"1\" stroke=\"#EF2D37\" stroke-width=\"4\" stroke-opacity=\"1\"/>\n      </g>\n    </g>\n    <g id=\"qe\">\n      <g>\n        <path d=\"M205.418,405.643 L235.318,381.499\" fill-opacity=\"0\" stroke=\"#EF2D37\" stroke-width=\"4\" stroke-dasharray=\"8,8\"/>\n        <path d=\"M205.418,405.643 L204.892,399.898 L197.949,411.674 L210.923,407.367 z\" fill=\"#EF2D37\" fill-opacity=\"1\" stroke=\"#EF2D37\" stroke-width=\"4\" stroke-opacity=\"1\"/>\n      </g>\n      <text transform=\"matrix(1, 0, 0, 1, 181.616, 428.793)\">\n        <tspan x=\"-14.678\" y=\"7.455\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">qE</tspan>\n      </text>\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/stroma.svg":
/*!*******************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/stroma.svg ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <defs>\n    <linearGradient id=\"Gradient_1\" gradientUnits=\"userSpaceOnUse\" x1=\"700\" y1=\"0\" x2=\"700\" y2=\"296.004\">\n      <stop offset=\"0.566\" stop-color=\"#FFFFFF\" stop-opacity=\"1\"/>\n      <stop offset=\"1\" stop-color=\"#0070C4\"/>\n    </linearGradient>\n  </defs>\n  <g id=\"stroma\" transform=\"translate(0, 0)\">\n    <text transform=\"matrix(1, 0, 0, 1, 1355.338, 279.014)\">\n      <tspan x=\"-34.518\" y=\"7.212\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">stroma</tspan>\n    </text>\n    <path d=\"M-0,0 L1400,0 L1400,296.004 L-0,296.004 L-0,0 z\" fill=\"url(#Gradient_1)\" id=\"shape\" opacity=\"0.123\"/>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/thylakoidmembrane.svg":
/*!******************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/thylakoidmembrane.svg ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"thylakoidmembrane\">\n    <path d=\"M0,296.004 L1400,296.004 L1400,376.004 L0,376.004 L0,296.004 z\" fill=\"#DBDBDB\"/>\n    <path d=\"M-0,296.504 L1400,296.504\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n    <path d=\"M0,375.514 L1400,375.514\" fill-opacity=\"0\" stroke=\"#000000\" stroke-width=\"1\"/>\n    <g id=\"lipid-bilayer\">\n      <path d=\"M9.083,374.824 C5.229,374.824 2.104,371.7 2.104,367.845 C2.106,365.274 3.469,363.253 5.534,361.859 C6.713,357.667 6.76,355.22 4.576,351.281 C4.496,351.15 4.414,351.017 4.304,350.839 C4.386,350.972 4.096,350.505 4.032,350.401 C3.812,350.045 3.655,349.781 3.51,349.518 C2.59,347.849 2.357,346.429 2.934,344.623 C3.13,344.009 3.338,343.466 3.679,342.64 C3.717,342.548 3.76,342.446 3.839,342.255 C3.903,342.1 3.95,341.987 3.995,341.876 C4.72,340.102 5.01,338.968 5.01,337.435 C5.01,337.005 5.358,336.657 5.787,336.657 C6.217,336.657 6.565,337.005 6.565,337.435 C6.565,339.206 6.229,340.52 5.435,342.464 C5.388,342.578 5.341,342.694 5.276,342.85 C5.196,343.042 5.154,343.144 5.117,343.234 C4.79,344.024 4.596,344.533 4.416,345.096 C3.981,346.455 4.144,347.446 4.872,348.768 C5.002,349.004 5.147,349.248 5.355,349.584 C5.394,349.647 5.421,349.69 5.488,349.799 C5.556,349.908 5.556,349.908 5.625,350.018 C5.738,350.201 5.822,350.337 5.906,350.475 C8.122,354.066 8.198,357.177 7.328,361.115 C8.603,360.855 8.015,360.92 9.083,360.866 C10.204,360.923 9.563,360.855 10.995,361.147 C11.967,357.208 11.874,354.945 9.843,351.281 C9.763,351.15 9.681,351.017 9.57,350.839 C9.653,350.972 9.362,350.505 9.299,350.401 C9.079,350.045 8.922,349.781 8.777,349.518 C7.857,347.849 7.624,346.429 8.201,344.623 C8.397,344.009 8.605,343.466 8.946,342.64 C8.984,342.548 9.027,342.446 9.106,342.255 C9.17,342.1 9.217,341.987 9.262,341.876 C9.987,340.102 10.276,338.968 10.276,337.435 C10.276,337.005 10.625,336.657 11.054,336.657 C11.483,336.657 11.832,337.005 11.832,337.435 C11.832,339.206 11.496,340.52 10.702,342.464 C10.655,342.578 10.608,342.694 10.543,342.85 C10.463,343.042 10.421,343.144 10.383,343.234 C10.057,344.024 9.862,344.533 9.682,345.096 C9.248,346.455 9.411,347.446 10.139,348.768 C10.269,349.004 10.414,349.248 10.622,349.584 C10.661,349.647 10.688,349.69 10.755,349.799 C10.823,349.908 10.823,349.908 10.892,350.018 C11.005,350.201 11.089,350.337 11.172,350.475 C13.412,354.174 13.579,357.684 12.449,361.735 C14.726,363.062 15.93,365.245 16.062,367.845 C16.062,371.7 12.937,374.824 9.083,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M9.083,297.184 C12.937,297.184 16.062,300.308 16.062,304.163 C16.06,306.734 14.697,308.755 12.632,310.149 C11.453,314.341 11.406,316.788 13.59,320.727 C13.67,320.858 13.751,320.991 13.862,321.169 C13.78,321.036 14.07,321.503 14.134,321.607 C14.354,321.963 14.511,322.227 14.656,322.49 C15.575,324.159 15.809,325.579 15.232,327.385 C15.036,327.999 14.828,328.542 14.486,329.368 C14.449,329.46 14.406,329.562 14.327,329.753 C14.263,329.908 14.216,330.021 14.17,330.132 C13.446,331.906 13.156,333.04 13.156,334.573 C13.156,335.003 12.808,335.351 12.379,335.351 C11.949,335.351 11.601,335.003 11.601,334.573 C11.601,332.802 11.937,331.488 12.731,329.544 C12.777,329.43 12.825,329.314 12.89,329.158 C12.97,328.966 13.012,328.864 13.049,328.774 C13.376,327.984 13.57,327.475 13.75,326.912 C14.184,325.553 14.022,324.562 13.294,323.24 C13.164,323.004 13.018,322.76 12.811,322.424 C12.772,322.361 12.745,322.318 12.678,322.209 C12.61,322.1 12.61,322.1 12.541,321.99 C12.428,321.807 12.344,321.671 12.26,321.533 C10.044,317.942 9.968,314.831 10.838,310.893 C9.563,311.153 10.15,311.088 9.083,311.142 C7.962,311.085 8.603,311.153 7.171,310.861 C6.198,314.8 6.292,317.063 8.323,320.727 C8.403,320.858 8.485,320.991 8.595,321.169 C8.513,321.036 8.803,321.503 8.867,321.607 C9.087,321.963 9.244,322.227 9.389,322.49 C10.309,324.159 10.542,325.579 9.965,327.385 C9.769,327.999 9.561,328.542 9.22,329.368 C9.182,329.46 9.139,329.562 9.06,329.753 C8.996,329.908 8.949,330.021 8.904,330.132 C8.179,331.906 7.889,333.04 7.889,334.573 C7.889,335.003 7.541,335.351 7.112,335.351 C6.682,335.351 6.334,335.003 6.334,334.573 C6.334,332.802 6.67,331.488 7.464,329.544 C7.51,329.43 7.558,329.314 7.623,329.158 C7.703,328.966 7.745,328.864 7.782,328.774 C8.109,327.984 8.303,327.475 8.483,326.912 C8.917,325.553 8.755,324.562 8.027,323.24 C7.897,323.004 7.751,322.76 7.544,322.424 C7.505,322.361 7.478,322.318 7.411,322.209 C7.343,322.1 7.343,322.1 7.274,321.99 C7.161,321.807 7.077,321.671 6.993,321.533 C4.754,317.834 4.587,314.324 5.717,310.273 C3.44,308.946 2.235,306.763 2.104,304.163 C2.104,300.308 5.229,297.184 9.083,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M23.041,374.824 C19.186,374.824 16.062,371.7 16.062,367.845 C16.064,365.274 17.427,363.253 19.492,361.859 C20.671,357.667 20.718,355.22 18.534,351.281 C18.454,351.15 18.372,351.017 18.262,350.839 C18.344,350.972 18.054,350.505 17.99,350.401 C17.77,350.045 17.613,349.781 17.468,349.518 C16.548,347.849 16.315,346.429 16.892,344.623 C17.088,344.009 17.296,343.466 17.637,342.64 C17.675,342.548 17.718,342.446 17.797,342.255 C17.861,342.1 17.908,341.987 17.953,341.876 C18.678,340.102 18.968,338.968 18.968,337.435 C18.968,337.005 19.316,336.657 19.745,336.657 C20.175,336.657 20.523,337.005 20.523,337.435 C20.523,339.206 20.187,340.52 19.393,342.464 C19.346,342.578 19.299,342.694 19.234,342.85 C19.154,343.042 19.112,343.144 19.075,343.234 C18.748,344.024 18.554,344.533 18.374,345.096 C17.939,346.455 18.102,347.446 18.83,348.768 C18.96,349.004 19.105,349.248 19.313,349.584 C19.352,349.647 19.379,349.69 19.446,349.799 C19.514,349.908 19.514,349.908 19.583,350.018 C19.696,350.201 19.78,350.337 19.863,350.475 C22.08,354.066 22.156,357.177 21.286,361.115 C22.561,360.855 21.973,360.92 23.041,360.866 C24.162,360.923 23.521,360.855 24.953,361.147 C25.925,357.208 25.832,354.945 23.801,351.281 C23.721,351.15 23.639,351.017 23.528,350.839 C23.611,350.972 23.32,350.505 23.257,350.401 C23.037,350.045 22.88,349.781 22.735,349.518 C21.815,347.849 21.582,346.429 22.159,344.623 C22.355,344.009 22.563,343.466 22.904,342.64 C22.942,342.548 22.984,342.446 23.064,342.255 C23.128,342.1 23.175,341.987 23.22,341.876 C23.945,340.102 24.234,338.968 24.234,337.435 C24.234,337.005 24.582,336.657 25.012,336.657 C25.441,336.657 25.79,337.005 25.79,337.435 C25.79,339.206 25.454,340.52 24.66,342.464 C24.613,342.578 24.565,342.694 24.501,342.85 C24.421,343.042 24.379,343.144 24.341,343.234 C24.015,344.024 23.82,344.533 23.64,345.096 C23.206,346.455 23.369,347.446 24.097,348.768 C24.227,349.004 24.372,349.248 24.58,349.584 C24.619,349.647 24.646,349.69 24.713,349.799 C24.781,349.908 24.781,349.908 24.849,350.018 C24.963,350.201 25.047,350.337 25.13,350.475 C27.37,354.174 27.537,357.684 26.407,361.735 C28.684,363.062 29.888,365.245 30.02,367.845 C30.02,371.7 26.895,374.824 23.041,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M23.041,297.184 C26.895,297.184 30.02,300.308 30.02,304.163 C30.018,306.734 28.655,308.755 26.59,310.149 C25.411,314.341 25.364,316.788 27.548,320.727 C27.628,320.858 27.709,320.991 27.82,321.169 C27.738,321.036 28.028,321.503 28.092,321.607 C28.312,321.963 28.469,322.227 28.614,322.49 C29.533,324.159 29.767,325.579 29.19,327.385 C28.994,327.999 28.786,328.542 28.444,329.368 C28.407,329.46 28.364,329.562 28.285,329.753 C28.221,329.908 28.174,330.021 28.128,330.132 C27.404,331.906 27.114,333.04 27.114,334.573 C27.114,335.003 26.766,335.351 26.336,335.351 C25.907,335.351 25.559,335.003 25.559,334.573 C25.559,332.802 25.895,331.488 26.689,329.544 C26.735,329.43 26.783,329.314 26.848,329.158 C26.928,328.966 26.97,328.864 27.007,328.774 C27.333,327.984 27.528,327.475 27.708,326.912 C28.142,325.553 27.98,324.562 27.252,323.24 C27.121,323.004 26.976,322.76 26.769,322.424 C26.73,322.361 26.703,322.318 26.636,322.209 C26.568,322.1 26.568,322.1 26.499,321.99 C26.386,321.807 26.301,321.671 26.218,321.533 C24.002,317.942 23.926,314.831 24.796,310.893 C23.521,311.153 24.108,311.088 23.041,311.142 C21.92,311.085 22.561,311.153 21.128,310.861 C20.156,314.8 20.25,317.063 22.281,320.727 C22.361,320.858 22.442,320.991 22.553,321.169 C22.471,321.036 22.761,321.503 22.825,321.607 C23.045,321.963 23.202,322.227 23.347,322.49 C24.267,324.159 24.5,325.579 23.923,327.385 C23.727,327.999 23.519,328.542 23.177,329.368 C23.14,329.46 23.097,329.562 23.018,329.753 C22.954,329.908 22.907,330.021 22.862,330.132 C22.137,331.906 21.847,333.04 21.847,334.573 C21.847,335.003 21.499,335.351 21.07,335.351 C20.64,335.351 20.292,335.003 20.292,334.573 C20.292,332.802 20.628,331.488 21.422,329.544 C21.468,329.43 21.516,329.314 21.581,329.158 C21.661,328.966 21.703,328.864 21.74,328.774 C22.067,327.984 22.261,327.475 22.441,326.912 C22.875,325.553 22.713,324.562 21.985,323.24 C21.855,323.004 21.709,322.76 21.502,322.424 C21.463,322.361 21.436,322.318 21.369,322.209 C21.301,322.1 21.301,322.1 21.232,321.99 C21.119,321.807 21.035,321.671 20.951,321.533 C18.712,317.834 18.545,314.324 19.675,310.273 C17.398,308.946 16.193,306.763 16.062,304.163 C16.062,300.308 19.186,297.184 23.041,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M36.999,374.824 C33.144,374.824 30.02,371.7 30.02,367.845 C30.022,365.274 31.385,363.253 33.45,361.859 C34.629,357.667 34.676,355.22 32.492,351.281 C32.412,351.15 32.33,351.017 32.22,350.839 C32.302,350.972 32.012,350.505 31.948,350.401 C31.728,350.045 31.571,349.781 31.426,349.518 C30.506,347.849 30.273,346.429 30.85,344.623 C31.046,344.009 31.254,343.466 31.595,342.64 C31.633,342.548 31.676,342.446 31.755,342.255 C31.819,342.1 31.866,341.987 31.911,341.876 C32.636,340.102 32.925,338.968 32.925,337.435 C32.925,337.005 33.274,336.657 33.703,336.657 C34.133,336.657 34.481,337.005 34.481,337.435 C34.481,339.206 34.145,340.52 33.351,342.464 C33.304,342.578 33.257,342.694 33.192,342.85 C33.112,343.042 33.07,343.144 33.033,343.234 C32.706,344.024 32.511,344.533 32.331,345.096 C31.897,346.455 32.06,347.446 32.788,348.768 C32.918,349.004 33.063,349.248 33.271,349.584 C33.31,349.647 33.337,349.69 33.404,349.799 C33.472,349.908 33.472,349.908 33.541,350.018 C33.654,350.201 33.738,350.337 33.821,350.475 C36.037,354.066 36.113,357.177 35.244,361.115 C36.519,360.855 35.931,360.92 36.999,360.866 C38.12,360.923 37.479,360.855 38.911,361.147 C39.883,357.208 39.79,354.945 37.758,351.281 C37.679,351.15 37.597,351.017 37.486,350.839 C37.569,350.972 37.278,350.505 37.215,350.401 C36.995,350.045 36.838,349.781 36.693,349.518 C35.773,347.849 35.54,346.429 36.117,344.623 C36.313,344.009 36.521,343.466 36.862,342.64 C36.9,342.548 36.942,342.446 37.022,342.255 C37.086,342.1 37.133,341.987 37.178,341.876 C37.902,340.102 38.192,338.968 38.192,337.435 C38.192,337.005 38.54,336.657 38.97,336.657 C39.399,336.657 39.747,337.005 39.747,337.435 C39.747,339.206 39.412,340.52 38.618,342.464 C38.571,342.578 38.523,342.694 38.459,342.85 C38.379,343.042 38.337,343.144 38.299,343.234 C37.973,344.024 37.778,344.533 37.598,345.096 C37.164,346.455 37.327,347.446 38.055,348.768 C38.185,349.004 38.33,349.248 38.538,349.584 C38.576,349.647 38.603,349.69 38.671,349.799 C38.738,349.908 38.738,349.908 38.807,350.018 C38.921,350.201 39.005,350.337 39.088,350.475 C41.328,354.174 41.495,357.684 40.365,361.735 C42.642,363.062 43.846,365.245 43.978,367.845 C43.978,371.7 40.853,374.824 36.999,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M36.999,297.184 C40.853,297.184 43.978,300.308 43.978,304.163 C43.976,306.734 42.613,308.755 40.548,310.149 C39.369,314.341 39.322,316.788 41.506,320.727 C41.586,320.858 41.667,320.991 41.778,321.169 C41.696,321.036 41.986,321.503 42.05,321.607 C42.27,321.963 42.427,322.227 42.572,322.49 C43.491,324.159 43.724,325.579 43.147,327.385 C42.952,327.999 42.744,328.542 42.402,329.368 C42.364,329.46 42.322,329.562 42.242,329.753 C42.179,329.908 42.132,330.021 42.086,330.132 C41.362,331.906 41.072,333.04 41.072,334.573 C41.072,335.003 40.724,335.351 40.294,335.351 C39.865,335.351 39.517,335.003 39.517,334.573 C39.517,332.802 39.853,331.488 40.647,329.544 C40.693,329.43 40.741,329.314 40.806,329.158 C40.886,328.966 40.928,328.864 40.965,328.774 C41.291,327.984 41.486,327.475 41.666,326.912 C42.1,325.553 41.938,324.562 41.21,323.24 C41.079,323.004 40.934,322.76 40.727,322.424 C40.688,322.361 40.661,322.318 40.594,322.209 C40.526,322.1 40.526,322.1 40.457,321.99 C40.344,321.807 40.259,321.671 40.176,321.533 C37.96,317.942 37.884,314.831 38.754,310.893 C37.479,311.153 38.066,311.088 36.999,311.142 C35.878,311.085 36.519,311.153 35.086,310.861 C34.114,314.8 34.208,317.063 36.239,320.727 C36.319,320.858 36.4,320.991 36.511,321.169 C36.429,321.036 36.719,321.503 36.783,321.607 C37.003,321.963 37.16,322.227 37.305,322.49 C38.224,324.159 38.458,325.579 37.881,327.385 C37.685,327.999 37.477,328.542 37.135,329.368 C37.098,329.46 37.055,329.562 36.976,329.753 C36.912,329.908 36.865,330.021 36.819,330.132 C36.095,331.906 35.805,333.04 35.805,334.573 C35.805,335.003 35.457,335.351 35.028,335.351 C34.598,335.351 34.25,335.003 34.25,334.573 C34.25,332.802 34.586,331.488 35.38,329.544 C35.426,329.43 35.474,329.314 35.539,329.158 C35.619,328.966 35.661,328.864 35.698,328.774 C36.025,327.984 36.219,327.475 36.399,326.912 C36.833,325.553 36.671,324.562 35.943,323.24 C35.813,323.004 35.667,322.76 35.46,322.424 C35.421,322.361 35.394,322.318 35.327,322.209 C35.259,322.1 35.259,322.1 35.19,321.99 C35.077,321.807 34.993,321.671 34.909,321.533 C32.67,317.834 32.503,314.324 33.632,310.273 C31.356,308.946 30.151,306.763 30.02,304.163 C30.02,300.308 33.144,297.184 36.999,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M50.957,374.824 C47.102,374.824 43.978,371.7 43.978,367.845 C43.98,365.274 45.343,363.253 47.408,361.859 C48.587,357.667 48.634,355.22 46.45,351.281 C46.37,351.15 46.288,351.017 46.177,350.839 C46.26,350.972 45.969,350.505 45.906,350.401 C45.686,350.045 45.529,349.781 45.384,349.518 C44.464,347.849 44.231,346.429 44.808,344.623 C45.004,344.009 45.212,343.466 45.553,342.64 C45.591,342.548 45.634,342.446 45.713,342.255 C45.777,342.1 45.824,341.987 45.869,341.876 C46.594,340.102 46.883,338.968 46.883,337.435 C46.883,337.005 47.232,336.657 47.661,336.657 C48.09,336.657 48.439,337.005 48.439,337.435 C48.439,339.206 48.103,340.52 47.309,342.464 C47.262,342.578 47.215,342.694 47.15,342.85 C47.07,343.042 47.028,343.144 46.99,343.234 C46.664,344.024 46.469,344.533 46.289,345.096 C45.855,346.455 46.018,347.446 46.746,348.768 C46.876,349.004 47.021,349.248 47.229,349.584 C47.268,349.647 47.295,349.69 47.362,349.799 C47.43,349.908 47.43,349.908 47.498,350.018 C47.612,350.201 47.696,350.337 47.779,350.475 C49.995,354.066 50.071,357.177 49.201,361.115 C50.476,360.855 49.889,360.92 50.957,360.866 C52.078,360.923 51.437,360.855 52.869,361.147 C53.841,357.208 53.748,354.945 51.716,351.281 C51.636,351.15 51.555,351.017 51.444,350.839 C51.527,350.972 51.236,350.505 51.172,350.401 C50.952,350.045 50.795,349.781 50.651,349.518 C49.731,347.849 49.498,346.429 50.075,344.623 C50.271,344.009 50.478,343.466 50.82,342.64 C50.858,342.548 50.9,342.446 50.98,342.255 C51.044,342.1 51.091,341.987 51.136,341.876 C51.86,340.102 52.15,338.968 52.15,337.435 C52.15,337.005 52.498,336.657 52.928,336.657 C53.357,336.657 53.705,337.005 53.705,337.435 C53.705,339.206 53.37,340.52 52.576,342.464 C52.529,342.578 52.481,342.694 52.416,342.85 C52.337,343.042 52.295,343.144 52.257,343.234 C51.931,344.024 51.736,344.533 51.556,345.096 C51.122,346.455 51.285,347.446 52.013,348.768 C52.143,349.004 52.288,349.248 52.496,349.584 C52.534,349.647 52.561,349.69 52.629,349.799 C52.696,349.908 52.696,349.908 52.765,350.018 C52.879,350.201 52.963,350.337 53.046,350.475 C55.285,354.174 55.452,357.684 54.323,361.735 C56.6,363.062 57.804,365.245 57.936,367.845 C57.936,371.7 54.811,374.824 50.957,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M50.957,297.184 C54.811,297.184 57.936,300.308 57.936,304.163 C57.934,306.734 56.571,308.755 54.506,310.149 C53.327,314.341 53.28,316.788 55.464,320.727 C55.544,320.858 55.625,320.991 55.736,321.169 C55.654,321.036 55.944,321.503 56.008,321.607 C56.228,321.963 56.385,322.227 56.53,322.49 C57.449,324.159 57.682,325.579 57.105,327.385 C56.909,327.999 56.702,328.542 56.36,329.368 C56.322,329.46 56.28,329.562 56.2,329.753 C56.136,329.908 56.09,330.021 56.044,330.132 C55.32,331.906 55.03,333.04 55.03,334.573 C55.03,335.003 54.682,335.351 54.252,335.351 C53.823,335.351 53.475,335.003 53.475,334.573 C53.475,332.802 53.811,331.488 54.605,329.544 C54.651,329.43 54.699,329.314 54.764,329.158 C54.843,328.966 54.886,328.864 54.923,328.774 C55.249,327.984 55.444,327.475 55.624,326.912 C56.058,325.553 55.896,324.562 55.167,323.24 C55.037,323.004 54.892,322.76 54.685,322.424 C54.646,322.361 54.619,322.318 54.552,322.209 C54.484,322.1 54.484,322.1 54.415,321.99 C54.302,321.807 54.217,321.671 54.134,321.533 C51.918,317.942 51.842,314.831 52.712,310.893 C51.437,311.153 52.024,311.088 50.957,311.142 C49.836,311.085 50.476,311.153 49.044,310.861 C48.072,314.8 48.166,317.063 50.197,320.727 C50.277,320.858 50.358,320.991 50.469,321.169 C50.387,321.036 50.677,321.503 50.741,321.607 C50.961,321.963 51.118,322.227 51.263,322.49 C52.182,324.159 52.415,325.579 51.839,327.385 C51.643,327.999 51.435,328.542 51.093,329.368 C51.056,329.46 51.013,329.562 50.934,329.753 C50.87,329.908 50.823,330.021 50.777,330.132 C50.053,331.906 49.763,333.04 49.763,334.573 C49.763,335.003 49.415,335.351 48.985,335.351 C48.556,335.351 48.208,335.003 48.208,334.573 C48.208,332.802 48.544,331.488 49.338,329.544 C49.384,329.43 49.432,329.314 49.497,329.158 C49.577,328.966 49.619,328.864 49.656,328.774 C49.982,327.984 50.177,327.475 50.357,326.912 C50.791,325.553 50.629,324.562 49.901,323.24 C49.77,323.004 49.625,322.76 49.418,322.424 C49.379,322.361 49.352,322.318 49.285,322.209 C49.217,322.1 49.217,322.1 49.148,321.99 C49.035,321.807 48.95,321.671 48.867,321.533 C46.628,317.834 46.461,314.324 47.59,310.273 C45.314,308.946 44.109,306.763 43.978,304.163 C43.978,300.308 47.102,297.184 50.957,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M64.915,374.824 C61.06,374.824 57.936,371.7 57.936,367.845 C57.937,365.274 59.3,363.253 61.366,361.859 C62.544,357.667 62.592,355.22 60.407,351.281 C60.328,351.15 60.246,351.017 60.135,350.839 C60.218,350.972 59.927,350.505 59.863,350.401 C59.644,350.045 59.487,349.781 59.342,349.518 C58.422,347.849 58.189,346.429 58.766,344.623 C58.962,344.009 59.17,343.466 59.511,342.64 C59.549,342.548 59.591,342.446 59.671,342.255 C59.735,342.1 59.782,341.987 59.827,341.876 C60.551,340.102 60.841,338.968 60.841,337.435 C60.841,337.005 61.189,336.657 61.619,336.657 C62.048,336.657 62.396,337.005 62.397,337.435 C62.396,339.206 62.061,340.52 61.267,342.464 C61.22,342.578 61.172,342.694 61.108,342.85 C61.028,343.042 60.986,343.144 60.948,343.234 C60.622,344.024 60.427,344.533 60.247,345.096 C59.813,346.455 59.976,347.446 60.704,348.768 C60.834,349.004 60.979,349.248 61.187,349.584 C61.226,349.647 61.252,349.69 61.32,349.799 C61.387,349.908 61.387,349.908 61.456,350.018 C61.57,350.201 61.654,350.337 61.737,350.475 C63.953,354.066 64.029,357.177 63.159,361.115 C64.434,360.855 63.847,360.92 64.915,360.866 C66.035,360.923 65.395,360.855 66.827,361.147 C67.799,357.208 67.706,354.945 65.674,351.281 C65.594,351.15 65.513,351.017 65.402,350.839 C65.485,350.972 65.194,350.505 65.13,350.401 C64.91,350.045 64.753,349.781 64.608,349.518 C63.689,347.849 63.456,346.429 64.033,344.623 C64.229,344.009 64.436,343.466 64.778,342.64 C64.816,342.548 64.858,342.446 64.938,342.255 C65.002,342.1 65.048,341.987 65.094,341.876 C65.818,340.102 66.108,338.968 66.108,337.435 C66.108,337.005 66.456,336.657 66.886,336.657 C67.315,336.657 67.663,337.005 67.663,337.435 C67.663,339.206 67.328,340.52 66.534,342.464 C66.487,342.578 66.439,342.694 66.374,342.85 C66.295,343.042 66.253,343.144 66.215,343.234 C65.889,344.024 65.694,344.533 65.514,345.096 C65.08,346.455 65.243,347.446 65.971,348.768 C66.101,349.004 66.246,349.248 66.453,349.584 C66.492,349.647 66.519,349.69 66.587,349.799 C66.654,349.908 66.654,349.908 66.723,350.018 C66.837,350.201 66.921,350.337 67.004,350.475 C69.243,354.174 69.41,357.684 68.281,361.735 C70.557,363.062 71.762,365.245 71.893,367.845 C71.893,371.7 68.769,374.824 64.915,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M64.915,297.184 C68.769,297.184 71.894,300.308 71.894,304.163 C71.892,306.734 70.529,308.755 68.464,310.149 C67.285,314.341 67.238,316.788 69.422,320.727 C69.502,320.858 69.583,320.991 69.694,321.169 C69.611,321.036 69.902,321.503 69.966,321.607 C70.186,321.963 70.343,322.227 70.488,322.49 C71.407,324.159 71.64,325.579 71.063,327.385 C70.867,327.999 70.66,328.542 70.318,329.368 C70.28,329.46 70.238,329.562 70.158,329.753 C70.094,329.908 70.048,330.021 70.002,330.132 C69.278,331.906 68.988,333.04 68.988,334.573 C68.988,335.003 68.64,335.351 68.21,335.351 C67.781,335.351 67.433,335.003 67.433,334.573 C67.433,332.802 67.768,331.488 68.562,329.544 C68.609,329.43 68.657,329.314 68.722,329.158 C68.801,328.966 68.843,328.864 68.881,328.774 C69.207,327.984 69.402,327.475 69.582,326.912 C70.016,325.553 69.853,324.562 69.125,323.24 C68.995,323.004 68.85,322.76 68.643,322.424 C68.604,322.361 68.577,322.318 68.509,322.209 C68.442,322.1 68.442,322.1 68.373,321.99 C68.259,321.807 68.175,321.671 68.092,321.533 C65.876,317.942 65.8,314.831 66.67,310.893 C65.395,311.153 65.982,311.088 64.915,311.142 C63.794,311.085 64.434,311.153 63.002,310.861 C62.03,314.8 62.124,317.063 64.155,320.727 C64.235,320.858 64.316,320.991 64.427,321.169 C64.345,321.036 64.635,321.503 64.699,321.607 C64.919,321.963 65.076,322.227 65.221,322.49 C66.14,324.159 66.373,325.579 65.796,327.385 C65.6,327.999 65.393,328.542 65.051,329.368 C65.013,329.46 64.971,329.562 64.891,329.753 C64.827,329.908 64.781,330.021 64.735,330.132 C64.011,331.906 63.721,333.04 63.721,334.573 C63.721,335.003 63.373,335.351 62.943,335.351 C62.514,335.351 62.166,335.003 62.166,334.573 C62.166,332.802 62.502,331.488 63.296,329.544 C63.342,329.43 63.39,329.314 63.455,329.158 C63.535,328.966 63.577,328.864 63.614,328.774 C63.94,327.984 64.135,327.475 64.315,326.912 C64.749,325.553 64.587,324.562 63.858,323.24 C63.728,323.004 63.583,322.76 63.376,322.424 C63.337,322.361 63.31,322.318 63.243,322.209 C63.175,322.1 63.175,322.1 63.106,321.99 C62.993,321.807 62.908,321.671 62.825,321.533 C60.586,317.834 60.419,314.324 61.548,310.273 C59.272,308.946 58.067,306.763 57.936,304.163 C57.936,300.308 61.06,297.184 64.915,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M78.872,374.824 C75.018,374.824 71.894,371.7 71.894,367.845 C71.895,365.274 73.258,363.253 75.324,361.859 C76.502,357.667 76.549,355.22 74.365,351.281 C74.285,351.15 74.204,351.017 74.093,350.839 C74.176,350.972 73.885,350.505 73.821,350.401 C73.601,350.045 73.444,349.781 73.3,349.518 C72.38,347.849 72.147,346.429 72.724,344.623 C72.92,344.009 73.127,343.466 73.469,342.64 C73.507,342.548 73.549,342.446 73.629,342.255 C73.693,342.1 73.74,341.987 73.785,341.876 C74.509,340.102 74.799,338.968 74.799,337.435 C74.799,337.005 75.147,336.657 75.577,336.657 C76.006,336.657 76.354,337.005 76.354,337.435 C76.354,339.206 76.019,340.52 75.225,342.464 C75.178,342.578 75.13,342.694 75.065,342.85 C74.986,343.042 74.944,343.144 74.906,343.234 C74.58,344.024 74.385,344.533 74.205,345.096 C73.771,346.455 73.934,347.446 74.662,348.768 C74.792,349.004 74.937,349.248 75.145,349.584 C75.183,349.647 75.21,349.69 75.278,349.799 C75.345,349.908 75.345,349.908 75.414,350.018 C75.528,350.201 75.612,350.337 75.695,350.475 C77.911,354.066 77.987,357.177 77.117,361.115 C78.392,360.855 77.805,360.92 78.872,360.866 C79.993,360.923 79.353,360.855 80.785,361.147 C81.757,357.208 81.663,354.945 79.632,351.281 C79.552,351.15 79.471,351.017 79.36,350.839 C79.442,350.972 79.152,350.505 79.088,350.401 C78.868,350.045 78.711,349.781 78.566,349.518 C77.647,347.849 77.414,346.429 77.991,344.623 C78.187,344.009 78.394,343.466 78.736,342.64 C78.774,342.548 78.816,342.446 78.896,342.255 C78.96,342.1 79.006,341.987 79.052,341.876 C79.776,340.102 80.066,338.968 80.066,337.435 C80.066,337.005 80.414,336.657 80.844,336.657 C81.273,336.657 81.621,337.005 81.621,337.435 C81.621,339.206 81.285,340.52 80.491,342.464 C80.445,342.578 80.397,342.694 80.332,342.85 C80.253,343.042 80.21,343.144 80.173,343.234 C79.847,344.024 79.652,344.533 79.472,345.096 C79.038,346.455 79.2,347.446 79.929,348.768 C80.059,349.004 80.204,349.248 80.411,349.584 C80.45,349.647 80.477,349.69 80.544,349.799 C80.612,349.908 80.612,349.908 80.681,350.018 C80.794,350.201 80.879,350.337 80.962,350.475 C83.201,354.174 83.368,357.684 82.239,361.735 C84.515,363.062 85.72,365.245 85.851,367.845 C85.851,371.7 82.727,374.824 78.872,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M78.872,297.184 C82.727,297.184 85.851,300.308 85.851,304.163 C85.85,306.734 84.487,308.755 82.421,310.149 C81.243,314.341 81.196,316.788 83.38,320.727 C83.46,320.858 83.541,320.991 83.652,321.169 C83.569,321.036 83.86,321.503 83.924,321.607 C84.144,321.963 84.301,322.227 84.445,322.49 C85.365,324.159 85.598,325.579 85.021,327.385 C84.825,327.999 84.618,328.542 84.276,329.368 C84.238,329.46 84.196,329.562 84.116,329.753 C84.052,329.908 84.006,330.021 83.96,330.132 C83.236,331.906 82.946,333.04 82.946,334.573 C82.946,335.003 82.598,335.351 82.168,335.351 C81.739,335.351 81.391,335.003 81.391,334.573 C81.391,332.802 81.726,331.488 82.52,329.544 C82.567,329.43 82.615,329.314 82.68,329.158 C82.759,328.966 82.801,328.864 82.839,328.774 C83.165,327.984 83.36,327.475 83.54,326.912 C83.974,325.553 83.811,324.562 83.083,323.24 C82.953,323.004 82.808,322.76 82.6,322.424 C82.562,322.361 82.535,322.318 82.467,322.209 C82.4,322.1 82.4,322.1 82.331,321.99 C82.217,321.807 82.133,321.671 82.05,321.533 C79.834,317.942 79.758,314.831 80.628,310.893 C79.353,311.153 79.94,311.088 78.872,311.142 C77.752,311.085 78.392,311.153 76.96,310.861 C75.988,314.8 76.081,317.063 78.113,320.727 C78.193,320.858 78.274,320.991 78.385,321.169 C78.303,321.036 78.593,321.503 78.657,321.607 C78.877,321.963 79.034,322.227 79.179,322.49 C80.098,324.159 80.331,325.579 79.754,327.385 C79.558,327.999 79.351,328.542 79.009,329.368 C78.971,329.46 78.929,329.562 78.849,329.753 C78.785,329.908 78.739,330.021 78.693,330.132 C77.969,331.906 77.679,333.04 77.679,334.573 C77.679,335.003 77.331,335.351 76.901,335.351 C76.472,335.351 76.124,335.003 76.124,334.573 C76.124,332.802 76.459,331.488 77.253,329.544 C77.3,329.43 77.348,329.314 77.413,329.158 C77.492,328.966 77.534,328.864 77.572,328.774 C77.898,327.984 78.093,327.475 78.273,326.912 C78.707,325.553 78.544,324.562 77.816,323.24 C77.686,323.004 77.541,322.76 77.334,322.424 C77.295,322.361 77.268,322.318 77.2,322.209 C77.133,322.1 77.133,322.1 77.064,321.99 C76.95,321.807 76.866,321.671 76.783,321.533 C74.544,317.834 74.377,314.324 75.506,310.273 C73.23,308.946 72.025,306.763 71.894,304.163 C71.894,300.308 75.018,297.184 78.872,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M92.83,374.824 C88.976,374.824 85.852,371.7 85.852,367.845 C85.853,365.274 87.216,363.253 89.281,361.859 C90.46,357.667 90.507,355.22 88.323,351.281 C88.243,351.15 88.162,351.017 88.051,350.839 C88.134,350.972 87.843,350.505 87.779,350.401 C87.559,350.045 87.402,349.781 87.257,349.518 C86.338,347.849 86.105,346.429 86.682,344.623 C86.878,344.009 87.085,343.466 87.427,342.64 C87.465,342.548 87.507,342.446 87.587,342.255 C87.651,342.1 87.697,341.987 87.743,341.876 C88.467,340.102 88.757,338.968 88.757,337.435 C88.757,337.005 89.105,336.657 89.535,336.657 C89.964,336.657 90.312,337.005 90.312,337.435 C90.312,339.206 89.977,340.52 89.183,342.464 C89.136,342.578 89.088,342.694 89.023,342.85 C88.944,343.042 88.902,343.144 88.864,343.234 C88.538,344.024 88.343,344.533 88.163,345.096 C87.729,346.455 87.892,347.446 88.62,348.768 C88.75,349.004 88.895,349.248 89.102,349.584 C89.141,349.647 89.168,349.69 89.236,349.799 C89.303,349.908 89.303,349.908 89.372,350.018 C89.486,350.201 89.57,350.337 89.653,350.475 C91.869,354.066 91.945,357.177 91.075,361.115 C92.35,360.855 91.763,360.92 92.83,360.866 C93.951,360.923 93.311,360.855 94.743,361.147 C95.715,357.208 95.621,354.945 93.59,351.281 C93.51,351.15 93.429,351.017 93.318,350.839 C93.4,350.972 93.11,350.505 93.046,350.401 C92.826,350.045 92.669,349.781 92.524,349.518 C91.605,347.849 91.372,346.429 91.949,344.623 C92.144,344.009 92.352,343.466 92.694,342.64 C92.732,342.548 92.774,342.446 92.854,342.255 C92.917,342.1 92.964,341.987 93.01,341.876 C93.734,340.102 94.024,338.968 94.024,337.435 C94.024,337.005 94.372,336.657 94.802,336.657 C95.231,336.657 95.579,337.005 95.579,337.435 C95.579,339.206 95.243,340.52 94.449,342.464 C94.403,342.578 94.355,342.694 94.29,342.85 C94.21,343.042 94.168,343.144 94.131,343.234 C93.805,344.024 93.61,344.533 93.43,345.096 C92.996,346.455 93.158,347.446 93.887,348.768 C94.017,349.004 94.162,349.248 94.369,349.584 C94.408,349.647 94.435,349.69 94.502,349.799 C94.57,349.908 94.57,349.908 94.639,350.018 C94.752,350.201 94.837,350.337 94.92,350.475 C97.159,354.174 97.326,357.684 96.197,361.735 C98.473,363.062 99.678,365.245 99.809,367.845 C99.809,371.7 96.685,374.824 92.83,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M92.83,297.184 C96.685,297.184 99.809,300.308 99.809,304.163 C99.808,306.734 98.445,308.755 96.379,310.149 C95.2,314.341 95.153,316.788 97.338,320.727 C97.417,320.858 97.499,320.991 97.61,321.169 C97.527,321.036 97.818,321.503 97.882,321.607 C98.101,321.963 98.258,322.227 98.403,322.49 C99.323,324.159 99.556,325.579 98.979,327.385 C98.783,327.999 98.575,328.542 98.234,329.368 C98.196,329.46 98.154,329.562 98.074,329.753 C98.01,329.908 97.963,330.021 97.918,330.132 C97.194,331.906 96.904,333.04 96.904,334.573 C96.904,335.003 96.556,335.351 96.126,335.351 C95.697,335.351 95.349,335.003 95.348,334.573 C95.349,332.802 95.684,331.488 96.478,329.544 C96.525,329.43 96.573,329.314 96.637,329.158 C96.717,328.966 96.759,328.864 96.797,328.774 C97.123,327.984 97.318,327.475 97.498,326.912 C97.932,325.553 97.769,324.562 97.041,323.24 C96.911,323.004 96.766,322.76 96.558,322.424 C96.52,322.361 96.493,322.318 96.425,322.209 C96.358,322.1 96.358,322.1 96.289,321.99 C96.175,321.807 96.091,321.671 96.008,321.533 C93.792,317.942 93.716,314.831 94.586,310.893 C93.311,311.153 93.898,311.088 92.83,311.142 C91.71,311.085 92.35,311.153 90.918,310.861 C89.946,314.8 90.039,317.063 92.071,320.727 C92.151,320.858 92.232,320.991 92.343,321.169 C92.26,321.036 92.551,321.503 92.615,321.607 C92.835,321.963 92.992,322.227 93.137,322.49 C94.056,324.159 94.289,325.579 93.712,327.385 C93.516,327.999 93.309,328.542 92.967,329.368 C92.929,329.46 92.887,329.562 92.807,329.753 C92.743,329.908 92.697,330.021 92.651,330.132 C91.927,331.906 91.637,333.04 91.637,334.573 C91.637,335.003 91.289,335.351 90.859,335.351 C90.43,335.351 90.082,335.003 90.082,334.573 C90.082,332.802 90.417,331.488 91.211,329.544 C91.258,329.43 91.306,329.314 91.371,329.158 C91.45,328.966 91.492,328.864 91.53,328.774 C91.856,327.984 92.051,327.475 92.231,326.912 C92.665,325.553 92.502,324.562 91.774,323.24 C91.644,323.004 91.499,322.76 91.292,322.424 C91.253,322.361 91.226,322.318 91.158,322.209 C91.091,322.1 91.091,322.1 91.022,321.99 C90.908,321.807 90.824,321.671 90.741,321.533 C88.502,317.834 88.335,314.324 89.464,310.273 C87.187,308.946 85.983,306.763 85.851,304.163 C85.851,300.308 88.976,297.184 92.83,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M106.788,374.824 C102.934,374.824 99.809,371.7 99.809,367.845 C99.811,365.274 101.174,363.253 103.239,361.859 C104.418,357.667 104.465,355.22 102.281,351.281 C102.201,351.15 102.12,351.017 102.009,350.839 C102.091,350.972 101.801,350.505 101.737,350.401 C101.517,350.045 101.36,349.781 101.215,349.518 C100.296,347.849 100.063,346.429 100.64,344.623 C100.836,344.009 101.043,343.466 101.385,342.64 C101.423,342.548 101.465,342.446 101.545,342.255 C101.609,342.1 101.655,341.987 101.701,341.876 C102.425,340.102 102.715,338.968 102.715,337.435 C102.715,337.005 103.063,336.657 103.493,336.657 C103.922,336.657 104.27,337.005 104.27,337.435 C104.27,339.206 103.934,340.52 103.14,342.464 C103.094,342.578 103.046,342.694 102.981,342.85 C102.902,343.042 102.859,343.144 102.822,343.234 C102.496,344.024 102.301,344.533 102.121,345.096 C101.687,346.455 101.85,347.446 102.578,348.768 C102.708,349.004 102.853,349.248 103.06,349.584 C103.099,349.647 103.126,349.69 103.193,349.799 C103.261,349.908 103.261,349.908 103.33,350.018 C103.444,350.201 103.528,350.337 103.611,350.475 C105.827,354.066 105.903,357.177 105.033,361.115 C106.308,360.855 105.721,360.92 106.788,360.866 C107.909,360.923 107.269,360.855 108.701,361.147 C109.673,357.208 109.579,354.945 107.548,351.281 C107.468,351.15 107.387,351.017 107.276,350.839 C107.358,350.972 107.068,350.505 107.004,350.401 C106.784,350.045 106.627,349.781 106.482,349.518 C105.563,347.849 105.33,346.429 105.906,344.623 C106.102,344.009 106.31,343.466 106.652,342.64 C106.689,342.548 106.732,342.446 106.811,342.255 C106.875,342.1 106.922,341.987 106.968,341.876 C107.692,340.102 107.982,338.968 107.982,337.435 C107.982,337.005 108.33,336.657 108.759,336.657 C109.189,336.657 109.537,337.005 109.537,337.435 C109.537,339.206 109.201,340.52 108.407,342.464 C108.361,342.578 108.313,342.694 108.248,342.85 C108.168,343.042 108.126,343.144 108.089,343.234 C107.763,344.024 107.568,344.533 107.388,345.096 C106.954,346.455 107.116,347.446 107.844,348.768 C107.974,349.004 108.12,349.248 108.327,349.584 C108.366,349.647 108.393,349.69 108.46,349.799 C108.528,349.908 108.528,349.908 108.597,350.018 C108.71,350.201 108.795,350.337 108.878,350.475 C111.117,354.174 111.284,357.684 110.155,361.735 C112.431,363.062 113.636,365.245 113.767,367.845 C113.767,371.7 110.643,374.824 106.788,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M106.788,297.184 C110.643,297.184 113.767,300.308 113.767,304.163 C113.766,306.734 112.403,308.755 110.337,310.149 C109.158,314.341 109.111,316.788 111.296,320.727 C111.375,320.858 111.457,320.991 111.568,321.169 C111.485,321.036 111.776,321.503 111.839,321.607 C112.059,321.963 112.216,322.227 112.361,322.49 C113.281,324.159 113.514,325.579 112.937,327.385 C112.741,327.999 112.533,328.542 112.192,329.368 C112.154,329.46 112.112,329.562 112.032,329.753 C111.968,329.908 111.921,330.021 111.876,330.132 C111.151,331.906 110.862,333.04 110.862,334.573 C110.862,335.003 110.514,335.351 110.084,335.351 C109.655,335.351 109.306,335.003 109.306,334.573 C109.306,332.802 109.642,331.488 110.436,329.544 C110.483,329.43 110.531,329.314 110.595,329.158 C110.675,328.966 110.717,328.864 110.755,328.774 C111.081,327.984 111.276,327.475 111.456,326.912 C111.89,325.553 111.727,324.562 110.999,323.24 C110.869,323.004 110.724,322.76 110.516,322.424 C110.477,322.361 110.45,322.318 110.383,322.209 C110.315,322.1 110.315,322.1 110.247,321.99 C110.133,321.807 110.049,321.671 109.966,321.533 C107.75,317.942 107.674,314.831 108.544,310.893 C107.269,311.153 107.856,311.088 106.788,311.142 C105.667,311.085 106.308,311.153 104.876,310.861 C103.904,314.8 103.997,317.063 106.029,320.727 C106.108,320.858 106.19,320.991 106.301,321.169 C106.218,321.036 106.509,321.503 106.573,321.607 C106.792,321.963 106.949,322.227 107.094,322.49 C108.014,324.159 108.247,325.579 107.67,327.385 C107.474,327.999 107.267,328.542 106.925,329.368 C106.887,329.46 106.845,329.562 106.765,329.753 C106.701,329.908 106.654,330.021 106.609,330.132 C105.885,331.906 105.595,333.04 105.595,334.573 C105.595,335.003 105.247,335.351 104.817,335.351 C104.388,335.351 104.04,335.003 104.04,334.573 C104.04,332.802 104.375,331.488 105.169,329.544 C105.216,329.43 105.264,329.314 105.329,329.158 C105.408,328.966 105.45,328.864 105.488,328.774 C105.814,327.984 106.009,327.475 106.189,326.912 C106.623,325.553 106.46,324.562 105.732,323.24 C105.602,323.004 105.457,322.76 105.249,322.424 C105.211,322.361 105.184,322.318 105.116,322.209 C105.049,322.1 105.049,322.1 104.98,321.99 C104.866,321.807 104.782,321.671 104.699,321.533 C102.459,317.834 102.292,314.324 103.422,310.273 C101.145,308.946 99.941,306.763 99.809,304.163 C99.809,300.308 102.934,297.184 106.788,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M120.746,374.824 C116.892,374.824 113.767,371.7 113.767,367.845 C113.769,365.274 115.132,363.253 117.197,361.859 C118.376,357.667 118.423,355.22 116.239,351.281 C116.159,351.15 116.078,351.017 115.967,350.839 C116.049,350.972 115.759,350.505 115.695,350.401 C115.475,350.045 115.318,349.781 115.173,349.518 C114.254,347.849 114.021,346.429 114.598,344.623 C114.794,344.009 115.001,343.466 115.343,342.64 C115.381,342.548 115.423,342.446 115.503,342.255 C115.567,342.1 115.613,341.987 115.659,341.876 C116.383,340.102 116.673,338.968 116.673,337.435 C116.673,337.005 117.021,336.657 117.451,336.657 C117.88,336.657 118.228,337.005 118.228,337.435 C118.228,339.206 117.892,340.52 117.098,342.464 C117.052,342.578 117.004,342.694 116.939,342.85 C116.859,343.042 116.817,343.144 116.78,343.234 C116.454,344.024 116.259,344.533 116.079,345.096 C115.645,346.455 115.807,347.446 116.536,348.768 C116.666,349.004 116.811,349.248 117.018,349.584 C117.057,349.647 117.084,349.69 117.151,349.799 C117.219,349.908 117.219,349.908 117.288,350.018 C117.401,350.201 117.486,350.337 117.569,350.475 C119.785,354.066 119.861,357.177 118.991,361.115 C120.266,360.855 119.679,360.92 120.746,360.866 C121.867,360.923 121.226,360.855 122.659,361.147 C123.631,357.208 123.537,354.945 121.506,351.281 C121.426,351.15 121.345,351.017 121.234,350.839 C121.316,350.972 121.026,350.505 120.962,350.401 C120.742,350.045 120.585,349.781 120.44,349.518 C119.521,347.849 119.287,346.429 119.864,344.623 C120.06,344.009 120.268,343.466 120.61,342.64 C120.647,342.548 120.69,342.446 120.769,342.255 C120.833,342.1 120.88,341.987 120.925,341.876 C121.65,340.102 121.94,338.968 121.94,337.435 C121.94,337.005 122.288,336.657 122.717,336.657 C123.147,336.657 123.495,337.005 123.495,337.435 C123.495,339.206 123.159,340.52 122.365,342.464 C122.319,342.578 122.271,342.694 122.206,342.85 C122.126,343.042 122.084,343.144 122.047,343.234 C121.72,344.024 121.526,344.533 121.346,345.096 C120.912,346.455 121.074,347.446 121.802,348.768 C121.932,349.004 122.078,349.248 122.285,349.584 C122.324,349.647 122.351,349.69 122.418,349.799 C122.486,349.908 122.486,349.908 122.555,350.018 C122.668,350.201 122.752,350.337 122.836,350.475 C125.075,354.174 125.242,357.684 124.112,361.735 C126.389,363.062 127.594,365.245 127.725,367.845 C127.725,371.7 124.601,374.824 120.746,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M120.746,297.184 C124.601,297.184 127.725,300.308 127.725,304.163 C127.723,306.734 126.36,308.755 124.295,310.149 C123.116,314.341 123.069,316.788 125.253,320.727 C125.333,320.858 125.415,320.991 125.525,321.169 C125.443,321.036 125.734,321.503 125.797,321.607 C126.017,321.963 126.174,322.227 126.319,322.49 C127.239,324.159 127.472,325.579 126.895,327.385 C126.699,327.999 126.491,328.542 126.15,329.368 C126.112,329.46 126.069,329.562 125.99,329.753 C125.926,329.908 125.879,330.021 125.834,330.132 C125.109,331.906 124.82,333.04 124.82,334.573 C124.82,335.003 124.471,335.351 124.042,335.351 C123.613,335.351 123.264,335.003 123.264,334.573 C123.264,332.802 123.6,331.488 124.394,329.544 C124.441,329.43 124.488,329.314 124.553,329.158 C124.633,328.966 124.675,328.864 124.712,328.774 C125.039,327.984 125.234,327.475 125.414,326.912 C125.848,325.553 125.685,324.562 124.957,323.24 C124.827,323.004 124.682,322.76 124.474,322.424 C124.435,322.361 124.408,322.318 124.341,322.209 C124.273,322.1 124.273,322.1 124.204,321.99 C124.091,321.807 124.007,321.671 123.924,321.533 C121.708,317.942 121.632,314.831 122.501,310.893 C121.226,311.153 121.814,311.088 120.746,311.142 C119.625,311.085 120.266,311.153 118.834,310.861 C117.862,314.8 117.955,317.063 119.987,320.727 C120.066,320.858 120.148,320.991 120.259,321.169 C120.176,321.036 120.467,321.503 120.53,321.607 C120.75,321.963 120.907,322.227 121.052,322.49 C121.972,324.159 122.205,325.579 121.628,327.385 C121.432,327.999 121.224,328.542 120.883,329.368 C120.845,329.46 120.803,329.562 120.723,329.753 C120.659,329.908 120.612,330.021 120.567,330.132 C119.843,331.906 119.553,333.04 119.553,334.573 C119.553,335.003 119.205,335.351 118.775,335.351 C118.346,335.351 117.997,335.003 117.997,334.573 C117.997,332.802 118.333,331.488 119.127,329.544 C119.174,329.43 119.222,329.314 119.286,329.158 C119.366,328.966 119.408,328.864 119.446,328.774 C119.772,327.984 119.967,327.475 120.147,326.912 C120.581,325.553 120.418,324.562 119.69,323.24 C119.56,323.004 119.415,322.76 119.207,322.424 C119.168,322.361 119.141,322.318 119.074,322.209 C119.006,322.1 119.006,322.1 118.938,321.99 C118.824,321.807 118.74,321.671 118.657,321.533 C116.417,317.834 116.25,314.324 117.38,310.273 C115.103,308.946 113.899,306.763 113.767,304.163 C113.767,300.308 116.892,297.184 120.746,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M134.704,374.824 C130.85,374.824 127.725,371.7 127.725,367.845 C127.727,365.274 129.09,363.253 131.155,361.859 C132.334,357.667 132.381,355.22 130.197,351.281 C130.117,351.15 130.036,351.017 129.925,350.839 C130.007,350.972 129.717,350.505 129.653,350.401 C129.433,350.045 129.276,349.781 129.131,349.518 C128.212,347.849 127.979,346.429 128.555,344.623 C128.751,344.009 128.959,343.466 129.301,342.64 C129.338,342.548 129.381,342.446 129.461,342.255 C129.524,342.1 129.571,341.987 129.617,341.876 C130.341,340.102 130.631,338.968 130.631,337.435 C130.631,337.005 130.979,336.657 131.409,336.657 C131.838,336.657 132.186,337.005 132.186,337.435 C132.186,339.206 131.85,340.52 131.056,342.464 C131.01,342.578 130.962,342.694 130.897,342.85 C130.817,343.042 130.775,343.144 130.738,343.234 C130.412,344.024 130.217,344.533 130.037,345.096 C129.603,346.455 129.765,347.446 130.493,348.768 C130.624,349.004 130.769,349.248 130.976,349.584 C131.015,349.647 131.042,349.69 131.109,349.799 C131.177,349.908 131.177,349.908 131.246,350.018 C131.359,350.201 131.444,350.337 131.527,350.475 C133.743,354.066 133.819,357.177 132.949,361.115 C134.224,360.855 133.637,360.92 134.704,360.866 C135.825,360.923 135.184,360.855 136.616,361.147 C137.589,357.208 137.495,354.945 135.464,351.281 C135.384,351.15 135.302,351.017 135.192,350.839 C135.274,350.972 134.984,350.505 134.92,350.401 C134.7,350.045 134.543,349.781 134.398,349.518 C133.478,347.849 133.245,346.429 133.822,344.623 C134.018,344.009 134.226,343.466 134.567,342.64 C134.605,342.548 134.648,342.446 134.727,342.255 C134.791,342.1 134.838,341.987 134.883,341.876 C135.608,340.102 135.898,338.968 135.898,337.435 C135.898,337.005 136.246,336.657 136.675,336.657 C137.105,336.657 137.453,337.005 137.453,337.435 C137.453,339.206 137.117,340.52 136.323,342.464 C136.277,342.578 136.229,342.694 136.164,342.85 C136.084,343.042 136.042,343.144 136.005,343.234 C135.678,344.024 135.484,344.533 135.304,345.096 C134.87,346.455 135.032,347.446 135.76,348.768 C135.89,349.004 136.036,349.248 136.243,349.584 C136.282,349.647 136.309,349.69 136.376,349.799 C136.444,349.908 136.444,349.908 136.513,350.018 C136.626,350.201 136.71,350.337 136.794,350.475 C139.033,354.174 139.2,357.684 138.07,361.735 C140.347,363.062 141.552,365.245 141.683,367.845 C141.683,371.7 138.558,374.824 134.704,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M134.704,297.184 C138.559,297.184 141.683,300.308 141.683,304.163 C141.681,306.734 140.318,308.755 138.253,310.149 C137.074,314.341 137.027,316.788 139.211,320.727 C139.291,320.858 139.373,320.991 139.483,321.169 C139.401,321.036 139.691,321.503 139.755,321.607 C139.975,321.963 140.132,322.227 140.277,322.49 C141.197,324.159 141.43,325.579 140.853,327.385 C140.657,327.999 140.449,328.542 140.108,329.368 C140.07,329.46 140.027,329.562 139.948,329.753 C139.884,329.908 139.837,330.021 139.792,330.132 C139.067,331.906 138.778,333.04 138.777,334.573 C138.778,335.003 138.429,335.351 138,335.351 C137.57,335.351 137.222,335.003 137.222,334.573 C137.222,332.802 137.558,331.488 138.352,329.544 C138.399,329.43 138.446,329.314 138.511,329.158 C138.591,328.966 138.633,328.864 138.67,328.774 C138.997,327.984 139.191,327.475 139.371,326.912 C139.806,325.553 139.643,324.562 138.915,323.24 C138.785,323.004 138.64,322.76 138.432,322.424 C138.393,322.361 138.366,322.318 138.299,322.209 C138.231,322.1 138.231,322.1 138.162,321.99 C138.049,321.807 137.965,321.671 137.882,321.533 C135.665,317.942 135.589,314.831 136.459,310.893 C135.184,311.153 135.772,311.088 134.704,311.142 C133.583,311.085 134.224,311.153 132.792,310.861 C131.82,314.8 131.913,317.063 133.944,320.727 C134.024,320.858 134.106,320.991 134.217,321.169 C134.134,321.036 134.425,321.503 134.488,321.607 C134.708,321.963 134.865,322.227 135.01,322.49 C135.93,324.159 136.163,325.579 135.586,327.385 C135.39,327.999 135.182,328.542 134.841,329.368 C134.803,329.46 134.76,329.562 134.681,329.753 C134.617,329.908 134.57,330.021 134.525,330.132 C133.8,331.906 133.511,333.04 133.511,334.573 C133.511,335.003 133.162,335.351 132.733,335.351 C132.304,335.351 131.955,335.003 131.955,334.573 C131.955,332.802 132.291,331.488 133.085,329.544 C133.132,329.43 133.179,329.314 133.244,329.158 C133.324,328.966 133.366,328.864 133.404,328.774 C133.73,327.984 133.925,327.475 134.105,326.912 C134.539,325.553 134.376,324.562 133.648,323.24 C133.518,323.004 133.373,322.76 133.165,322.424 C133.126,322.361 133.099,322.318 133.032,322.209 C132.964,322.1 132.964,322.1 132.896,321.99 C132.782,321.807 132.698,321.671 132.615,321.533 C130.375,317.834 130.208,314.324 131.338,310.273 C129.061,308.946 127.857,306.763 127.725,304.163 C127.725,300.308 130.85,297.184 134.704,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M148.662,374.824 C144.808,374.824 141.683,371.7 141.683,367.845 C141.685,365.274 143.048,363.253 145.113,361.859 C146.292,357.667 146.339,355.22 144.155,351.281 C144.075,351.15 143.994,351.017 143.883,350.839 C143.965,350.972 143.675,350.505 143.611,350.401 C143.391,350.045 143.234,349.781 143.089,349.518 C142.17,347.849 141.936,346.429 142.513,344.623 C142.709,344.009 142.917,343.466 143.259,342.64 C143.296,342.548 143.339,342.446 143.418,342.255 C143.482,342.1 143.529,341.987 143.575,341.876 C144.299,340.102 144.589,338.968 144.589,337.435 C144.589,337.005 144.937,336.657 145.366,336.657 C145.796,336.657 146.144,337.005 146.144,337.435 C146.144,339.206 145.808,340.52 145.014,342.464 C144.968,342.578 144.92,342.694 144.855,342.85 C144.775,343.042 144.733,343.144 144.696,343.234 C144.369,344.024 144.175,344.533 143.995,345.096 C143.561,346.455 143.723,347.446 144.451,348.768 C144.581,349.004 144.727,349.248 144.934,349.584 C144.973,349.647 145,349.69 145.067,349.799 C145.135,349.908 145.135,349.908 145.204,350.018 C145.317,350.201 145.401,350.337 145.485,350.475 C147.701,354.066 147.777,357.177 146.907,361.115 C148.182,360.855 147.595,360.92 148.662,360.866 C149.783,360.923 149.142,360.855 150.574,361.147 C151.547,357.208 151.453,354.945 149.422,351.281 C149.342,351.15 149.26,351.017 149.15,350.839 C149.232,350.972 148.942,350.505 148.878,350.401 C148.658,350.045 148.501,349.781 148.356,349.518 C147.436,347.849 147.203,346.429 147.78,344.623 C147.976,344.009 148.184,343.466 148.525,342.64 C148.563,342.548 148.606,342.446 148.685,342.255 C148.749,342.1 148.796,341.987 148.841,341.876 C149.566,340.102 149.856,338.968 149.856,337.435 C149.856,337.005 150.204,336.657 150.633,336.657 C151.063,336.657 151.411,337.005 151.411,337.435 C151.411,339.206 151.075,340.52 150.281,342.464 C150.234,342.578 150.187,342.694 150.122,342.85 C150.042,343.042 150,343.144 149.963,343.234 C149.636,344.024 149.442,344.533 149.262,345.096 C148.827,346.455 148.99,347.446 149.718,348.768 C149.848,349.004 149.993,349.248 150.201,349.584 C150.24,349.647 150.267,349.69 150.334,349.799 C150.402,349.908 150.402,349.908 150.471,350.018 C150.584,350.201 150.668,350.337 150.752,350.475 C152.991,354.174 153.158,357.684 152.028,361.735 C154.305,363.062 155.51,365.245 155.641,367.845 C155.641,371.7 152.516,374.824 148.662,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M148.662,297.184 C152.516,297.184 155.641,300.308 155.641,304.163 C155.639,306.734 154.276,308.755 152.211,310.149 C151.032,314.341 150.985,316.788 153.169,320.727 C153.249,320.858 153.331,320.991 153.441,321.169 C153.359,321.036 153.649,321.503 153.713,321.607 C153.933,321.963 154.09,322.227 154.235,322.49 C155.155,324.159 155.388,325.579 154.811,327.385 C154.615,327.999 154.407,328.542 154.066,329.368 C154.028,329.46 153.985,329.562 153.906,329.753 C153.842,329.908 153.795,330.021 153.75,330.132 C153.025,331.906 152.735,333.04 152.735,334.573 C152.735,335.003 152.387,335.351 151.958,335.351 C151.528,335.351 151.18,335.003 151.18,334.573 C151.18,332.802 151.516,331.488 152.31,329.544 C152.357,329.43 152.404,329.314 152.469,329.158 C152.549,328.966 152.591,328.864 152.628,328.774 C152.955,327.984 153.149,327.475 153.329,326.912 C153.764,325.553 153.601,324.562 152.873,323.24 C152.743,323.004 152.598,322.76 152.39,322.424 C152.351,322.361 152.324,322.318 152.257,322.209 C152.189,322.1 152.189,322.1 152.12,321.99 C152.007,321.807 151.923,321.671 151.839,321.533 C149.623,317.942 149.547,314.831 150.417,310.893 C149.142,311.153 149.73,311.088 148.662,311.142 C147.541,311.085 148.182,311.153 146.75,310.861 C145.777,314.8 145.871,317.063 147.902,320.727 C147.982,320.858 148.064,320.991 148.174,321.169 C148.092,321.036 148.382,321.503 148.446,321.607 C148.666,321.963 148.823,322.227 148.968,322.49 C149.888,324.159 150.121,325.579 149.544,327.385 C149.348,327.999 149.14,328.542 148.799,329.368 C148.761,329.46 148.718,329.562 148.639,329.753 C148.575,329.908 148.528,330.021 148.483,330.132 C147.758,331.906 147.469,333.04 147.469,334.573 C147.469,335.003 147.12,335.351 146.691,335.351 C146.261,335.351 145.913,335.003 145.913,334.573 C145.913,332.802 146.249,331.488 147.043,329.544 C147.09,329.43 147.137,329.314 147.202,329.158 C147.282,328.966 147.324,328.864 147.361,328.774 C147.688,327.984 147.883,327.475 148.062,326.912 C148.497,325.553 148.334,324.562 147.606,323.24 C147.476,323.004 147.331,322.76 147.123,322.424 C147.084,322.361 147.057,322.318 146.99,322.209 C146.922,322.1 146.922,322.1 146.853,321.99 C146.74,321.807 146.656,321.671 146.573,321.533 C144.333,317.834 144.166,314.324 145.296,310.273 C143.019,308.946 141.814,306.763 141.683,304.163 C141.683,300.308 144.808,297.184 148.662,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M162.62,374.824 C158.766,374.824 155.641,371.7 155.641,367.845 C155.643,365.274 157.006,363.253 159.071,361.859 C160.25,357.667 160.297,355.22 158.113,351.281 C158.033,351.15 157.952,351.017 157.841,350.839 C157.923,350.972 157.633,350.505 157.569,350.401 C157.349,350.045 157.192,349.781 157.047,349.518 C156.127,347.849 155.894,346.429 156.471,344.623 C156.667,344.009 156.875,343.466 157.217,342.64 C157.254,342.548 157.297,342.446 157.376,342.255 C157.44,342.1 157.487,341.987 157.532,341.876 C158.257,340.102 158.547,338.968 158.547,337.435 C158.547,337.005 158.895,336.657 159.324,336.657 C159.754,336.657 160.102,337.005 160.102,337.435 C160.102,339.206 159.766,340.52 158.972,342.464 C158.926,342.578 158.878,342.694 158.813,342.85 C158.733,343.042 158.691,343.144 158.654,343.234 C158.327,344.024 158.133,344.533 157.953,345.096 C157.519,346.455 157.681,347.446 158.409,348.768 C158.539,349.004 158.685,349.248 158.892,349.584 C158.931,349.647 158.958,349.69 159.025,349.799 C159.093,349.908 159.093,349.908 159.162,350.018 C159.275,350.201 159.359,350.337 159.443,350.475 C161.659,354.066 161.735,357.177 160.865,361.115 C162.14,360.855 161.553,360.92 162.62,360.866 C163.741,360.923 163.1,360.855 164.532,361.147 C165.505,357.208 165.411,354.945 163.38,351.281 C163.3,351.15 163.218,351.017 163.108,350.839 C163.19,350.972 162.9,350.505 162.836,350.401 C162.616,350.045 162.459,349.781 162.314,349.518 C161.394,347.849 161.161,346.429 161.738,344.623 C161.934,344.009 162.142,343.466 162.483,342.64 C162.521,342.548 162.564,342.446 162.643,342.255 C162.707,342.1 162.754,341.987 162.799,341.876 C163.524,340.102 163.814,338.968 163.814,337.435 C163.814,337.005 164.162,336.657 164.591,336.657 C165.021,336.657 165.369,337.005 165.369,337.435 C165.369,339.206 165.033,340.52 164.239,342.464 C164.192,342.578 164.145,342.694 164.08,342.85 C164,343.042 163.958,343.144 163.921,343.234 C163.594,344.024 163.4,344.533 163.22,345.096 C162.785,346.455 162.948,347.446 163.676,348.768 C163.806,349.004 163.951,349.248 164.159,349.584 C164.198,349.647 164.225,349.69 164.292,349.799 C164.36,349.908 164.36,349.908 164.429,350.018 C164.542,350.201 164.626,350.337 164.71,350.475 C166.949,354.174 167.116,357.684 165.986,361.735 C168.263,363.062 169.468,365.245 169.599,367.845 C169.599,371.7 166.474,374.824 162.62,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M162.62,297.184 C166.474,297.184 169.599,300.308 169.599,304.163 C169.597,306.734 168.234,308.755 166.169,310.149 C164.99,314.341 164.943,316.788 167.127,320.727 C167.207,320.858 167.289,320.991 167.399,321.169 C167.317,321.036 167.607,321.503 167.671,321.607 C167.891,321.963 168.048,322.227 168.193,322.49 C169.113,324.159 169.346,325.579 168.769,327.385 C168.573,327.999 168.365,328.542 168.024,329.368 C167.986,329.46 167.943,329.562 167.864,329.753 C167.8,329.908 167.753,330.021 167.708,330.132 C166.983,331.906 166.693,333.04 166.693,334.573 C166.693,335.003 166.345,335.351 165.916,335.351 C165.486,335.351 165.138,335.003 165.138,334.573 C165.138,332.802 165.474,331.488 166.268,329.544 C166.315,329.43 166.362,329.314 166.427,329.158 C166.507,328.966 166.549,328.864 166.586,328.774 C166.913,327.984 167.107,327.475 167.287,326.912 C167.722,325.553 167.559,324.562 166.831,323.24 C166.701,323.004 166.556,322.76 166.348,322.424 C166.309,322.361 166.282,322.318 166.215,322.209 C166.147,322.1 166.147,322.1 166.078,321.99 C165.965,321.807 165.881,321.671 165.797,321.533 C163.581,317.942 163.505,314.831 164.375,310.893 C163.1,311.153 163.688,311.088 162.62,311.142 C161.499,311.085 162.14,311.153 160.708,310.861 C159.735,314.8 159.829,317.063 161.86,320.727 C161.94,320.858 162.022,320.991 162.132,321.169 C162.05,321.036 162.34,321.503 162.404,321.607 C162.624,321.963 162.781,322.227 162.926,322.49 C163.846,324.159 164.079,325.579 163.502,327.385 C163.306,327.999 163.098,328.542 162.757,329.368 C162.719,329.46 162.676,329.562 162.597,329.753 C162.533,329.908 162.486,330.021 162.441,330.132 C161.716,331.906 161.426,333.04 161.426,334.573 C161.426,335.003 161.078,335.351 160.649,335.351 C160.219,335.351 159.871,335.003 159.871,334.573 C159.871,332.802 160.207,331.488 161.001,329.544 C161.048,329.43 161.095,329.314 161.16,329.158 C161.24,328.966 161.282,328.864 161.319,328.774 C161.646,327.984 161.84,327.475 162.02,326.912 C162.455,325.553 162.292,324.562 161.564,323.24 C161.434,323.004 161.289,322.76 161.081,322.424 C161.042,322.361 161.015,322.318 160.948,322.209 C160.88,322.1 160.88,322.1 160.811,321.99 C160.698,321.807 160.614,321.671 160.531,321.533 C158.291,317.834 158.124,314.324 159.254,310.273 C156.977,308.946 155.772,306.763 155.641,304.163 C155.641,300.308 158.766,297.184 162.62,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M176.578,374.824 C172.724,374.824 169.599,371.7 169.599,367.845 C169.601,365.274 170.964,363.253 173.029,361.859 C174.208,357.667 174.255,355.22 172.071,351.281 C171.991,351.15 171.909,351.017 171.799,350.839 C171.881,350.972 171.591,350.505 171.527,350.401 C171.307,350.045 171.15,349.781 171.005,349.518 C170.085,347.849 169.852,346.429 170.429,344.623 C170.625,344.009 170.833,343.466 171.174,342.64 C171.212,342.548 171.255,342.446 171.334,342.255 C171.398,342.1 171.445,341.987 171.49,341.876 C172.215,340.102 172.505,338.968 172.505,337.435 C172.505,337.005 172.853,336.657 173.282,336.657 C173.712,336.657 174.06,337.005 174.06,337.435 C174.06,339.206 173.724,340.52 172.93,342.464 C172.884,342.578 172.836,342.694 172.771,342.85 C172.691,343.042 172.649,343.144 172.612,343.234 C172.285,344.024 172.091,344.533 171.911,345.096 C171.477,346.455 171.639,347.446 172.367,348.768 C172.497,349.004 172.643,349.248 172.85,349.584 C172.889,349.647 172.916,349.69 172.983,349.799 C173.051,349.908 173.051,349.908 173.12,350.018 C173.233,350.201 173.317,350.337 173.401,350.475 C175.617,354.066 175.693,357.177 174.823,361.115 C176.098,360.855 175.51,360.92 176.578,360.866 C177.699,360.923 177.058,360.855 178.49,361.147 C179.463,357.208 179.369,354.945 177.338,351.281 C177.258,351.15 177.176,351.017 177.066,350.839 C177.148,350.972 176.858,350.505 176.794,350.401 C176.574,350.045 176.417,349.781 176.272,349.518 C175.352,347.849 175.119,346.429 175.696,344.623 C175.892,344.009 176.1,343.466 176.441,342.64 C176.479,342.548 176.522,342.446 176.601,342.255 C176.665,342.1 176.712,341.987 176.757,341.876 C177.482,340.102 177.771,338.968 177.771,337.435 C177.771,337.005 178.12,336.657 178.549,336.657 C178.979,336.657 179.327,337.005 179.327,337.435 C179.327,339.206 178.991,340.52 178.197,342.464 C178.15,342.578 178.103,342.694 178.038,342.85 C177.958,343.042 177.916,343.144 177.879,343.234 C177.552,344.024 177.358,344.533 177.178,345.096 C176.743,346.455 176.906,347.446 177.634,348.768 C177.764,349.004 177.909,349.248 178.117,349.584 C178.156,349.647 178.183,349.69 178.25,349.799 C178.318,349.908 178.318,349.908 178.387,350.018 C178.5,350.201 178.584,350.337 178.667,350.475 C180.907,354.174 181.074,357.684 179.944,361.735 C182.221,363.062 183.426,365.245 183.557,367.845 C183.557,371.7 180.432,374.824 176.578,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M176.578,297.184 C180.432,297.184 183.557,300.308 183.557,304.163 C183.555,306.734 182.192,308.755 180.127,310.149 C178.948,314.341 178.901,316.788 181.085,320.727 C181.165,320.858 181.247,320.991 181.357,321.169 C181.275,321.036 181.565,321.503 181.629,321.607 C181.849,321.963 182.006,322.227 182.151,322.49 C183.071,324.159 183.304,325.579 182.727,327.385 C182.531,327.999 182.323,328.542 181.982,329.368 C181.944,329.46 181.901,329.562 181.822,329.753 C181.758,329.908 181.711,330.021 181.666,330.132 C180.941,331.906 180.651,333.04 180.651,334.573 C180.651,335.003 180.303,335.351 179.874,335.351 C179.444,335.351 179.096,335.003 179.096,334.573 C179.096,332.802 179.432,331.488 180.226,329.544 C180.272,329.43 180.32,329.314 180.385,329.158 C180.465,328.966 180.507,328.864 180.544,328.774 C180.871,327.984 181.065,327.475 181.245,326.912 C181.679,325.553 181.517,324.562 180.789,323.24 C180.659,323.004 180.513,322.76 180.306,322.424 C180.267,322.361 180.24,322.318 180.173,322.209 C180.105,322.1 180.105,322.1 180.036,321.99 C179.923,321.807 179.839,321.671 179.755,321.533 C177.539,317.942 177.463,314.831 178.333,310.893 C177.058,311.153 177.645,311.088 176.578,311.142 C175.457,311.085 176.098,311.153 174.666,310.861 C173.693,314.8 173.787,317.063 175.818,320.727 C175.898,320.858 175.98,320.991 176.09,321.169 C176.008,321.036 176.298,321.503 176.362,321.607 C176.582,321.963 176.739,322.227 176.884,322.49 C177.804,324.159 178.037,325.579 177.46,327.385 C177.264,327.999 177.056,328.542 176.715,329.368 C176.677,329.46 176.634,329.562 176.555,329.753 C176.491,329.908 176.444,330.021 176.399,330.132 C175.674,331.906 175.384,333.04 175.384,334.573 C175.384,335.003 175.036,335.351 174.607,335.351 C174.177,335.351 173.829,335.003 173.829,334.573 C173.829,332.802 174.165,331.488 174.959,329.544 C175.006,329.43 175.053,329.314 175.118,329.158 C175.198,328.966 175.24,328.864 175.277,328.774 C175.604,327.984 175.798,327.475 175.978,326.912 C176.413,325.553 176.25,324.562 175.522,323.24 C175.392,323.004 175.247,322.76 175.039,322.424 C175,322.361 174.973,322.318 174.906,322.209 C174.838,322.1 174.838,322.1 174.769,321.99 C174.656,321.807 174.572,321.671 174.488,321.533 C172.249,317.834 172.082,314.324 173.212,310.273 C170.935,308.946 169.73,306.763 169.599,304.163 C169.599,300.308 172.724,297.184 176.578,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M190.536,374.824 C186.682,374.824 183.557,371.7 183.557,367.845 C183.559,365.274 184.922,363.253 186.987,361.859 C188.166,357.667 188.213,355.22 186.029,351.281 C185.949,351.15 185.867,351.017 185.757,350.839 C185.839,350.972 185.549,350.505 185.485,350.401 C185.265,350.045 185.108,349.781 184.963,349.518 C184.043,347.849 183.81,346.429 184.387,344.623 C184.583,344.009 184.791,343.466 185.132,342.64 C185.17,342.548 185.213,342.446 185.292,342.255 C185.356,342.1 185.403,341.987 185.448,341.876 C186.173,340.102 186.463,338.968 186.463,337.435 C186.463,337.005 186.811,336.657 187.24,336.657 C187.67,336.657 188.018,337.005 188.018,337.435 C188.018,339.206 187.682,340.52 186.888,342.464 C186.841,342.578 186.794,342.694 186.729,342.85 C186.649,343.042 186.607,343.144 186.57,343.234 C186.243,344.024 186.049,344.533 185.869,345.096 C185.434,346.455 185.597,347.446 186.325,348.768 C186.455,349.004 186.6,349.248 186.808,349.584 C186.847,349.647 186.874,349.69 186.941,349.799 C187.009,349.908 187.009,349.908 187.078,350.018 C187.191,350.201 187.275,350.337 187.359,350.475 C189.575,354.066 189.651,357.177 188.781,361.115 C190.056,360.855 189.468,360.92 190.536,360.866 C191.657,360.923 191.016,360.855 192.448,361.147 C193.42,357.208 193.327,354.945 191.296,351.281 C191.216,351.15 191.134,351.017 191.023,350.839 C191.106,350.972 190.815,350.505 190.752,350.401 C190.532,350.045 190.375,349.781 190.23,349.518 C189.31,347.849 189.077,346.429 189.654,344.623 C189.85,344.009 190.058,343.466 190.399,342.64 C190.437,342.548 190.48,342.446 190.559,342.255 C190.623,342.1 190.67,341.987 190.715,341.876 C191.44,340.102 191.729,338.968 191.729,337.435 C191.729,337.005 192.078,336.657 192.507,336.657 C192.936,336.657 193.285,337.005 193.285,337.435 C193.285,339.206 192.949,340.52 192.155,342.464 C192.108,342.578 192.061,342.694 191.996,342.85 C191.916,343.042 191.874,343.144 191.836,343.234 C191.51,344.024 191.315,344.533 191.135,345.096 C190.701,346.455 190.864,347.446 191.592,348.768 C191.722,349.004 191.867,349.248 192.075,349.584 C192.114,349.647 192.141,349.69 192.208,349.799 C192.276,349.908 192.276,349.908 192.344,350.018 C192.458,350.201 192.542,350.337 192.625,350.475 C194.865,354.174 195.032,357.684 193.902,361.735 C196.179,363.062 197.383,365.245 197.515,367.845 C197.515,371.7 194.39,374.824 190.536,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M190.536,297.184 C194.39,297.184 197.515,300.308 197.515,304.163 C197.513,306.734 196.15,308.755 194.085,310.149 C192.906,314.341 192.859,316.788 195.043,320.727 C195.123,320.858 195.204,320.991 195.315,321.169 C195.233,321.036 195.523,321.503 195.587,321.607 C195.807,321.963 195.964,322.227 196.109,322.49 C197.028,324.159 197.262,325.579 196.685,327.385 C196.489,327.999 196.281,328.542 195.939,329.368 C195.902,329.46 195.859,329.562 195.78,329.753 C195.716,329.908 195.669,330.021 195.623,330.132 C194.899,331.906 194.609,333.04 194.609,334.573 C194.609,335.003 194.261,335.351 193.832,335.351 C193.402,335.351 193.054,335.003 193.054,334.573 C193.054,332.802 193.39,331.488 194.184,329.544 C194.23,329.43 194.278,329.314 194.343,329.158 C194.423,328.966 194.465,328.864 194.502,328.774 C194.829,327.984 195.023,327.475 195.203,326.912 C195.637,325.553 195.475,324.562 194.747,323.24 C194.617,323.004 194.471,322.76 194.264,322.424 C194.225,322.361 194.198,322.318 194.131,322.209 C194.063,322.1 194.063,322.1 193.994,321.99 C193.881,321.807 193.797,321.671 193.713,321.533 C191.497,317.942 191.421,314.831 192.291,310.893 C191.016,311.153 191.603,311.088 190.536,311.142 C189.415,311.085 190.056,311.153 188.624,310.861 C187.651,314.8 187.745,317.063 189.776,320.727 C189.856,320.858 189.938,320.991 190.048,321.169 C189.966,321.036 190.256,321.503 190.32,321.607 C190.54,321.963 190.697,322.227 190.842,322.49 C191.762,324.159 191.995,325.579 191.418,327.385 C191.222,327.999 191.014,328.542 190.673,329.368 C190.635,329.46 190.592,329.562 190.513,329.753 C190.449,329.908 190.402,330.021 190.357,330.132 C189.632,331.906 189.342,333.04 189.342,334.573 C189.342,335.003 188.994,335.351 188.565,335.351 C188.135,335.351 187.787,335.003 187.787,334.573 C187.787,332.802 188.123,331.488 188.917,329.544 C188.963,329.43 189.011,329.314 189.076,329.158 C189.156,328.966 189.198,328.864 189.235,328.774 C189.562,327.984 189.756,327.475 189.936,326.912 C190.37,325.553 190.208,324.562 189.48,323.24 C189.35,323.004 189.204,322.76 188.997,322.424 C188.958,322.361 188.931,322.318 188.864,322.209 C188.796,322.1 188.796,322.1 188.727,321.99 C188.614,321.807 188.53,321.671 188.446,321.533 C186.207,317.834 186.04,314.324 187.17,310.273 C184.893,308.946 183.688,306.763 183.557,304.163 C183.557,300.308 186.682,297.184 190.536,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M204.494,374.824 C200.639,374.824 197.515,371.7 197.515,367.845 C197.517,365.274 198.88,363.253 200.945,361.859 C202.124,357.667 202.171,355.22 199.987,351.281 C199.907,351.15 199.825,351.017 199.715,350.839 C199.797,350.972 199.507,350.505 199.443,350.401 C199.223,350.045 199.066,349.781 198.921,349.518 C198.001,347.849 197.768,346.429 198.345,344.623 C198.541,344.009 198.749,343.466 199.09,342.64 C199.128,342.548 199.171,342.446 199.25,342.255 C199.314,342.1 199.361,341.987 199.406,341.876 C200.131,340.102 200.42,338.968 200.421,337.435 C200.42,337.005 200.769,336.657 201.198,336.657 C201.628,336.657 201.976,337.005 201.976,337.435 C201.976,339.206 201.64,340.52 200.846,342.464 C200.799,342.578 200.752,342.694 200.687,342.85 C200.607,343.042 200.565,343.144 200.528,343.234 C200.201,344.024 200.007,344.533 199.827,345.096 C199.392,346.455 199.555,347.446 200.283,348.768 C200.413,349.004 200.558,349.248 200.766,349.584 C200.805,349.647 200.832,349.69 200.899,349.799 C200.967,349.908 200.967,349.908 201.036,350.018 C201.149,350.201 201.233,350.337 201.316,350.475 C203.533,354.066 203.608,357.177 202.739,361.115 C204.014,360.855 203.426,360.92 204.494,360.866 C205.615,360.923 204.974,360.855 206.406,361.147 C207.378,357.208 207.285,354.945 205.253,351.281 C205.174,351.15 205.092,351.017 204.981,350.839 C205.064,350.972 204.773,350.505 204.71,350.401 C204.49,350.045 204.333,349.781 204.188,349.518 C203.268,347.849 203.035,346.429 203.612,344.623 C203.808,344.009 204.016,343.466 204.357,342.64 C204.395,342.548 204.437,342.446 204.517,342.255 C204.581,342.1 204.628,341.987 204.673,341.876 C205.397,340.102 205.687,338.968 205.687,337.435 C205.687,337.005 206.035,336.657 206.465,336.657 C206.894,336.657 207.243,337.005 207.243,337.435 C207.243,339.206 206.907,340.52 206.113,342.464 C206.066,342.578 206.018,342.694 205.954,342.85 C205.874,343.042 205.832,343.144 205.794,343.234 C205.468,344.024 205.273,344.533 205.093,345.096 C204.659,346.455 204.822,347.446 205.55,348.768 C205.68,349.004 205.825,349.248 206.033,349.584 C206.072,349.647 206.099,349.69 206.166,349.799 C206.234,349.908 206.234,349.908 206.302,350.018 C206.416,350.201 206.5,350.337 206.583,350.475 C208.823,354.174 208.99,357.684 207.86,361.735 C210.137,363.062 211.341,365.245 211.473,367.845 C211.473,371.7 208.348,374.824 204.494,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M204.494,297.184 C208.348,297.184 211.473,300.308 211.473,304.163 C211.471,306.734 210.108,308.755 208.043,310.149 C206.864,314.341 206.817,316.788 209.001,320.727 C209.081,320.858 209.162,320.991 209.273,321.169 C209.191,321.036 209.481,321.503 209.545,321.607 C209.765,321.963 209.922,322.227 210.067,322.49 C210.986,324.159 211.219,325.579 210.643,327.385 C210.447,327.999 210.239,328.542 209.897,329.368 C209.86,329.46 209.817,329.562 209.738,329.753 C209.674,329.908 209.627,330.021 209.581,330.132 C208.857,331.906 208.567,333.04 208.567,334.573 C208.567,335.003 208.219,335.351 207.789,335.351 C207.36,335.351 207.012,335.003 207.012,334.573 C207.012,332.802 207.348,331.488 208.142,329.544 C208.188,329.43 208.236,329.314 208.301,329.158 C208.381,328.966 208.423,328.864 208.46,328.774 C208.786,327.984 208.981,327.475 209.161,326.912 C209.595,325.553 209.433,324.562 208.705,323.24 C208.574,323.004 208.429,322.76 208.222,322.424 C208.183,322.361 208.156,322.318 208.089,322.209 C208.021,322.1 208.021,322.1 207.952,321.99 C207.839,321.807 207.754,321.671 207.671,321.533 C205.455,317.942 205.379,314.831 206.249,310.893 C204.974,311.153 205.561,311.088 204.494,311.142 C203.373,311.085 204.014,311.153 202.581,310.861 C201.609,314.8 201.703,317.063 203.734,320.727 C203.814,320.858 203.895,320.991 204.006,321.169 C203.924,321.036 204.214,321.503 204.278,321.607 C204.498,321.963 204.655,322.227 204.8,322.49 C205.72,324.159 205.953,325.579 205.376,327.385 C205.18,327.999 204.972,328.542 204.63,329.368 C204.593,329.46 204.55,329.562 204.471,329.753 C204.407,329.908 204.36,330.021 204.315,330.132 C203.59,331.906 203.3,333.04 203.3,334.573 C203.3,335.003 202.952,335.351 202.523,335.351 C202.093,335.351 201.745,335.003 201.745,334.573 C201.745,332.802 202.081,331.488 202.875,329.544 C202.921,329.43 202.969,329.314 203.034,329.158 C203.114,328.966 203.156,328.864 203.193,328.774 C203.52,327.984 203.714,327.475 203.894,326.912 C204.328,325.553 204.166,324.562 203.438,323.24 C203.308,323.004 203.162,322.76 202.955,322.424 C202.916,322.361 202.889,322.318 202.822,322.209 C202.754,322.1 202.754,322.1 202.685,321.99 C202.572,321.807 202.488,321.671 202.404,321.533 C200.165,317.834 199.998,314.324 201.128,310.273 C198.851,308.946 197.646,306.763 197.515,304.163 C197.515,300.308 200.639,297.184 204.494,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M218.452,374.824 C214.597,374.824 211.473,371.7 211.473,367.845 C211.475,365.274 212.838,363.253 214.903,361.859 C216.082,357.667 216.129,355.22 213.945,351.281 C213.865,351.15 213.783,351.017 213.673,350.839 C213.755,350.972 213.465,350.505 213.401,350.401 C213.181,350.045 213.024,349.781 212.879,349.518 C211.959,347.849 211.726,346.429 212.303,344.623 C212.499,344.009 212.707,343.466 213.048,342.64 C213.086,342.548 213.129,342.446 213.208,342.255 C213.272,342.1 213.319,341.987 213.364,341.876 C214.089,340.102 214.378,338.968 214.378,337.435 C214.378,337.005 214.727,336.657 215.156,336.657 C215.585,336.657 215.934,337.005 215.934,337.435 C215.934,339.206 215.598,340.52 214.804,342.464 C214.757,342.578 214.71,342.694 214.645,342.85 C214.565,343.042 214.523,343.144 214.486,343.234 C214.159,344.024 213.964,344.533 213.784,345.096 C213.35,346.455 213.513,347.446 214.241,348.768 C214.371,349.004 214.516,349.248 214.724,349.584 C214.763,349.647 214.79,349.69 214.857,349.799 C214.925,349.908 214.925,349.908 214.993,350.018 C215.107,350.201 215.191,350.337 215.274,350.475 C217.49,354.066 217.566,357.177 216.697,361.115 C217.971,360.855 217.384,360.92 218.452,360.866 C219.573,360.923 218.932,360.855 220.364,361.147 C221.336,357.208 221.243,354.945 219.211,351.281 C219.132,351.15 219.05,351.017 218.939,350.839 C219.022,350.972 218.731,350.505 218.667,350.401 C218.448,350.045 218.291,349.781 218.146,349.518 C217.226,347.849 216.993,346.429 217.57,344.623 C217.766,344.009 217.974,343.466 218.315,342.64 C218.353,342.548 218.395,342.446 218.475,342.255 C218.539,342.1 218.586,341.987 218.631,341.876 C219.355,340.102 219.645,338.968 219.645,337.435 C219.645,337.005 219.993,336.657 220.423,336.657 C220.852,336.657 221.2,337.005 221.2,337.435 C221.2,339.206 220.865,340.52 220.071,342.464 C220.024,342.578 219.976,342.694 219.912,342.85 C219.832,343.042 219.79,343.144 219.752,343.234 C219.426,344.024 219.231,344.533 219.051,345.096 C218.617,346.455 218.78,347.446 219.508,348.768 C219.638,349.004 219.783,349.248 219.991,349.584 C220.029,349.647 220.056,349.69 220.124,349.799 C220.191,349.908 220.191,349.908 220.26,350.018 C220.374,350.201 220.458,350.337 220.541,350.475 C222.78,354.174 222.948,357.684 221.818,361.735 C224.095,363.062 225.299,365.245 225.431,367.845 C225.431,371.7 222.306,374.824 218.452,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M218.452,297.184 C222.306,297.184 225.431,300.308 225.431,304.163 C225.429,306.734 224.066,308.755 222.001,310.149 C220.822,314.341 220.775,316.788 222.959,320.727 C223.039,320.858 223.12,320.991 223.231,321.169 C223.149,321.036 223.439,321.503 223.503,321.607 C223.723,321.963 223.88,322.227 224.025,322.49 C224.944,324.159 225.177,325.579 224.6,327.385 C224.405,327.999 224.197,328.542 223.855,329.368 C223.817,329.46 223.775,329.562 223.695,329.753 C223.632,329.908 223.585,330.021 223.539,330.132 C222.815,331.906 222.525,333.04 222.525,334.573 C222.525,335.003 222.177,335.351 221.747,335.351 C221.318,335.351 220.97,335.003 220.97,334.573 C220.97,332.802 221.306,331.488 222.1,329.544 C222.146,329.43 222.194,329.314 222.259,329.158 C222.339,328.966 222.381,328.864 222.418,328.774 C222.744,327.984 222.939,327.475 223.119,326.912 C223.553,325.553 223.391,324.562 222.662,323.24 C222.532,323.004 222.387,322.76 222.18,322.424 C222.141,322.361 222.114,322.318 222.047,322.209 C221.979,322.1 221.979,322.1 221.91,321.99 C221.797,321.807 221.712,321.671 221.629,321.533 C219.413,317.942 219.337,314.831 220.207,310.893 C218.932,311.153 219.519,311.088 218.452,311.142 C217.331,311.085 217.971,311.153 216.539,310.861 C215.567,314.8 215.661,317.063 217.692,320.727 C217.772,320.858 217.853,320.991 217.964,321.169 C217.882,321.036 218.172,321.503 218.236,321.607 C218.456,321.963 218.613,322.227 218.758,322.49 C219.677,324.159 219.911,325.579 219.334,327.385 C219.138,327.999 218.93,328.542 218.588,329.368 C218.551,329.46 218.508,329.562 218.429,329.753 C218.365,329.908 218.318,330.021 218.272,330.132 C217.548,331.906 217.258,333.04 217.258,334.573 C217.258,335.003 216.91,335.351 216.481,335.351 C216.051,335.351 215.703,335.003 215.703,334.573 C215.703,332.802 216.039,331.488 216.833,329.544 C216.879,329.43 216.927,329.314 216.992,329.158 C217.072,328.966 217.114,328.864 217.151,328.774 C217.478,327.984 217.672,327.475 217.852,326.912 C218.286,325.553 218.124,324.562 217.396,323.24 C217.266,323.004 217.12,322.76 216.913,322.424 C216.874,322.361 216.847,322.318 216.78,322.209 C216.712,322.1 216.712,322.1 216.643,321.99 C216.53,321.807 216.445,321.671 216.362,321.533 C214.123,317.834 213.956,314.324 215.085,310.273 C212.809,308.946 211.604,306.763 211.473,304.163 C211.473,300.308 214.597,297.184 218.452,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M232.41,374.824 C228.555,374.824 225.431,371.7 225.431,367.845 C225.433,365.274 226.796,363.253 228.861,361.859 C230.04,357.667 230.087,355.22 227.902,351.281 C227.823,351.15 227.741,351.017 227.63,350.839 C227.713,350.972 227.422,350.505 227.359,350.401 C227.139,350.045 226.982,349.781 226.837,349.518 C225.917,347.849 225.684,346.429 226.261,344.623 C226.457,344.009 226.665,343.466 227.006,342.64 C227.044,342.548 227.086,342.446 227.166,342.255 C227.23,342.1 227.277,341.987 227.322,341.876 C228.047,340.102 228.336,338.968 228.336,337.435 C228.336,337.005 228.684,336.657 229.114,336.657 C229.543,336.657 229.892,337.005 229.892,337.435 C229.892,339.206 229.556,340.52 228.762,342.464 C228.715,342.578 228.667,342.694 228.603,342.85 C228.523,343.042 228.481,343.144 228.443,343.234 C228.117,344.024 227.922,344.533 227.742,345.096 C227.308,346.455 227.471,347.446 228.199,348.768 C228.329,349.004 228.474,349.248 228.682,349.584 C228.721,349.647 228.748,349.69 228.815,349.799 C228.883,349.908 228.883,349.908 228.951,350.018 C229.065,350.201 229.149,350.337 229.232,350.475 C231.448,354.066 231.524,357.177 230.654,361.115 C231.929,360.855 231.342,360.92 232.41,360.866 C233.53,360.923 232.89,360.855 234.322,361.147 C235.294,357.208 235.201,354.945 233.169,351.281 C233.089,351.15 233.008,351.017 232.897,350.839 C232.98,350.972 232.689,350.505 232.625,350.401 C232.405,350.045 232.248,349.781 232.104,349.518 C231.184,347.849 230.951,346.429 231.528,344.623 C231.724,344.009 231.931,343.466 232.273,342.64 C232.311,342.548 232.353,342.446 232.433,342.255 C232.497,342.1 232.543,341.987 232.589,341.876 C233.313,340.102 233.603,338.968 233.603,337.435 C233.603,337.005 233.951,336.657 234.381,336.657 C234.81,336.657 235.158,337.005 235.158,337.435 C235.158,339.206 234.823,340.52 234.029,342.464 C233.982,342.578 233.934,342.694 233.869,342.85 C233.79,343.042 233.748,343.144 233.71,343.234 C233.384,344.024 233.189,344.533 233.009,345.096 C232.575,346.455 232.738,347.446 233.466,348.768 C233.596,349.004 233.741,349.248 233.948,349.584 C233.987,349.647 234.014,349.69 234.082,349.799 C234.149,349.908 234.149,349.908 234.218,350.018 C234.332,350.201 234.416,350.337 234.499,350.475 C236.738,354.174 236.905,357.684 235.776,361.735 C238.052,363.062 239.257,365.245 239.389,367.845 C239.388,371.7 236.264,374.824 232.41,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M232.41,297.184 C236.264,297.184 239.389,300.308 239.389,304.163 C239.387,306.734 238.024,308.755 235.959,310.149 C234.78,314.341 234.733,316.788 236.917,320.727 C236.997,320.858 237.078,320.991 237.189,321.169 C237.107,321.036 237.397,321.503 237.461,321.607 C237.681,321.963 237.838,322.227 237.983,322.49 C238.902,324.159 239.135,325.579 238.558,327.385 C238.362,327.999 238.155,328.542 237.813,329.368 C237.775,329.46 237.733,329.562 237.653,329.753 C237.589,329.908 237.543,330.021 237.497,330.132 C236.773,331.906 236.483,333.04 236.483,334.573 C236.483,335.003 236.135,335.351 235.705,335.351 C235.276,335.351 234.928,335.003 234.928,334.573 C234.928,332.802 235.264,331.488 236.058,329.544 C236.104,329.43 236.152,329.314 236.217,329.158 C236.296,328.966 236.339,328.864 236.376,328.774 C236.702,327.984 236.897,327.475 237.077,326.912 C237.511,325.553 237.348,324.562 236.62,323.24 C236.49,323.004 236.345,322.76 236.138,322.424 C236.099,322.361 236.072,322.318 236.005,322.209 C235.937,322.1 235.937,322.1 235.868,321.99 C235.754,321.807 235.67,321.671 235.587,321.533 C233.371,317.942 233.295,314.831 234.165,310.893 C232.89,311.153 233.477,311.088 232.41,311.142 C231.289,311.085 231.929,311.153 230.497,310.861 C229.525,314.8 229.619,317.063 231.65,320.727 C231.73,320.858 231.811,320.991 231.922,321.169 C231.84,321.036 232.13,321.503 232.194,321.607 C232.414,321.963 232.571,322.227 232.716,322.49 C233.635,324.159 233.868,325.579 233.291,327.385 C233.096,327.999 232.888,328.542 232.546,329.368 C232.508,329.46 232.466,329.562 232.386,329.753 C232.323,329.908 232.276,330.021 232.23,330.132 C231.506,331.906 231.216,333.04 231.216,334.573 C231.216,335.003 230.868,335.351 230.438,335.351 C230.009,335.351 229.661,335.003 229.661,334.573 C229.661,332.802 229.997,331.488 230.791,329.544 C230.837,329.43 230.885,329.314 230.95,329.158 C231.03,328.966 231.072,328.864 231.109,328.774 C231.435,327.984 231.63,327.475 231.81,326.912 C232.244,325.553 232.082,324.562 231.354,323.24 C231.223,323.004 231.078,322.76 230.871,322.424 C230.832,322.361 230.805,322.318 230.738,322.209 C230.67,322.1 230.67,322.1 230.601,321.99 C230.488,321.807 230.403,321.671 230.32,321.533 C228.081,317.834 227.914,314.324 229.043,310.273 C226.767,308.946 225.562,306.763 225.431,304.163 C225.431,300.308 228.555,297.184 232.41,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M246.368,374.824 C242.513,374.824 239.389,371.7 239.389,367.845 C239.39,365.274 240.753,363.253 242.819,361.859 C243.997,357.667 244.045,355.22 241.86,351.281 C241.781,351.15 241.699,351.017 241.588,350.839 C241.671,350.972 241.38,350.505 241.316,350.401 C241.097,350.045 240.94,349.781 240.795,349.518 C239.875,347.849 239.642,346.429 240.219,344.623 C240.415,344.009 240.623,343.466 240.964,342.64 C241.002,342.548 241.044,342.446 241.124,342.255 C241.188,342.1 241.235,341.987 241.28,341.876 C242.004,340.102 242.294,338.968 242.294,337.435 C242.294,337.005 242.642,336.657 243.072,336.657 C243.501,336.657 243.849,337.005 243.85,337.435 C243.849,339.206 243.514,340.52 242.72,342.464 C242.673,342.578 242.625,342.694 242.561,342.85 C242.481,343.042 242.439,343.144 242.401,343.234 C242.075,344.024 241.88,344.533 241.7,345.096 C241.266,346.455 241.429,347.446 242.157,348.768 C242.287,349.004 242.432,349.248 242.64,349.584 C242.678,349.647 242.705,349.69 242.773,349.799 C242.84,349.908 242.84,349.908 242.909,350.018 C243.023,350.201 243.107,350.337 243.19,350.475 C245.406,354.066 245.482,357.177 244.612,361.115 C245.887,360.855 245.3,360.92 246.368,360.866 C247.488,360.923 246.848,360.855 248.28,361.147 C249.252,357.208 249.159,354.945 247.127,351.281 C247.047,351.15 246.966,351.017 246.855,350.839 C246.938,350.972 246.647,350.505 246.583,350.401 C246.363,350.045 246.206,349.781 246.061,349.518 C245.142,347.849 244.909,346.429 245.486,344.623 C245.682,344.009 245.889,343.466 246.231,342.64 C246.269,342.548 246.311,342.446 246.391,342.255 C246.455,342.1 246.501,341.987 246.547,341.876 C247.271,340.102 247.561,338.968 247.561,337.435 C247.561,337.005 247.909,336.657 248.339,336.657 C248.768,336.657 249.116,337.005 249.116,337.435 C249.116,339.206 248.781,340.52 247.987,342.464 C247.94,342.578 247.892,342.694 247.827,342.85 C247.748,343.042 247.706,343.144 247.668,343.234 C247.342,344.024 247.147,344.533 246.967,345.096 C246.533,346.455 246.696,347.446 247.424,348.768 C247.554,349.004 247.699,349.248 247.906,349.584 C247.945,349.647 247.972,349.69 248.04,349.799 C248.107,349.908 248.107,349.908 248.176,350.018 C248.29,350.201 248.374,350.337 248.457,350.475 C250.696,354.174 250.863,357.684 249.734,361.735 C252.01,363.062 253.215,365.245 253.346,367.845 C253.346,371.7 250.222,374.824 246.368,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M246.368,297.184 C250.222,297.184 253.347,300.308 253.347,304.163 C253.345,306.734 251.982,308.755 249.917,310.149 C248.738,314.341 248.691,316.788 250.875,320.727 C250.955,320.858 251.036,320.991 251.147,321.169 C251.064,321.036 251.355,321.503 251.419,321.607 C251.639,321.963 251.796,322.227 251.941,322.49 C252.86,324.159 253.093,325.579 252.516,327.385 C252.32,327.999 252.113,328.542 251.771,329.368 C251.733,329.46 251.691,329.562 251.611,329.753 C251.547,329.908 251.501,330.021 251.455,330.132 C250.731,331.906 250.441,333.04 250.441,334.573 C250.441,335.003 250.093,335.351 249.663,335.351 C249.234,335.351 248.886,335.003 248.886,334.573 C248.886,332.802 249.221,331.488 250.015,329.544 C250.062,329.43 250.11,329.314 250.175,329.158 C250.254,328.966 250.296,328.864 250.334,328.774 C250.66,327.984 250.855,327.475 251.035,326.912 C251.469,325.553 251.306,324.562 250.578,323.24 C250.448,323.004 250.303,322.76 250.096,322.424 C250.057,322.361 250.03,322.318 249.962,322.209 C249.895,322.1 249.895,322.1 249.826,321.99 C249.712,321.807 249.628,321.671 249.545,321.533 C247.329,317.942 247.253,314.831 248.123,310.893 C246.848,311.153 247.435,311.088 246.368,311.142 C245.247,311.085 245.887,311.153 244.455,310.861 C243.483,314.8 243.577,317.063 245.608,320.727 C245.688,320.858 245.769,320.991 245.88,321.169 C245.798,321.036 246.088,321.503 246.152,321.607 C246.372,321.963 246.529,322.227 246.674,322.49 C247.593,324.159 247.826,325.579 247.249,327.385 C247.053,327.999 246.846,328.542 246.504,329.368 C246.466,329.46 246.424,329.562 246.344,329.753 C246.28,329.908 246.234,330.021 246.188,330.132 C245.464,331.906 245.174,333.04 245.174,334.573 C245.174,335.003 244.826,335.351 244.396,335.351 C243.967,335.351 243.619,335.003 243.619,334.573 C243.619,332.802 243.955,331.488 244.749,329.544 C244.795,329.43 244.843,329.314 244.908,329.158 C244.988,328.966 245.03,328.864 245.067,328.774 C245.393,327.984 245.588,327.475 245.768,326.912 C246.202,325.553 246.04,324.562 245.311,323.24 C245.181,323.004 245.036,322.76 244.829,322.424 C244.79,322.361 244.763,322.318 244.696,322.209 C244.628,322.1 244.628,322.1 244.559,321.99 C244.446,321.807 244.361,321.671 244.278,321.533 C242.039,317.834 241.872,314.324 243.001,310.273 C240.725,308.946 239.52,306.763 239.389,304.163 C239.389,300.308 242.513,297.184 246.368,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M260.325,374.824 C256.471,374.824 253.347,371.7 253.347,367.845 C253.348,365.274 254.711,363.253 256.777,361.859 C257.955,357.667 258.002,355.22 255.818,351.281 C255.738,351.15 255.657,351.017 255.546,350.839 C255.629,350.972 255.338,350.505 255.274,350.401 C255.054,350.045 254.897,349.781 254.753,349.518 C253.833,347.849 253.6,346.429 254.177,344.623 C254.373,344.009 254.58,343.466 254.922,342.64 C254.96,342.548 255.002,342.446 255.082,342.255 C255.146,342.1 255.192,341.987 255.238,341.876 C255.962,340.102 256.252,338.968 256.252,337.435 C256.252,337.005 256.6,336.657 257.03,336.657 C257.459,336.657 257.807,337.005 257.807,337.435 C257.807,339.206 257.472,340.52 256.678,342.464 C256.631,342.578 256.583,342.694 256.518,342.85 C256.439,343.042 256.397,343.144 256.359,343.234 C256.033,344.024 255.838,344.533 255.658,345.096 C255.224,346.455 255.387,347.446 256.115,348.768 C256.245,349.004 256.39,349.248 256.598,349.584 C256.636,349.647 256.663,349.69 256.731,349.799 C256.798,349.908 256.798,349.908 256.867,350.018 C256.981,350.201 257.065,350.337 257.148,350.475 C259.364,354.066 259.44,357.177 258.57,361.115 C259.845,360.855 259.258,360.92 260.325,360.866 C261.446,360.923 260.806,360.855 262.238,361.147 C263.21,357.208 263.116,354.945 261.085,351.281 C261.005,351.15 260.924,351.017 260.813,350.839 C260.895,350.972 260.605,350.505 260.541,350.401 C260.321,350.045 260.164,349.781 260.019,349.518 C259.1,347.849 258.867,346.429 259.444,344.623 C259.64,344.009 259.847,343.466 260.189,342.64 C260.227,342.548 260.269,342.446 260.349,342.255 C260.413,342.1 260.459,341.987 260.505,341.876 C261.229,340.102 261.519,338.968 261.519,337.435 C261.519,337.005 261.867,336.657 262.297,336.657 C262.726,336.657 263.074,337.005 263.074,337.435 C263.074,339.206 262.738,340.52 261.944,342.464 C261.898,342.578 261.85,342.694 261.785,342.85 C261.706,343.042 261.663,343.144 261.626,343.234 C261.3,344.024 261.105,344.533 260.925,345.096 C260.491,346.455 260.653,347.446 261.382,348.768 C261.512,349.004 261.657,349.248 261.864,349.584 C261.903,349.647 261.93,349.69 261.997,349.799 C262.065,349.908 262.065,349.908 262.134,350.018 C262.247,350.201 262.332,350.337 262.415,350.475 C264.654,354.174 264.821,357.684 263.692,361.735 C265.968,363.062 267.173,365.245 267.304,367.845 C267.304,371.7 264.18,374.824 260.325,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M260.326,297.184 C264.18,297.184 267.304,300.308 267.304,304.163 C267.303,306.734 265.94,308.755 263.874,310.149 C262.696,314.341 262.649,316.788 264.833,320.727 C264.913,320.858 264.994,320.991 265.105,321.169 C265.022,321.036 265.313,321.503 265.377,321.607 C265.596,321.963 265.754,322.227 265.898,322.49 C266.818,324.159 267.051,325.579 266.474,327.385 C266.278,327.999 266.071,328.542 265.729,329.368 C265.691,329.46 265.649,329.562 265.569,329.753 C265.505,329.908 265.458,330.021 265.413,330.132 C264.689,331.906 264.399,333.04 264.399,334.573 C264.399,335.003 264.051,335.351 263.621,335.351 C263.192,335.351 262.844,335.003 262.844,334.573 C262.844,332.802 263.179,331.488 263.973,329.544 C264.02,329.43 264.068,329.314 264.133,329.158 C264.212,328.966 264.254,328.864 264.292,328.774 C264.618,327.984 264.813,327.475 264.993,326.912 C265.427,325.553 265.264,324.562 264.536,323.24 C264.406,323.004 264.261,322.76 264.053,322.424 C264.015,322.361 263.988,322.318 263.92,322.209 C263.853,322.1 263.853,322.1 263.784,321.99 C263.67,321.807 263.586,321.671 263.503,321.533 C261.287,317.942 261.211,314.831 262.081,310.893 C260.806,311.153 261.393,311.088 260.326,311.142 C259.205,311.085 259.845,311.153 258.413,310.861 C257.441,314.8 257.534,317.063 259.566,320.727 C259.646,320.858 259.727,320.991 259.838,321.169 C259.755,321.036 260.046,321.503 260.11,321.607 C260.33,321.963 260.487,322.227 260.632,322.49 C261.551,324.159 261.784,325.579 261.207,327.385 C261.011,327.999 260.804,328.542 260.462,329.368 C260.424,329.46 260.382,329.562 260.302,329.753 C260.238,329.908 260.192,330.021 260.146,330.132 C259.422,331.906 259.132,333.04 259.132,334.573 C259.132,335.003 258.784,335.351 258.354,335.351 C257.925,335.351 257.577,335.003 257.577,334.573 C257.577,332.802 257.912,331.488 258.706,329.544 C258.753,329.43 258.801,329.314 258.866,329.158 C258.945,328.966 258.987,328.864 259.025,328.774 C259.351,327.984 259.546,327.475 259.726,326.912 C260.16,325.553 259.997,324.562 259.269,323.24 C259.139,323.004 258.994,322.76 258.787,322.424 C258.748,322.361 258.721,322.318 258.653,322.209 C258.586,322.1 258.586,322.1 258.517,321.99 C258.403,321.807 258.319,321.671 258.236,321.533 C255.997,317.834 255.83,314.324 256.959,310.273 C254.683,308.946 253.478,306.763 253.346,304.163 C253.347,300.308 256.471,297.184 260.326,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M274.283,374.824 C270.429,374.824 267.305,371.7 267.305,367.845 C267.306,365.274 268.669,363.253 270.734,361.859 C271.913,357.667 271.96,355.22 269.776,351.281 C269.696,351.15 269.615,351.017 269.504,350.839 C269.587,350.972 269.296,350.505 269.232,350.401 C269.012,350.045 268.855,349.781 268.71,349.518 C267.791,347.849 267.558,346.429 268.135,344.623 C268.331,344.009 268.538,343.466 268.88,342.64 C268.918,342.548 268.96,342.446 269.04,342.255 C269.104,342.1 269.15,341.987 269.196,341.876 C269.92,340.102 270.21,338.968 270.21,337.435 C270.21,337.005 270.558,336.657 270.988,336.657 C271.417,336.657 271.765,337.005 271.765,337.435 C271.765,339.206 271.43,340.52 270.636,342.464 C270.589,342.578 270.541,342.694 270.476,342.85 C270.397,343.042 270.355,343.144 270.317,343.234 C269.991,344.024 269.796,344.533 269.616,345.096 C269.182,346.455 269.345,347.446 270.073,348.768 C270.203,349.004 270.348,349.248 270.555,349.584 C270.594,349.647 270.621,349.69 270.689,349.799 C270.756,349.908 270.756,349.908 270.825,350.018 C270.939,350.201 271.023,350.337 271.106,350.475 C273.322,354.066 273.398,357.177 272.528,361.115 C273.803,360.855 273.216,360.92 274.283,360.866 C275.404,360.923 274.764,360.855 276.196,361.147 C277.168,357.208 277.074,354.945 275.043,351.281 C274.963,351.15 274.882,351.017 274.771,350.839 C274.853,350.972 274.563,350.505 274.499,350.401 C274.279,350.045 274.122,349.781 273.977,349.518 C273.058,347.849 272.825,346.429 273.402,344.623 C273.597,344.009 273.805,343.466 274.147,342.64 C274.185,342.548 274.227,342.446 274.307,342.255 C274.37,342.1 274.417,341.987 274.463,341.876 C275.187,340.102 275.477,338.968 275.477,337.435 C275.477,337.005 275.825,336.657 276.255,336.657 C276.684,336.657 277.032,337.005 277.032,337.435 C277.032,339.206 276.696,340.52 275.902,342.464 C275.856,342.578 275.808,342.694 275.743,342.85 C275.663,343.042 275.621,343.144 275.584,343.234 C275.258,344.024 275.063,344.533 274.883,345.096 C274.449,346.455 274.611,347.446 275.34,348.768 C275.47,349.004 275.615,349.248 275.822,349.584 C275.861,349.647 275.888,349.69 275.955,349.799 C276.023,349.908 276.023,349.908 276.092,350.018 C276.205,350.201 276.29,350.337 276.373,350.475 C278.612,354.174 278.779,357.684 277.65,361.735 C279.926,363.062 281.131,365.245 281.262,367.845 C281.262,371.7 278.138,374.824 274.283,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M274.283,297.184 C278.138,297.184 281.262,300.308 281.262,304.163 C281.261,306.734 279.898,308.755 277.832,310.149 C276.653,314.341 276.606,316.788 278.791,320.727 C278.87,320.858 278.952,320.991 279.063,321.169 C278.98,321.036 279.271,321.503 279.335,321.607 C279.554,321.963 279.711,322.227 279.856,322.49 C280.776,324.159 281.009,325.579 280.432,327.385 C280.236,327.999 280.028,328.542 279.687,329.368 C279.649,329.46 279.607,329.562 279.527,329.753 C279.463,329.908 279.416,330.021 279.371,330.132 C278.647,331.906 278.357,333.04 278.357,334.573 C278.357,335.003 278.009,335.351 277.579,335.351 C277.15,335.351 276.802,335.003 276.801,334.573 C276.802,332.802 277.137,331.488 277.931,329.544 C277.978,329.43 278.026,329.314 278.09,329.158 C278.17,328.966 278.212,328.864 278.25,328.774 C278.576,327.984 278.771,327.475 278.951,326.912 C279.385,325.553 279.222,324.562 278.494,323.24 C278.364,323.004 278.219,322.76 278.011,322.424 C277.972,322.361 277.945,322.318 277.878,322.209 C277.811,322.1 277.811,322.1 277.742,321.99 C277.628,321.807 277.544,321.671 277.461,321.533 C275.245,317.942 275.169,314.831 276.039,310.893 C274.764,311.153 275.351,311.088 274.283,311.142 C273.163,311.085 273.803,311.153 272.371,310.861 C271.399,314.8 271.492,317.063 273.524,320.727 C273.604,320.858 273.685,320.991 273.796,321.169 C273.713,321.036 274.004,321.503 274.068,321.607 C274.288,321.963 274.445,322.227 274.59,322.49 C275.509,324.159 275.742,325.579 275.165,327.385 C274.969,327.999 274.762,328.542 274.42,329.368 C274.382,329.46 274.34,329.562 274.26,329.753 C274.196,329.908 274.15,330.021 274.104,330.132 C273.38,331.906 273.09,333.04 273.09,334.573 C273.09,335.003 272.742,335.351 272.312,335.351 C271.883,335.351 271.535,335.003 271.535,334.573 C271.535,332.802 271.87,331.488 272.664,329.544 C272.711,329.43 272.759,329.314 272.824,329.158 C272.903,328.966 272.945,328.864 272.983,328.774 C273.309,327.984 273.504,327.475 273.684,326.912 C274.118,325.553 273.955,324.562 273.227,323.24 C273.097,323.004 272.952,322.76 272.745,322.424 C272.706,322.361 272.679,322.318 272.611,322.209 C272.544,322.1 272.544,322.1 272.475,321.99 C272.361,321.807 272.277,321.671 272.194,321.533 C269.955,317.834 269.788,314.324 270.917,310.273 C268.64,308.946 267.436,306.763 267.304,304.163 C267.304,300.308 270.429,297.184 274.283,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M288.241,374.824 C284.387,374.824 281.262,371.7 281.262,367.845 C281.264,365.274 282.627,363.253 284.692,361.859 C285.871,357.667 285.918,355.22 283.734,351.281 C283.654,351.15 283.573,351.017 283.462,350.839 C283.544,350.972 283.254,350.505 283.19,350.401 C282.97,350.045 282.813,349.781 282.668,349.518 C281.749,347.849 281.516,346.429 282.093,344.623 C282.289,344.009 282.496,343.466 282.838,342.64 C282.876,342.548 282.918,342.446 282.998,342.255 C283.062,342.1 283.108,341.987 283.154,341.876 C283.878,340.102 284.168,338.968 284.168,337.435 C284.168,337.005 284.516,336.657 284.946,336.657 C285.375,336.657 285.723,337.005 285.723,337.435 C285.723,339.206 285.387,340.52 284.593,342.464 C284.547,342.578 284.499,342.694 284.434,342.85 C284.355,343.042 284.312,343.144 284.275,343.234 C283.949,344.024 283.754,344.533 283.574,345.096 C283.14,346.455 283.303,347.446 284.031,348.768 C284.161,349.004 284.306,349.248 284.513,349.584 C284.552,349.647 284.579,349.69 284.646,349.799 C284.714,349.908 284.714,349.908 284.783,350.018 C284.897,350.201 284.981,350.337 285.064,350.475 C287.28,354.066 287.356,357.177 286.486,361.115 C287.761,360.855 287.174,360.92 288.241,360.866 C289.362,360.923 288.722,360.855 290.154,361.147 C291.126,357.208 291.032,354.945 289.001,351.281 C288.921,351.15 288.84,351.017 288.729,350.839 C288.811,350.972 288.521,350.505 288.457,350.401 C288.237,350.045 288.08,349.781 287.935,349.518 C287.016,347.849 286.783,346.429 287.359,344.623 C287.555,344.009 287.763,343.466 288.105,342.64 C288.142,342.548 288.185,342.446 288.264,342.255 C288.328,342.1 288.375,341.987 288.421,341.876 C289.145,340.102 289.435,338.968 289.435,337.435 C289.435,337.005 289.783,336.657 290.212,336.657 C290.642,336.657 290.99,337.005 290.99,337.435 C290.99,339.206 290.654,340.52 289.86,342.464 C289.814,342.578 289.766,342.694 289.701,342.85 C289.621,343.042 289.579,343.144 289.542,343.234 C289.216,344.024 289.021,344.533 288.841,345.096 C288.407,346.455 288.569,347.446 289.297,348.768 C289.427,349.004 289.573,349.248 289.78,349.584 C289.819,349.647 289.846,349.69 289.913,349.799 C289.981,349.908 289.981,349.908 290.05,350.018 C290.163,350.201 290.248,350.337 290.331,350.475 C292.57,354.174 292.737,357.684 291.608,361.735 C293.884,363.062 295.089,365.245 295.22,367.845 C295.22,371.7 292.096,374.824 288.241,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M288.241,297.184 C292.096,297.184 295.22,300.308 295.22,304.163 C295.219,306.734 293.855,308.755 291.79,310.149 C290.611,314.341 290.564,316.788 292.749,320.727 C292.828,320.858 292.91,320.991 293.021,321.169 C292.938,321.036 293.229,321.503 293.292,321.607 C293.512,321.963 293.669,322.227 293.814,322.49 C294.734,324.159 294.967,325.579 294.39,327.385 C294.194,327.999 293.986,328.542 293.645,329.368 C293.607,329.46 293.565,329.562 293.485,329.753 C293.421,329.908 293.374,330.021 293.329,330.132 C292.604,331.906 292.315,333.04 292.315,334.573 C292.315,335.003 291.967,335.351 291.537,335.351 C291.108,335.351 290.759,335.003 290.759,334.573 C290.759,332.802 291.095,331.488 291.889,329.544 C291.936,329.43 291.983,329.314 292.048,329.158 C292.128,328.966 292.17,328.864 292.208,328.774 C292.534,327.984 292.729,327.475 292.909,326.912 C293.343,325.553 293.18,324.562 292.452,323.24 C292.322,323.004 292.177,322.76 291.969,322.424 C291.93,322.361 291.903,322.318 291.836,322.209 C291.768,322.1 291.768,322.1 291.7,321.99 C291.586,321.807 291.502,321.671 291.419,321.533 C289.203,317.942 289.127,314.831 289.997,310.893 C288.722,311.153 289.309,311.088 288.241,311.142 C287.12,311.085 287.761,311.153 286.329,310.861 C285.357,314.8 285.45,317.063 287.482,320.727 C287.561,320.858 287.643,320.991 287.754,321.169 C287.671,321.036 287.962,321.503 288.026,321.607 C288.245,321.963 288.402,322.227 288.547,322.49 C289.467,324.159 289.7,325.579 289.123,327.385 C288.927,327.999 288.72,328.542 288.378,329.368 C288.34,329.46 288.298,329.562 288.218,329.753 C288.154,329.908 288.107,330.021 288.062,330.132 C287.338,331.906 287.048,333.04 287.048,334.573 C287.048,335.003 286.7,335.351 286.27,335.351 C285.841,335.351 285.493,335.003 285.493,334.573 C285.493,332.802 285.828,331.488 286.622,329.544 C286.669,329.43 286.717,329.314 286.782,329.158 C286.861,328.966 286.903,328.864 286.941,328.774 C287.267,327.984 287.462,327.475 287.642,326.912 C288.076,325.553 287.913,324.562 287.185,323.24 C287.055,323.004 286.91,322.76 286.702,322.424 C286.664,322.361 286.637,322.318 286.569,322.209 C286.502,322.1 286.502,322.1 286.433,321.99 C286.319,321.807 286.235,321.671 286.152,321.533 C283.913,317.834 283.745,314.324 284.875,310.273 C282.598,308.946 281.394,306.763 281.262,304.163 C281.262,300.308 284.387,297.184 288.241,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M302.199,374.824 C298.345,374.824 295.22,371.7 295.22,367.845 C295.222,365.274 296.585,363.253 298.65,361.859 C299.829,357.667 299.876,355.22 297.692,351.281 C297.612,351.15 297.531,351.017 297.42,350.839 C297.502,350.972 297.212,350.505 297.148,350.401 C296.928,350.045 296.771,349.781 296.626,349.518 C295.707,347.849 295.474,346.429 296.051,344.623 C296.247,344.009 296.454,343.466 296.796,342.64 C296.834,342.548 296.876,342.446 296.956,342.255 C297.02,342.1 297.066,341.987 297.112,341.876 C297.836,340.102 298.126,338.968 298.126,337.435 C298.126,337.005 298.474,336.657 298.904,336.657 C299.333,336.657 299.681,337.005 299.681,337.435 C299.681,339.206 299.345,340.52 298.551,342.464 C298.505,342.578 298.457,342.694 298.392,342.85 C298.312,343.042 298.27,343.144 298.233,343.234 C297.907,344.024 297.712,344.533 297.532,345.096 C297.098,346.455 297.26,347.446 297.989,348.768 C298.119,349.004 298.264,349.248 298.471,349.584 C298.51,349.647 298.537,349.69 298.604,349.799 C298.672,349.908 298.672,349.908 298.741,350.018 C298.854,350.201 298.939,350.337 299.022,350.475 C301.238,354.066 301.314,357.177 300.444,361.115 C301.719,360.855 301.132,360.92 302.199,360.866 C303.32,360.923 302.679,360.855 304.112,361.147 C305.084,357.208 304.99,354.945 302.959,351.281 C302.879,351.15 302.798,351.017 302.687,350.839 C302.769,350.972 302.479,350.505 302.415,350.401 C302.195,350.045 302.038,349.781 301.893,349.518 C300.974,347.849 300.74,346.429 301.317,344.623 C301.513,344.009 301.721,343.466 302.063,342.64 C302.1,342.548 302.143,342.446 302.222,342.255 C302.286,342.1 302.333,341.987 302.378,341.876 C303.103,340.102 303.393,338.968 303.393,337.435 C303.393,337.005 303.741,336.657 304.17,336.657 C304.6,336.657 304.948,337.005 304.948,337.435 C304.948,339.206 304.612,340.52 303.818,342.464 C303.772,342.578 303.724,342.694 303.659,342.85 C303.579,343.042 303.537,343.144 303.5,343.234 C303.173,344.024 302.979,344.533 302.799,345.096 C302.365,346.455 302.527,347.446 303.255,348.768 C303.385,349.004 303.531,349.248 303.738,349.584 C303.777,349.647 303.804,349.69 303.871,349.799 C303.939,349.908 303.939,349.908 304.008,350.018 C304.121,350.201 304.205,350.337 304.289,350.475 C306.528,354.174 306.695,357.684 305.565,361.735 C307.842,363.062 309.047,365.245 309.178,367.845 C309.178,371.7 306.054,374.824 302.199,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M302.199,297.184 C306.054,297.184 309.178,300.308 309.178,304.163 C309.176,306.734 307.813,308.755 305.748,310.149 C304.569,314.341 304.522,316.788 306.706,320.727 C306.786,320.858 306.868,320.991 306.978,321.169 C306.896,321.036 307.187,321.503 307.25,321.607 C307.47,321.963 307.627,322.227 307.772,322.49 C308.692,324.159 308.925,325.579 308.348,327.385 C308.152,327.999 307.944,328.542 307.603,329.368 C307.565,329.46 307.522,329.562 307.443,329.753 C307.379,329.908 307.332,330.021 307.287,330.132 C306.562,331.906 306.273,333.04 306.273,334.573 C306.273,335.003 305.924,335.351 305.495,335.351 C305.066,335.351 304.717,335.003 304.717,334.573 C304.717,332.802 305.053,331.488 305.847,329.544 C305.894,329.43 305.941,329.314 306.006,329.158 C306.086,328.966 306.128,328.864 306.165,328.774 C306.492,327.984 306.687,327.475 306.867,326.912 C307.301,325.553 307.138,324.562 306.41,323.24 C306.28,323.004 306.135,322.76 305.927,322.424 C305.888,322.361 305.861,322.318 305.794,322.209 C305.726,322.1 305.726,322.1 305.658,321.99 C305.544,321.807 305.46,321.671 305.377,321.533 C303.161,317.942 303.085,314.831 303.954,310.893 C302.679,311.153 303.267,311.088 302.199,311.142 C301.078,311.085 301.719,311.153 300.287,310.861 C299.315,314.8 299.408,317.063 301.44,320.727 C301.519,320.858 301.601,320.991 301.712,321.169 C301.629,321.036 301.92,321.503 301.983,321.607 C302.203,321.963 302.36,322.227 302.505,322.49 C303.425,324.159 303.658,325.579 303.081,327.385 C302.885,327.999 302.677,328.542 302.336,329.368 C302.298,329.46 302.256,329.562 302.176,329.753 C302.112,329.908 302.065,330.021 302.02,330.132 C301.296,331.906 301.006,333.04 301.006,334.573 C301.006,335.003 300.658,335.351 300.228,335.351 C299.799,335.351 299.45,335.003 299.45,334.573 C299.45,332.802 299.786,331.488 300.58,329.544 C300.627,329.43 300.675,329.314 300.739,329.158 C300.819,328.966 300.861,328.864 300.899,328.774 C301.225,327.984 301.42,327.475 301.6,326.912 C302.034,325.553 301.871,324.562 301.143,323.24 C301.013,323.004 300.868,322.76 300.66,322.424 C300.621,322.361 300.594,322.318 300.527,322.209 C300.459,322.1 300.459,322.1 300.391,321.99 C300.277,321.807 300.193,321.671 300.11,321.533 C297.87,317.834 297.703,314.324 298.833,310.273 C296.556,308.946 295.352,306.763 295.22,304.163 C295.22,300.308 298.345,297.184 302.199,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M316.157,374.824 C312.303,374.824 309.178,371.7 309.178,367.845 C309.18,365.274 310.543,363.253 312.608,361.859 C313.787,357.667 313.834,355.22 311.65,351.281 C311.57,351.15 311.489,351.017 311.378,350.839 C311.46,350.972 311.17,350.505 311.106,350.401 C310.886,350.045 310.729,349.781 310.584,349.518 C309.665,347.849 309.432,346.429 310.008,344.623 C310.204,344.009 310.412,343.466 310.754,342.64 C310.791,342.548 310.834,342.446 310.913,342.255 C310.977,342.1 311.024,341.987 311.07,341.876 C311.794,340.102 312.084,338.968 312.084,337.435 C312.084,337.005 312.432,336.657 312.862,336.657 C313.291,336.657 313.639,337.005 313.639,337.435 C313.639,339.206 313.303,340.52 312.509,342.464 C312.463,342.578 312.415,342.694 312.35,342.85 C312.27,343.042 312.228,343.144 312.191,343.234 C311.865,344.024 311.67,344.533 311.49,345.096 C311.056,346.455 311.218,347.446 311.946,348.768 C312.077,349.004 312.222,349.248 312.429,349.584 C312.468,349.647 312.495,349.69 312.562,349.799 C312.63,349.908 312.63,349.908 312.699,350.018 C312.812,350.201 312.897,350.337 312.98,350.475 C315.196,354.066 315.272,357.177 314.402,361.115 C315.677,360.855 315.09,360.92 316.157,360.866 C317.278,360.923 316.637,360.855 318.069,361.147 C319.042,357.208 318.948,354.945 316.917,351.281 C316.837,351.15 316.755,351.017 316.645,350.839 C316.727,350.972 316.437,350.505 316.373,350.401 C316.153,350.045 315.996,349.781 315.851,349.518 C314.931,347.849 314.698,346.429 315.275,344.623 C315.471,344.009 315.679,343.466 316.02,342.64 C316.058,342.548 316.101,342.446 316.18,342.255 C316.244,342.1 316.291,341.987 316.336,341.876 C317.061,340.102 317.351,338.968 317.351,337.435 C317.351,337.005 317.699,336.657 318.128,336.657 C318.558,336.657 318.906,337.005 318.906,337.435 C318.906,339.206 318.57,340.52 317.776,342.464 C317.73,342.578 317.682,342.694 317.617,342.85 C317.537,343.042 317.495,343.144 317.458,343.234 C317.131,344.024 316.937,344.533 316.757,345.096 C316.323,346.455 316.485,347.446 317.213,348.768 C317.343,349.004 317.489,349.248 317.696,349.584 C317.735,349.647 317.762,349.69 317.829,349.799 C317.897,349.908 317.897,349.908 317.966,350.018 C318.079,350.201 318.163,350.337 318.247,350.475 C320.486,354.174 320.653,357.684 319.523,361.735 C321.8,363.062 323.005,365.245 323.136,367.845 C323.136,371.7 320.011,374.824 316.157,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M316.157,297.184 C320.012,297.184 323.136,300.308 323.136,304.163 C323.134,306.734 321.771,308.755 319.706,310.149 C318.527,314.341 318.48,316.788 320.664,320.727 C320.744,320.858 320.826,320.991 320.936,321.169 C320.854,321.036 321.144,321.503 321.208,321.607 C321.428,321.963 321.585,322.227 321.73,322.49 C322.65,324.159 322.883,325.579 322.306,327.385 C322.11,327.999 321.902,328.542 321.561,329.368 C321.523,329.46 321.48,329.562 321.401,329.753 C321.337,329.908 321.29,330.021 321.245,330.132 C320.52,331.906 320.23,333.04 320.23,334.573 C320.23,335.003 319.882,335.351 319.453,335.351 C319.023,335.351 318.675,335.003 318.675,334.573 C318.675,332.802 319.011,331.488 319.805,329.544 C319.852,329.43 319.899,329.314 319.964,329.158 C320.044,328.966 320.086,328.864 320.123,328.774 C320.45,327.984 320.644,327.475 320.824,326.912 C321.259,325.553 321.096,324.562 320.368,323.24 C320.238,323.004 320.093,322.76 319.885,322.424 C319.846,322.361 319.819,322.318 319.752,322.209 C319.684,322.1 319.684,322.1 319.615,321.99 C319.502,321.807 319.418,321.671 319.335,321.533 C317.118,317.942 317.042,314.831 317.912,310.893 C316.637,311.153 317.225,311.088 316.157,311.142 C315.036,311.085 315.677,311.153 314.245,310.861 C313.273,314.8 313.366,317.063 315.397,320.727 C315.477,320.858 315.559,320.991 315.67,321.169 C315.587,321.036 315.878,321.503 315.941,321.607 C316.161,321.963 316.318,322.227 316.463,322.49 C317.383,324.159 317.616,325.579 317.039,327.385 C316.843,327.999 316.635,328.542 316.294,329.368 C316.256,329.46 316.213,329.562 316.134,329.753 C316.07,329.908 316.023,330.021 315.978,330.132 C315.253,331.906 314.964,333.04 314.964,334.573 C314.964,335.003 314.615,335.351 314.186,335.351 C313.757,335.351 313.408,335.003 313.408,334.573 C313.408,332.802 313.744,331.488 314.538,329.544 C314.585,329.43 314.632,329.314 314.697,329.158 C314.777,328.966 314.819,328.864 314.857,328.774 C315.183,327.984 315.378,327.475 315.558,326.912 C315.992,325.553 315.829,324.562 315.101,323.24 C314.971,323.004 314.826,322.76 314.618,322.424 C314.579,322.361 314.552,322.318 314.485,322.209 C314.417,322.1 314.417,322.1 314.349,321.99 C314.235,321.807 314.151,321.671 314.068,321.533 C311.828,317.834 311.661,314.324 312.791,310.273 C310.514,308.946 309.31,306.763 309.178,304.163 C309.178,300.308 312.303,297.184 316.157,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M330.115,374.824 C326.261,374.824 323.136,371.7 323.136,367.845 C323.138,365.274 324.501,363.253 326.566,361.859 C327.745,357.667 327.792,355.22 325.608,351.281 C325.528,351.15 325.447,351.017 325.336,350.839 C325.418,350.972 325.128,350.505 325.064,350.401 C324.844,350.045 324.687,349.781 324.542,349.518 C323.623,347.849 323.389,346.429 323.966,344.623 C324.162,344.009 324.37,343.466 324.712,342.64 C324.749,342.548 324.792,342.446 324.871,342.255 C324.935,342.1 324.982,341.987 325.027,341.876 C325.752,340.102 326.042,338.968 326.042,337.435 C326.042,337.005 326.39,336.657 326.819,336.657 C327.249,336.657 327.597,337.005 327.597,337.435 C327.597,339.206 327.261,340.52 326.467,342.464 C326.421,342.578 326.373,342.694 326.308,342.85 C326.228,343.042 326.186,343.144 326.149,343.234 C325.822,344.024 325.628,344.533 325.448,345.096 C325.014,346.455 325.176,347.446 325.904,348.768 C326.034,349.004 326.18,349.248 326.387,349.584 C326.426,349.647 326.453,349.69 326.52,349.799 C326.588,349.908 326.588,349.908 326.657,350.018 C326.77,350.201 326.854,350.337 326.938,350.475 C329.154,354.066 329.23,357.177 328.36,361.115 C329.635,360.855 329.048,360.92 330.115,360.866 C331.236,360.923 330.595,360.855 332.027,361.147 C333,357.208 332.906,354.945 330.875,351.281 C330.795,351.15 330.713,351.017 330.603,350.839 C330.685,350.972 330.395,350.505 330.331,350.401 C330.111,350.045 329.954,349.781 329.809,349.518 C328.889,347.849 328.656,346.429 329.233,344.623 C329.429,344.009 329.637,343.466 329.978,342.64 C330.016,342.548 330.059,342.446 330.138,342.255 C330.202,342.1 330.249,341.987 330.294,341.876 C331.019,340.102 331.309,338.968 331.309,337.435 C331.309,337.005 331.657,336.657 332.086,336.657 C332.516,336.657 332.864,337.005 332.864,337.435 C332.864,339.206 332.528,340.52 331.734,342.464 C331.687,342.578 331.64,342.694 331.575,342.85 C331.495,343.042 331.453,343.144 331.416,343.234 C331.089,344.024 330.895,344.533 330.715,345.096 C330.28,346.455 330.443,347.446 331.171,348.768 C331.301,349.004 331.446,349.248 331.654,349.584 C331.693,349.647 331.72,349.69 331.787,349.799 C331.855,349.908 331.855,349.908 331.924,350.018 C332.037,350.201 332.121,350.337 332.205,350.475 C334.444,354.174 334.611,357.684 333.481,361.735 C335.758,363.062 336.963,365.245 337.094,367.845 C337.094,371.7 333.969,374.824 330.115,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M330.115,297.184 C333.969,297.184 337.094,300.308 337.094,304.163 C337.092,306.734 335.729,308.755 333.664,310.149 C332.485,314.341 332.438,316.788 334.622,320.727 C334.702,320.858 334.784,320.991 334.894,321.169 C334.812,321.036 335.102,321.503 335.166,321.607 C335.386,321.963 335.543,322.227 335.688,322.49 C336.608,324.159 336.841,325.579 336.264,327.385 C336.068,327.999 335.86,328.542 335.519,329.368 C335.481,329.46 335.438,329.562 335.359,329.753 C335.295,329.908 335.248,330.021 335.203,330.132 C334.478,331.906 334.188,333.04 334.188,334.573 C334.188,335.003 333.84,335.351 333.411,335.351 C332.981,335.351 332.633,335.003 332.633,334.573 C332.633,332.802 332.969,331.488 333.763,329.544 C333.81,329.43 333.857,329.314 333.922,329.158 C334.002,328.966 334.044,328.864 334.081,328.774 C334.408,327.984 334.602,327.475 334.782,326.912 C335.217,325.553 335.054,324.562 334.326,323.24 C334.196,323.004 334.051,322.76 333.843,322.424 C333.804,322.361 333.777,322.318 333.71,322.209 C333.642,322.1 333.642,322.1 333.573,321.99 C333.46,321.807 333.376,321.671 333.292,321.533 C331.076,317.942 331,314.831 331.87,310.893 C330.595,311.153 331.183,311.088 330.115,311.142 C328.994,311.085 329.635,311.153 328.203,310.861 C327.23,314.8 327.324,317.063 329.355,320.727 C329.435,320.858 329.517,320.991 329.627,321.169 C329.545,321.036 329.835,321.503 329.899,321.607 C330.119,321.963 330.276,322.227 330.421,322.49 C331.341,324.159 331.574,325.579 330.997,327.385 C330.801,327.999 330.593,328.542 330.252,329.368 C330.214,329.46 330.171,329.562 330.092,329.753 C330.028,329.908 329.981,330.021 329.936,330.132 C329.211,331.906 328.922,333.04 328.922,334.573 C328.922,335.003 328.573,335.351 328.144,335.351 C327.714,335.351 327.366,335.003 327.366,334.573 C327.366,332.802 327.702,331.488 328.496,329.544 C328.543,329.43 328.59,329.314 328.655,329.158 C328.735,328.966 328.777,328.864 328.814,328.774 C329.141,327.984 329.336,327.475 329.515,326.912 C329.95,325.553 329.787,324.562 329.059,323.24 C328.929,323.004 328.784,322.76 328.576,322.424 C328.537,322.361 328.51,322.318 328.443,322.209 C328.375,322.1 328.375,322.1 328.306,321.99 C328.193,321.807 328.109,321.671 328.026,321.533 C325.786,317.834 325.619,314.324 326.749,310.273 C324.472,308.946 323.267,306.763 323.136,304.163 C323.136,300.308 326.261,297.184 330.115,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M344.073,374.824 C340.219,374.824 337.094,371.7 337.094,367.845 C337.096,365.274 338.459,363.253 340.524,361.859 C341.703,357.667 341.75,355.22 339.566,351.281 C339.486,351.15 339.404,351.017 339.294,350.839 C339.376,350.972 339.086,350.505 339.022,350.401 C338.802,350.045 338.645,349.781 338.5,349.518 C337.58,347.849 337.347,346.429 337.924,344.623 C338.12,344.009 338.328,343.466 338.67,342.64 C338.707,342.548 338.75,342.446 338.829,342.255 C338.893,342.1 338.94,341.987 338.985,341.876 C339.71,340.102 340,338.968 340,337.435 C340,337.005 340.348,336.657 340.777,336.657 C341.207,336.657 341.555,337.005 341.555,337.435 C341.555,339.206 341.219,340.52 340.425,342.464 C340.379,342.578 340.331,342.694 340.266,342.85 C340.186,343.042 340.144,343.144 340.107,343.234 C339.78,344.024 339.586,344.533 339.406,345.096 C338.972,346.455 339.134,347.446 339.862,348.768 C339.992,349.004 340.138,349.248 340.345,349.584 C340.384,349.647 340.411,349.69 340.478,349.799 C340.546,349.908 340.546,349.908 340.615,350.018 C340.728,350.201 340.812,350.337 340.896,350.475 C343.112,354.066 343.188,357.177 342.318,361.115 C343.593,360.855 343.006,360.92 344.073,360.866 C345.194,360.923 344.553,360.855 345.985,361.147 C346.958,357.208 346.864,354.945 344.833,351.281 C344.753,351.15 344.671,351.017 344.561,350.839 C344.643,350.972 344.353,350.505 344.289,350.401 C344.069,350.045 343.912,349.781 343.767,349.518 C342.847,347.849 342.614,346.429 343.191,344.623 C343.387,344.009 343.595,343.466 343.936,342.64 C343.974,342.548 344.017,342.446 344.096,342.255 C344.16,342.1 344.207,341.987 344.252,341.876 C344.977,340.102 345.267,338.968 345.267,337.435 C345.267,337.005 345.615,336.657 346.044,336.657 C346.474,336.657 346.822,337.005 346.822,337.435 C346.822,339.206 346.486,340.52 345.692,342.464 C345.645,342.578 345.598,342.694 345.533,342.85 C345.453,343.042 345.411,343.144 345.374,343.234 C345.047,344.024 344.853,344.533 344.673,345.096 C344.238,346.455 344.401,347.446 345.129,348.768 C345.259,349.004 345.404,349.248 345.612,349.584 C345.651,349.647 345.678,349.69 345.745,349.799 C345.813,349.908 345.813,349.908 345.882,350.018 C345.995,350.201 346.079,350.337 346.163,350.475 C348.402,354.174 348.569,357.684 347.439,361.735 C349.716,363.062 350.921,365.245 351.052,367.845 C351.052,371.7 347.927,374.824 344.073,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M344.073,297.184 C347.927,297.184 351.052,300.308 351.052,304.163 C351.05,306.734 349.687,308.755 347.622,310.149 C346.443,314.341 346.396,316.788 348.58,320.727 C348.66,320.858 348.742,320.991 348.852,321.169 C348.77,321.036 349.06,321.503 349.124,321.607 C349.344,321.963 349.501,322.227 349.646,322.49 C350.566,324.159 350.799,325.579 350.222,327.385 C350.026,327.999 349.818,328.542 349.477,329.368 C349.439,329.46 349.396,329.562 349.317,329.753 C349.253,329.908 349.206,330.021 349.161,330.132 C348.436,331.906 348.146,333.04 348.146,334.573 C348.146,335.003 347.798,335.351 347.369,335.351 C346.939,335.351 346.591,335.003 346.591,334.573 C346.591,332.802 346.927,331.488 347.721,329.544 C347.767,329.43 347.815,329.314 347.88,329.158 C347.96,328.966 348.002,328.864 348.039,328.774 C348.366,327.984 348.56,327.475 348.74,326.912 C349.174,325.553 349.012,324.562 348.284,323.24 C348.154,323.004 348.008,322.76 347.801,322.424 C347.762,322.361 347.735,322.318 347.668,322.209 C347.6,322.1 347.6,322.1 347.531,321.99 C347.418,321.807 347.334,321.671 347.25,321.533 C345.034,317.942 344.958,314.831 345.828,310.893 C344.553,311.153 345.14,311.088 344.073,311.142 C342.952,311.085 343.593,311.153 342.161,310.861 C341.188,314.8 341.282,317.063 343.313,320.727 C343.393,320.858 343.475,320.991 343.585,321.169 C343.503,321.036 343.793,321.503 343.857,321.607 C344.077,321.963 344.234,322.227 344.379,322.49 C345.299,324.159 345.532,325.579 344.955,327.385 C344.759,327.999 344.551,328.542 344.21,329.368 C344.172,329.46 344.129,329.562 344.05,329.753 C343.986,329.908 343.939,330.021 343.894,330.132 C343.169,331.906 342.879,333.04 342.879,334.573 C342.879,335.003 342.531,335.351 342.102,335.351 C341.672,335.351 341.324,335.003 341.324,334.573 C341.324,332.802 341.66,331.488 342.454,329.544 C342.501,329.43 342.548,329.314 342.613,329.158 C342.693,328.966 342.735,328.864 342.772,328.774 C343.099,327.984 343.293,327.475 343.473,326.912 C343.908,325.553 343.745,324.562 343.017,323.24 C342.887,323.004 342.742,322.76 342.534,322.424 C342.495,322.361 342.468,322.318 342.401,322.209 C342.333,322.1 342.333,322.1 342.264,321.99 C342.151,321.807 342.067,321.671 341.983,321.533 C339.744,317.834 339.577,314.324 340.707,310.273 C338.43,308.946 337.225,306.763 337.094,304.163 C337.094,300.308 340.219,297.184 344.073,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M358.031,374.824 C354.177,374.824 351.052,371.7 351.052,367.845 C351.054,365.274 352.417,363.253 354.482,361.859 C355.661,357.667 355.708,355.22 353.524,351.281 C353.444,351.15 353.362,351.017 353.252,350.839 C353.334,350.972 353.044,350.505 352.98,350.401 C352.76,350.045 352.603,349.781 352.458,349.518 C351.538,347.849 351.305,346.429 351.882,344.623 C352.078,344.009 352.286,343.466 352.627,342.64 C352.665,342.548 352.708,342.446 352.787,342.255 C352.851,342.1 352.898,341.987 352.943,341.876 C353.668,340.102 353.958,338.968 353.958,337.435 C353.958,337.005 354.306,336.657 354.735,336.657 C355.165,336.657 355.513,337.005 355.513,337.435 C355.513,339.206 355.177,340.52 354.383,342.464 C354.336,342.578 354.289,342.694 354.224,342.85 C354.144,343.042 354.102,343.144 354.065,343.234 C353.738,344.024 353.544,344.533 353.364,345.096 C352.929,346.455 353.092,347.446 353.82,348.768 C353.95,349.004 354.095,349.248 354.303,349.584 C354.342,349.647 354.369,349.69 354.436,349.799 C354.504,349.908 354.504,349.908 354.573,350.018 C354.686,350.201 354.77,350.337 354.854,350.475 C357.07,354.066 357.146,357.177 356.276,361.115 C357.551,360.855 356.963,360.92 358.031,360.866 C359.152,360.923 358.511,360.855 359.943,361.147 C360.916,357.208 360.822,354.945 358.791,351.281 C358.711,351.15 358.629,351.017 358.519,350.839 C358.601,350.972 358.311,350.505 358.247,350.401 C358.027,350.045 357.87,349.781 357.725,349.518 C356.805,347.849 356.572,346.429 357.149,344.623 C357.345,344.009 357.553,343.466 357.894,342.64 C357.932,342.548 357.975,342.446 358.054,342.255 C358.118,342.1 358.165,341.987 358.21,341.876 C358.935,340.102 359.224,338.968 359.224,337.435 C359.224,337.005 359.573,336.657 360.002,336.657 C360.432,336.657 360.78,337.005 360.78,337.435 C360.78,339.206 360.444,340.52 359.65,342.464 C359.603,342.578 359.556,342.694 359.491,342.85 C359.411,343.042 359.369,343.144 359.332,343.234 C359.005,344.024 358.81,344.533 358.631,345.096 C358.196,346.455 358.359,347.446 359.087,348.768 C359.217,349.004 359.362,349.248 359.57,349.584 C359.609,349.647 359.636,349.69 359.703,349.799 C359.771,349.908 359.771,349.908 359.84,350.018 C359.953,350.201 360.037,350.337 360.12,350.475 C362.36,354.174 362.527,357.684 361.397,361.735 C363.674,363.062 364.879,365.245 365.01,367.845 C365.01,371.7 361.885,374.824 358.031,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M358.031,297.184 C361.885,297.184 365.01,300.308 365.01,304.163 C365.008,306.734 363.645,308.755 361.58,310.149 C360.401,314.341 360.354,316.788 362.538,320.727 C362.618,320.858 362.699,320.991 362.81,321.169 C362.728,321.036 363.018,321.503 363.082,321.607 C363.302,321.963 363.459,322.227 363.604,322.49 C364.524,324.159 364.757,325.579 364.18,327.385 C363.984,327.999 363.776,328.542 363.434,329.368 C363.397,329.46 363.354,329.562 363.275,329.753 C363.211,329.908 363.164,330.021 363.119,330.132 C362.394,331.906 362.104,333.04 362.104,334.573 C362.104,335.003 361.756,335.351 361.327,335.351 C360.897,335.351 360.549,335.003 360.549,334.573 C360.549,332.802 360.885,331.488 361.679,329.544 C361.725,329.43 361.773,329.314 361.838,329.158 C361.918,328.966 361.96,328.864 361.997,328.774 C362.324,327.984 362.518,327.475 362.698,326.912 C363.132,325.553 362.97,324.562 362.242,323.24 C362.112,323.004 361.966,322.76 361.759,322.424 C361.72,322.361 361.693,322.318 361.626,322.209 C361.558,322.1 361.558,322.1 361.489,321.99 C361.376,321.807 361.292,321.671 361.208,321.533 C358.992,317.942 358.916,314.831 359.786,310.893 C358.511,311.153 359.098,311.088 358.031,311.142 C356.91,311.085 357.551,311.153 356.119,310.861 C355.146,314.8 355.24,317.063 357.271,320.727 C357.351,320.858 357.433,320.991 357.543,321.169 C357.461,321.036 357.751,321.503 357.815,321.607 C358.035,321.963 358.192,322.227 358.337,322.49 C359.257,324.159 359.49,325.579 358.913,327.385 C358.717,327.999 358.509,328.542 358.168,329.368 C358.13,329.46 358.087,329.562 358.008,329.753 C357.944,329.908 357.897,330.021 357.852,330.132 C357.127,331.906 356.837,333.04 356.837,334.573 C356.837,335.003 356.489,335.351 356.06,335.351 C355.63,335.351 355.282,335.003 355.282,334.573 C355.282,332.802 355.618,331.488 356.412,329.544 C356.459,329.43 356.506,329.314 356.571,329.158 C356.651,328.966 356.693,328.864 356.73,328.774 C357.057,327.984 357.251,327.475 357.431,326.912 C357.866,325.553 357.703,324.562 356.975,323.24 C356.845,323.004 356.7,322.76 356.492,322.424 C356.453,322.361 356.426,322.318 356.359,322.209 C356.291,322.1 356.291,322.1 356.222,321.99 C356.109,321.807 356.025,321.671 355.941,321.533 C353.702,317.834 353.535,314.324 354.665,310.273 C352.388,308.946 351.183,306.763 351.052,304.163 C351.052,300.308 354.177,297.184 358.031,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M371.989,374.824 C368.134,374.824 365.01,371.7 365.01,367.845 C365.012,365.274 366.375,363.253 368.44,361.859 C369.619,357.667 369.666,355.22 367.482,351.281 C367.402,351.15 367.32,351.017 367.21,350.839 C367.292,350.972 367.002,350.505 366.938,350.401 C366.718,350.045 366.561,349.781 366.416,349.518 C365.496,347.849 365.263,346.429 365.84,344.623 C366.036,344.009 366.244,343.466 366.585,342.64 C366.623,342.548 366.666,342.446 366.745,342.255 C366.809,342.1 366.856,341.987 366.901,341.876 C367.626,340.102 367.916,338.968 367.916,337.435 C367.916,337.005 368.264,336.657 368.693,336.657 C369.123,336.657 369.471,337.005 369.471,337.435 C369.471,339.206 369.135,340.52 368.341,342.464 C368.294,342.578 368.247,342.694 368.182,342.85 C368.102,343.042 368.06,343.144 368.023,343.234 C367.696,344.024 367.502,344.533 367.322,345.096 C366.887,346.455 367.05,347.446 367.778,348.768 C367.908,349.004 368.053,349.248 368.261,349.584 C368.3,349.647 368.327,349.69 368.394,349.799 C368.462,349.908 368.462,349.908 368.531,350.018 C368.644,350.201 368.728,350.337 368.811,350.475 C371.028,354.066 371.104,357.177 370.234,361.115 C371.509,360.855 370.921,360.92 371.989,360.866 C373.11,360.923 372.469,360.855 373.901,361.147 C374.873,357.208 374.78,354.945 372.749,351.281 C372.669,351.15 372.587,351.017 372.476,350.839 C372.559,350.972 372.268,350.505 372.205,350.401 C371.985,350.045 371.828,349.781 371.683,349.518 C370.763,347.849 370.53,346.429 371.107,344.623 C371.303,344.009 371.511,343.466 371.852,342.64 C371.89,342.548 371.933,342.446 372.012,342.255 C372.076,342.1 372.123,341.987 372.168,341.876 C372.893,340.102 373.182,338.968 373.182,337.435 C373.182,337.005 373.531,336.657 373.96,336.657 C374.389,336.657 374.738,337.005 374.738,337.435 C374.738,339.206 374.402,340.52 373.608,342.464 C373.561,342.578 373.514,342.694 373.449,342.85 C373.369,343.042 373.327,343.144 373.289,343.234 C372.963,344.024 372.768,344.533 372.588,345.096 C372.154,346.455 372.317,347.446 373.045,348.768 C373.175,349.004 373.32,349.248 373.528,349.584 C373.567,349.647 373.594,349.69 373.661,349.799 C373.729,349.908 373.729,349.908 373.797,350.018 C373.911,350.201 373.995,350.337 374.078,350.475 C376.318,354.174 376.485,357.684 375.355,361.735 C377.632,363.062 378.836,365.245 378.968,367.845 C378.968,371.7 375.843,374.824 371.989,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M371.989,297.184 C375.843,297.184 378.968,300.308 378.968,304.163 C378.966,306.734 377.603,308.755 375.538,310.149 C374.359,314.341 374.312,316.788 376.496,320.727 C376.576,320.858 376.657,320.991 376.768,321.169 C376.686,321.036 376.976,321.503 377.04,321.607 C377.26,321.963 377.417,322.227 377.562,322.49 C378.481,324.159 378.715,325.579 378.138,327.385 C377.942,327.999 377.734,328.542 377.392,329.368 C377.355,329.46 377.312,329.562 377.233,329.753 C377.169,329.908 377.122,330.021 377.076,330.132 C376.352,331.906 376.062,333.04 376.062,334.573 C376.062,335.003 375.714,335.351 375.285,335.351 C374.855,335.351 374.507,335.003 374.507,334.573 C374.507,332.802 374.843,331.488 375.637,329.544 C375.683,329.43 375.731,329.314 375.796,329.158 C375.876,328.966 375.918,328.864 375.955,328.774 C376.281,327.984 376.476,327.475 376.656,326.912 C377.09,325.553 376.928,324.562 376.2,323.24 C376.07,323.004 375.924,322.76 375.717,322.424 C375.678,322.361 375.651,322.318 375.584,322.209 C375.516,322.1 375.516,322.1 375.447,321.99 C375.334,321.807 375.249,321.671 375.166,321.533 C372.95,317.942 372.874,314.831 373.744,310.893 C372.469,311.153 373.056,311.088 371.989,311.142 C370.868,311.085 371.509,311.153 370.077,310.861 C369.104,314.8 369.198,317.063 371.229,320.727 C371.309,320.858 371.391,320.991 371.501,321.169 C371.419,321.036 371.709,321.503 371.773,321.607 C371.993,321.963 372.15,322.227 372.295,322.49 C373.215,324.159 373.448,325.579 372.871,327.385 C372.675,327.999 372.467,328.542 372.126,329.368 C372.088,329.46 372.045,329.562 371.966,329.753 C371.902,329.908 371.855,330.021 371.81,330.132 C371.085,331.906 370.795,333.04 370.795,334.573 C370.795,335.003 370.447,335.351 370.018,335.351 C369.588,335.351 369.24,335.003 369.24,334.573 C369.24,332.802 369.576,331.488 370.37,329.544 C370.416,329.43 370.464,329.314 370.529,329.158 C370.609,328.966 370.651,328.864 370.688,328.774 C371.015,327.984 371.209,327.475 371.389,326.912 C371.823,325.553 371.661,324.562 370.933,323.24 C370.803,323.004 370.657,322.76 370.45,322.424 C370.411,322.361 370.384,322.318 370.317,322.209 C370.249,322.1 370.249,322.1 370.18,321.99 C370.067,321.807 369.983,321.671 369.899,321.533 C367.66,317.834 367.493,314.324 368.623,310.273 C366.346,308.946 365.141,306.763 365.01,304.163 C365.01,300.308 368.134,297.184 371.989,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1139.675,374.824 C1135.82,374.824 1132.696,371.7 1132.696,367.845 C1132.698,365.274 1134.061,363.253 1136.126,361.859 C1137.305,357.667 1137.352,355.22 1135.167,351.281 C1135.088,351.15 1135.006,351.017 1134.896,350.839 C1134.978,350.972 1134.688,350.505 1134.624,350.401 C1134.404,350.045 1134.247,349.781 1134.102,349.518 C1133.182,347.849 1132.949,346.429 1133.526,344.623 C1133.722,344.009 1133.93,343.466 1134.271,342.64 C1134.309,342.548 1134.352,342.446 1134.431,342.255 C1134.495,342.1 1134.542,341.987 1134.587,341.876 C1135.312,340.102 1135.601,338.968 1135.601,337.435 C1135.601,337.005 1135.949,336.657 1136.379,336.657 C1136.808,336.657 1137.157,337.005 1137.157,337.435 C1137.157,339.206 1136.821,340.52 1136.027,342.464 C1135.98,342.578 1135.932,342.694 1135.868,342.85 C1135.788,343.042 1135.746,343.144 1135.708,343.234 C1135.382,344.024 1135.187,344.533 1135.007,345.096 C1134.573,346.455 1134.736,347.446 1135.464,348.768 C1135.594,349.004 1135.739,349.248 1135.947,349.584 C1135.986,349.647 1136.013,349.69 1136.08,349.799 C1136.148,349.908 1136.148,349.908 1136.216,350.018 C1136.33,350.201 1136.414,350.337 1136.497,350.475 C1138.713,354.066 1138.789,357.177 1137.919,361.115 C1139.194,360.855 1138.607,360.92 1139.675,360.866 C1140.796,360.923 1140.155,360.855 1141.587,361.147 C1142.559,357.208 1142.466,354.945 1140.434,351.281 C1140.354,351.15 1140.273,351.017 1140.162,350.839 C1140.245,350.972 1139.954,350.505 1139.89,350.401 C1139.671,350.045 1139.514,349.781 1139.369,349.518 C1138.449,347.849 1138.216,346.429 1138.793,344.623 C1138.989,344.009 1139.197,343.466 1139.538,342.64 C1139.576,342.548 1139.618,342.446 1139.698,342.255 C1139.762,342.1 1139.808,341.987 1139.854,341.876 C1140.578,340.102 1140.868,338.968 1140.868,337.435 C1140.868,337.005 1141.216,336.657 1141.646,336.657 C1142.075,336.657 1142.423,337.005 1142.423,337.435 C1142.423,339.206 1142.088,340.52 1141.294,342.464 C1141.247,342.578 1141.199,342.694 1141.134,342.85 C1141.055,343.042 1141.013,343.144 1140.975,343.234 C1140.649,344.024 1140.454,344.533 1140.274,345.096 C1139.84,346.455 1140.003,347.446 1140.731,348.768 C1140.861,349.004 1141.006,349.248 1141.214,349.584 C1141.252,349.647 1141.279,349.69 1141.347,349.799 C1141.414,349.908 1141.414,349.908 1141.483,350.018 C1141.597,350.201 1141.681,350.337 1141.764,350.475 C1144.003,354.174 1144.17,357.684 1143.041,361.735 C1145.318,363.062 1146.522,365.245 1146.654,367.845 C1146.653,371.7 1143.529,374.824 1139.675,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1139.675,297.184 C1143.529,297.184 1146.654,300.308 1146.654,304.163 C1146.652,306.734 1145.289,308.755 1143.224,310.149 C1142.045,314.341 1141.998,316.788 1144.182,320.727 C1144.262,320.858 1144.343,320.991 1144.454,321.169 C1144.372,321.036 1144.662,321.503 1144.726,321.607 C1144.946,321.963 1145.103,322.227 1145.248,322.49 C1146.167,324.159 1146.4,325.579 1145.823,327.385 C1145.627,327.999 1145.42,328.542 1145.078,329.368 C1145.04,329.46 1144.998,329.562 1144.918,329.753 C1144.854,329.908 1144.808,330.021 1144.762,330.132 C1144.038,331.906 1143.748,333.04 1143.748,334.573 C1143.748,335.003 1143.4,335.351 1142.97,335.351 C1142.541,335.351 1142.193,335.003 1142.193,334.573 C1142.193,332.802 1142.529,331.488 1143.323,329.544 C1143.369,329.43 1143.417,329.314 1143.482,329.158 C1143.562,328.966 1143.604,328.864 1143.641,328.774 C1143.967,327.984 1144.162,327.475 1144.342,326.912 C1144.776,325.553 1144.614,324.562 1143.885,323.24 C1143.755,323.004 1143.61,322.76 1143.403,322.424 C1143.364,322.361 1143.337,322.318 1143.27,322.209 C1143.202,322.1 1143.202,322.1 1143.133,321.99 C1143.02,321.807 1142.935,321.671 1142.852,321.533 C1140.636,317.942 1140.56,314.831 1141.43,310.893 C1140.155,311.153 1140.742,311.088 1139.675,311.142 C1138.554,311.085 1139.194,311.153 1137.762,310.861 C1136.79,314.8 1136.884,317.063 1138.915,320.727 C1138.995,320.858 1139.076,320.991 1139.187,321.169 C1139.105,321.036 1139.395,321.503 1139.459,321.607 C1139.679,321.963 1139.836,322.227 1139.981,322.49 C1140.9,324.159 1141.134,325.579 1140.557,327.385 C1140.361,327.999 1140.153,328.542 1139.811,329.368 C1139.774,329.46 1139.731,329.562 1139.651,329.753 C1139.588,329.908 1139.541,330.021 1139.495,330.132 C1138.771,331.906 1138.481,333.04 1138.481,334.573 C1138.481,335.003 1138.133,335.351 1137.703,335.351 C1137.274,335.351 1136.926,335.003 1136.926,334.573 C1136.926,332.802 1137.262,331.488 1138.056,329.544 C1138.102,329.43 1138.15,329.314 1138.215,329.158 C1138.295,328.966 1138.337,328.864 1138.374,328.774 C1138.7,327.984 1138.895,327.475 1139.075,326.912 C1139.509,325.553 1139.347,324.562 1138.619,323.24 C1138.489,323.004 1138.343,322.76 1138.136,322.424 C1138.097,322.361 1138.07,322.318 1138.003,322.209 C1137.935,322.1 1137.935,322.1 1137.866,321.99 C1137.753,321.807 1137.668,321.671 1137.585,321.533 C1135.346,317.834 1135.179,314.324 1136.308,310.273 C1134.032,308.946 1132.827,306.763 1132.696,304.163 C1132.696,300.308 1135.82,297.184 1139.675,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1153.633,374.824 C1149.778,374.824 1146.654,371.7 1146.654,367.845 C1146.656,365.274 1148.018,363.253 1150.084,361.859 C1151.263,357.667 1151.31,355.22 1149.125,351.281 C1149.046,351.15 1148.964,351.017 1148.853,350.839 C1148.936,350.972 1148.645,350.505 1148.582,350.401 C1148.362,350.045 1148.205,349.781 1148.06,349.518 C1147.14,347.849 1146.907,346.429 1147.484,344.623 C1147.68,344.009 1147.888,343.466 1148.229,342.64 C1148.267,342.548 1148.309,342.446 1148.389,342.255 C1148.453,342.1 1148.5,341.987 1148.545,341.876 C1149.269,340.102 1149.559,338.968 1149.559,337.435 C1149.559,337.005 1149.907,336.657 1150.337,336.657 C1150.766,336.657 1151.115,337.005 1151.115,337.435 C1151.115,339.206 1150.779,340.52 1149.985,342.464 C1149.938,342.578 1149.891,342.694 1149.826,342.85 C1149.746,343.042 1149.704,343.144 1149.666,343.234 C1149.34,344.024 1149.145,344.533 1148.965,345.096 C1148.531,346.455 1148.694,347.446 1149.422,348.768 C1149.552,349.004 1149.697,349.248 1149.905,349.584 C1149.943,349.647 1149.97,349.69 1150.038,349.799 C1150.105,349.908 1150.105,349.908 1150.174,350.018 C1150.288,350.201 1150.372,350.337 1150.455,350.475 C1152.671,354.066 1152.747,357.177 1151.877,361.115 C1153.152,360.855 1152.565,360.92 1153.633,360.866 C1154.753,360.923 1154.113,360.855 1155.545,361.147 C1156.517,357.208 1156.424,354.945 1154.392,351.281 C1154.312,351.15 1154.231,351.017 1154.12,350.839 C1154.203,350.972 1153.912,350.505 1153.848,350.401 C1153.628,350.045 1153.471,349.781 1153.326,349.518 C1152.407,347.849 1152.174,346.429 1152.751,344.623 C1152.947,344.009 1153.154,343.466 1153.496,342.64 C1153.534,342.548 1153.576,342.446 1153.656,342.255 C1153.72,342.1 1153.766,341.987 1153.812,341.876 C1154.536,340.102 1154.826,338.968 1154.826,337.435 C1154.826,337.005 1155.174,336.657 1155.604,336.657 C1156.033,336.657 1156.381,337.005 1156.381,337.435 C1156.381,339.206 1156.046,340.52 1155.252,342.464 C1155.205,342.578 1155.157,342.694 1155.092,342.85 C1155.013,343.042 1154.971,343.144 1154.933,343.234 C1154.607,344.024 1154.412,344.533 1154.232,345.096 C1153.798,346.455 1153.961,347.446 1154.689,348.768 C1154.819,349.004 1154.964,349.248 1155.171,349.584 C1155.21,349.647 1155.237,349.69 1155.305,349.799 C1155.372,349.908 1155.372,349.908 1155.441,350.018 C1155.555,350.201 1155.639,350.337 1155.722,350.475 C1157.961,354.174 1158.128,357.684 1156.999,361.735 C1159.275,363.062 1160.48,365.245 1160.611,367.845 C1160.611,371.7 1157.487,374.824 1153.633,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1153.633,297.184 C1157.487,297.184 1160.612,300.308 1160.612,304.163 C1160.61,306.734 1159.247,308.755 1157.182,310.149 C1156.003,314.341 1155.956,316.788 1158.14,320.727 C1158.22,320.858 1158.301,320.991 1158.412,321.169 C1158.329,321.036 1158.62,321.503 1158.684,321.607 C1158.904,321.963 1159.061,322.227 1159.206,322.49 C1160.125,324.159 1160.358,325.579 1159.781,327.385 C1159.585,327.999 1159.378,328.542 1159.036,329.368 C1158.998,329.46 1158.956,329.562 1158.876,329.753 C1158.812,329.908 1158.766,330.021 1158.72,330.132 C1157.996,331.906 1157.706,333.04 1157.706,334.573 C1157.706,335.003 1157.358,335.351 1156.928,335.351 C1156.499,335.351 1156.151,335.003 1156.151,334.573 C1156.151,332.802 1156.486,331.488 1157.281,329.544 C1157.327,329.43 1157.375,329.314 1157.44,329.158 C1157.519,328.966 1157.562,328.864 1157.599,328.774 C1157.925,327.984 1158.12,327.475 1158.3,326.912 C1158.734,325.553 1158.571,324.562 1157.843,323.24 C1157.713,323.004 1157.568,322.76 1157.361,322.424 C1157.322,322.361 1157.295,322.318 1157.228,322.209 C1157.16,322.1 1157.16,322.1 1157.091,321.99 C1156.977,321.807 1156.893,321.671 1156.81,321.533 C1154.594,317.942 1154.518,314.831 1155.388,310.893 C1154.113,311.153 1154.7,311.088 1153.633,311.142 C1152.512,311.085 1153.152,311.153 1151.72,310.861 C1150.748,314.8 1150.842,317.063 1152.873,320.727 C1152.953,320.858 1153.034,320.991 1153.145,321.169 C1153.063,321.036 1153.353,321.503 1153.417,321.607 C1153.637,321.963 1153.794,322.227 1153.939,322.49 C1154.858,324.159 1155.091,325.579 1154.514,327.385 C1154.318,327.999 1154.111,328.542 1153.769,329.368 C1153.731,329.46 1153.689,329.562 1153.609,329.753 C1153.546,329.908 1153.499,330.021 1153.453,330.132 C1152.729,331.906 1152.439,333.04 1152.439,334.573 C1152.439,335.003 1152.091,335.351 1151.661,335.351 C1151.232,335.351 1150.884,335.003 1150.884,334.573 C1150.884,332.802 1151.22,331.488 1152.014,329.544 C1152.06,329.43 1152.108,329.314 1152.173,329.158 C1152.253,328.966 1152.295,328.864 1152.332,328.774 C1152.658,327.984 1152.853,327.475 1153.033,326.912 C1153.467,325.553 1153.305,324.562 1152.576,323.24 C1152.446,323.004 1152.301,322.76 1152.094,322.424 C1152.055,322.361 1152.028,322.318 1151.961,322.209 C1151.893,322.1 1151.893,322.1 1151.824,321.99 C1151.711,321.807 1151.626,321.671 1151.543,321.533 C1149.304,317.834 1149.137,314.324 1150.266,310.273 C1147.99,308.946 1146.785,306.763 1146.654,304.163 C1146.654,300.308 1149.778,297.184 1153.633,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1167.59,374.824 C1163.736,374.824 1160.612,371.7 1160.612,367.845 C1160.613,365.274 1161.976,363.253 1164.042,361.859 C1165.22,357.667 1165.267,355.22 1163.083,351.281 C1163.004,351.15 1162.922,351.017 1162.811,350.839 C1162.894,350.972 1162.603,350.505 1162.539,350.401 C1162.32,350.045 1162.162,349.781 1162.018,349.518 C1161.098,347.849 1160.865,346.429 1161.442,344.623 C1161.638,344.009 1161.845,343.466 1162.187,342.64 C1162.225,342.548 1162.267,342.446 1162.347,342.255 C1162.411,342.1 1162.458,341.987 1162.503,341.876 C1163.227,340.102 1163.517,338.968 1163.517,337.435 C1163.517,337.005 1163.865,336.657 1164.295,336.657 C1164.724,336.657 1165.072,337.005 1165.073,337.435 C1165.072,339.206 1164.737,340.52 1163.943,342.464 C1163.896,342.578 1163.848,342.694 1163.784,342.85 C1163.704,343.042 1163.662,343.144 1163.624,343.234 C1163.298,344.024 1163.103,344.533 1162.923,345.096 C1162.489,346.455 1162.652,347.446 1163.38,348.768 C1163.51,349.004 1163.655,349.248 1163.863,349.584 C1163.901,349.647 1163.928,349.69 1163.996,349.799 C1164.063,349.908 1164.063,349.908 1164.132,350.018 C1164.246,350.201 1164.33,350.337 1164.413,350.475 C1166.629,354.066 1166.705,357.177 1165.835,361.115 C1167.11,360.855 1166.523,360.92 1167.59,360.866 C1168.711,360.923 1168.071,360.855 1169.503,361.147 C1170.475,357.208 1170.381,354.945 1168.35,351.281 C1168.27,351.15 1168.189,351.017 1168.078,350.839 C1168.161,350.972 1167.87,350.505 1167.806,350.401 C1167.586,350.045 1167.429,349.781 1167.284,349.518 C1166.365,347.849 1166.132,346.429 1166.709,344.623 C1166.905,344.009 1167.112,343.466 1167.454,342.64 C1167.492,342.548 1167.534,342.446 1167.614,342.255 C1167.678,342.1 1167.724,341.987 1167.77,341.876 C1168.494,340.102 1168.784,338.968 1168.784,337.435 C1168.784,337.005 1169.132,336.657 1169.562,336.657 C1169.991,336.657 1170.339,337.005 1170.339,337.435 C1170.339,339.206 1170.004,340.52 1169.209,342.464 C1169.163,342.578 1169.115,342.694 1169.05,342.85 C1168.971,343.042 1168.928,343.144 1168.891,343.234 C1168.565,344.024 1168.37,344.533 1168.19,345.096 C1167.756,346.455 1167.919,347.446 1168.647,348.768 C1168.777,349.004 1168.922,349.248 1169.129,349.584 C1169.168,349.647 1169.195,349.69 1169.262,349.799 C1169.33,349.908 1169.33,349.908 1169.399,350.018 C1169.512,350.201 1169.597,350.337 1169.68,350.475 C1171.919,354.174 1172.086,357.684 1170.957,361.735 C1173.233,363.062 1174.438,365.245 1174.569,367.845 C1174.569,371.7 1171.445,374.824 1167.59,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1167.591,297.184 C1171.445,297.184 1174.569,300.308 1174.569,304.163 C1174.568,306.734 1173.205,308.755 1171.14,310.149 C1169.961,314.341 1169.914,316.788 1172.098,320.727 C1172.177,320.858 1172.259,320.991 1172.37,321.169 C1172.287,321.036 1172.578,321.503 1172.642,321.607 C1172.862,321.963 1173.019,322.227 1173.164,322.49 C1174.083,324.159 1174.316,325.579 1173.739,327.385 C1173.543,327.999 1173.336,328.542 1172.994,329.368 C1172.956,329.46 1172.914,329.562 1172.834,329.753 C1172.77,329.908 1172.724,330.021 1172.678,330.132 C1171.954,331.906 1171.664,333.04 1171.664,334.573 C1171.664,335.003 1171.316,335.351 1170.886,335.351 C1170.457,335.351 1170.109,335.003 1170.109,334.573 C1170.109,332.802 1170.444,331.488 1171.238,329.544 C1171.285,329.43 1171.333,329.314 1171.398,329.158 C1171.477,328.966 1171.519,328.864 1171.557,328.774 C1171.883,327.984 1172.078,327.475 1172.258,326.912 C1172.692,325.553 1172.529,324.562 1171.801,323.24 C1171.671,323.004 1171.526,322.76 1171.318,322.424 C1171.28,322.361 1171.253,322.318 1171.185,322.209 C1171.118,322.1 1171.118,322.1 1171.049,321.99 C1170.935,321.807 1170.851,321.671 1170.768,321.533 C1168.552,317.942 1168.476,314.831 1169.346,310.893 C1168.071,311.153 1168.658,311.088 1167.591,311.142 C1166.47,311.085 1167.11,311.153 1165.678,310.861 C1164.706,314.8 1164.8,317.063 1166.831,320.727 C1166.911,320.858 1166.992,320.991 1167.103,321.169 C1167.021,321.036 1167.311,321.503 1167.375,321.607 C1167.595,321.963 1167.752,322.227 1167.897,322.49 C1168.816,324.159 1169.049,325.579 1168.472,327.385 C1168.276,327.999 1168.069,328.542 1167.727,329.368 C1167.689,329.46 1167.647,329.562 1167.567,329.753 C1167.503,329.908 1167.457,330.021 1167.411,330.132 C1166.687,331.906 1166.397,333.04 1166.397,334.573 C1166.397,335.003 1166.049,335.351 1165.619,335.351 C1165.19,335.351 1164.842,335.003 1164.842,334.573 C1164.842,332.802 1165.177,331.488 1165.971,329.544 C1166.018,329.43 1166.066,329.314 1166.131,329.158 C1166.21,328.966 1166.253,328.864 1166.29,328.774 C1166.616,327.984 1166.811,327.475 1166.991,326.912 C1167.425,325.553 1167.262,324.562 1166.534,323.24 C1166.404,323.004 1166.259,322.76 1166.052,322.424 C1166.013,322.361 1165.986,322.318 1165.918,322.209 C1165.851,322.1 1165.851,322.1 1165.782,321.99 C1165.668,321.807 1165.584,321.671 1165.501,321.533 C1163.262,317.834 1163.095,314.324 1164.224,310.273 C1161.948,308.946 1160.743,306.763 1160.612,304.163 C1160.612,300.308 1163.736,297.184 1167.591,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1181.548,374.824 C1177.694,374.824 1174.57,371.7 1174.57,367.845 C1174.571,365.274 1175.934,363.253 1178,361.859 C1179.178,357.667 1179.225,355.22 1177.041,351.281 C1176.961,351.15 1176.88,351.017 1176.769,350.839 C1176.852,350.972 1176.561,350.505 1176.497,350.401 C1176.277,350.045 1176.12,349.781 1175.975,349.518 C1175.056,347.849 1174.823,346.429 1175.4,344.623 C1175.596,344.009 1175.803,343.466 1176.145,342.64 C1176.183,342.548 1176.225,342.446 1176.305,342.255 C1176.369,342.1 1176.415,341.987 1176.461,341.876 C1177.185,340.102 1177.475,338.968 1177.475,337.435 C1177.475,337.005 1177.823,336.657 1178.253,336.657 C1178.682,336.657 1179.03,337.005 1179.03,337.435 C1179.03,339.206 1178.695,340.52 1177.901,342.464 C1177.854,342.578 1177.806,342.694 1177.741,342.85 C1177.662,343.042 1177.62,343.144 1177.582,343.234 C1177.256,344.024 1177.061,344.533 1176.881,345.096 C1176.447,346.455 1176.61,347.446 1177.338,348.768 C1177.468,349.004 1177.613,349.248 1177.821,349.584 C1177.859,349.647 1177.886,349.69 1177.954,349.799 C1178.021,349.908 1178.021,349.908 1178.09,350.018 C1178.204,350.201 1178.288,350.337 1178.371,350.475 C1180.587,354.066 1180.663,357.177 1179.793,361.115 C1181.068,360.855 1180.481,360.92 1181.548,360.866 C1182.669,360.923 1182.029,360.855 1183.461,361.147 C1184.433,357.208 1184.339,354.945 1182.308,351.281 C1182.228,351.15 1182.147,351.017 1182.036,350.839 C1182.118,350.972 1181.828,350.505 1181.764,350.401 C1181.544,350.045 1181.387,349.781 1181.242,349.518 C1180.323,347.849 1180.09,346.429 1180.667,344.623 C1180.863,344.009 1181.07,343.466 1181.412,342.64 C1181.45,342.548 1181.492,342.446 1181.572,342.255 C1181.635,342.1 1181.682,341.987 1181.728,341.876 C1182.452,340.102 1182.742,338.968 1182.742,337.435 C1182.742,337.005 1183.09,336.657 1183.52,336.657 C1183.949,336.657 1184.297,337.005 1184.297,337.435 C1184.297,339.206 1183.961,340.52 1183.167,342.464 C1183.121,342.578 1183.073,342.694 1183.008,342.85 C1182.928,343.042 1182.886,343.144 1182.849,343.234 C1182.523,344.024 1182.328,344.533 1182.148,345.096 C1181.714,346.455 1181.876,347.446 1182.605,348.768 C1182.735,349.004 1182.88,349.248 1183.087,349.584 C1183.126,349.647 1183.153,349.69 1183.22,349.799 C1183.288,349.908 1183.288,349.908 1183.357,350.018 C1183.47,350.201 1183.555,350.337 1183.638,350.475 C1185.877,354.174 1186.044,357.684 1184.915,361.735 C1187.191,363.062 1188.396,365.245 1188.527,367.845 C1188.527,371.7 1185.403,374.824 1181.548,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1181.548,297.184 C1185.403,297.184 1188.527,300.308 1188.527,304.163 C1188.526,306.734 1187.163,308.755 1185.097,310.149 C1183.919,314.341 1183.871,316.788 1186.056,320.727 C1186.135,320.858 1186.217,320.991 1186.328,321.169 C1186.245,321.036 1186.536,321.503 1186.6,321.607 C1186.819,321.963 1186.976,322.227 1187.121,322.49 C1188.041,324.159 1188.274,325.579 1187.697,327.385 C1187.501,327.999 1187.293,328.542 1186.952,329.368 C1186.914,329.46 1186.872,329.562 1186.792,329.753 C1186.728,329.908 1186.682,330.021 1186.636,330.132 C1185.912,331.906 1185.622,333.04 1185.622,334.573 C1185.622,335.003 1185.274,335.351 1184.844,335.351 C1184.415,335.351 1184.067,335.003 1184.067,334.573 C1184.067,332.802 1184.402,331.488 1185.196,329.544 C1185.243,329.43 1185.291,329.314 1185.355,329.158 C1185.435,328.966 1185.477,328.864 1185.515,328.774 C1185.841,327.984 1186.036,327.475 1186.216,326.912 C1186.65,325.553 1186.487,324.562 1185.759,323.24 C1185.629,323.004 1185.484,322.76 1185.276,322.424 C1185.238,322.361 1185.211,322.318 1185.143,322.209 C1185.076,322.1 1185.076,322.1 1185.007,321.99 C1184.893,321.807 1184.809,321.671 1184.726,321.533 C1182.51,317.942 1182.434,314.831 1183.304,310.893 C1182.029,311.153 1182.616,311.088 1181.548,311.142 C1180.428,311.085 1181.068,311.153 1179.636,310.861 C1178.664,314.8 1178.757,317.063 1180.789,320.727 C1180.869,320.858 1180.95,320.991 1181.061,321.169 C1180.979,321.036 1181.269,321.503 1181.333,321.607 C1181.553,321.963 1181.71,322.227 1181.854,322.49 C1182.774,324.159 1183.007,325.579 1182.43,327.385 C1182.234,327.999 1182.027,328.542 1181.685,329.368 C1181.647,329.46 1181.605,329.562 1181.525,329.753 C1181.461,329.908 1181.415,330.021 1181.369,330.132 C1180.645,331.906 1180.355,333.04 1180.355,334.573 C1180.355,335.003 1180.007,335.351 1179.577,335.351 C1179.148,335.351 1178.8,335.003 1178.8,334.573 C1178.8,332.802 1179.135,331.488 1179.929,329.544 C1179.976,329.43 1180.024,329.314 1180.089,329.158 C1180.168,328.966 1180.21,328.864 1180.248,328.774 C1180.574,327.984 1180.769,327.475 1180.949,326.912 C1181.383,325.553 1181.22,324.562 1180.492,323.24 C1180.362,323.004 1180.217,322.76 1180.01,322.424 C1179.971,322.361 1179.944,322.318 1179.876,322.209 C1179.809,322.1 1179.809,322.1 1179.74,321.99 C1179.626,321.807 1179.542,321.671 1179.459,321.533 C1177.22,317.834 1177.053,314.324 1178.182,310.273 C1175.906,308.946 1174.701,306.763 1174.569,304.163 C1174.569,300.308 1177.694,297.184 1181.548,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1195.506,374.824 C1191.652,374.824 1188.527,371.7 1188.527,367.845 C1188.529,365.274 1189.892,363.253 1191.957,361.859 C1193.136,357.667 1193.183,355.22 1190.999,351.281 C1190.919,351.15 1190.838,351.017 1190.727,350.839 C1190.809,350.972 1190.519,350.505 1190.455,350.401 C1190.235,350.045 1190.078,349.781 1189.933,349.518 C1189.014,347.849 1188.781,346.429 1189.358,344.623 C1189.554,344.009 1189.761,343.466 1190.103,342.64 C1190.141,342.548 1190.183,342.446 1190.263,342.255 C1190.327,342.1 1190.373,341.987 1190.419,341.876 C1191.143,340.102 1191.433,338.968 1191.433,337.435 C1191.433,337.005 1191.781,336.657 1192.211,336.657 C1192.64,336.657 1192.988,337.005 1192.988,337.435 C1192.988,339.206 1192.652,340.52 1191.859,342.464 C1191.812,342.578 1191.764,342.694 1191.699,342.85 C1191.62,343.042 1191.578,343.144 1191.54,343.234 C1191.214,344.024 1191.019,344.533 1190.839,345.096 C1190.405,346.455 1190.568,347.446 1191.296,348.768 C1191.426,349.004 1191.571,349.248 1191.778,349.584 C1191.817,349.647 1191.844,349.69 1191.911,349.799 C1191.979,349.908 1191.979,349.908 1192.048,350.018 C1192.161,350.201 1192.246,350.337 1192.329,350.475 C1194.545,354.066 1194.621,357.177 1193.751,361.115 C1195.026,360.855 1194.439,360.92 1195.506,360.866 C1196.627,360.923 1195.987,360.855 1197.419,361.147 C1198.391,357.208 1198.297,354.945 1196.266,351.281 C1196.186,351.15 1196.105,351.017 1195.994,350.839 C1196.076,350.972 1195.786,350.505 1195.722,350.401 C1195.502,350.045 1195.345,349.781 1195.2,349.518 C1194.281,347.849 1194.047,346.429 1194.625,344.623 C1194.82,344.009 1195.028,343.466 1195.37,342.64 C1195.407,342.548 1195.45,342.446 1195.529,342.255 C1195.593,342.1 1195.64,341.987 1195.686,341.876 C1196.41,340.102 1196.7,338.968 1196.7,337.435 C1196.7,337.005 1197.048,336.657 1197.478,336.657 C1197.907,336.657 1198.255,337.005 1198.255,337.435 C1198.255,339.206 1197.919,340.52 1197.125,342.464 C1197.079,342.578 1197.031,342.694 1196.966,342.85 C1196.886,343.042 1196.844,343.144 1196.807,343.234 C1196.481,344.024 1196.286,344.533 1196.106,345.096 C1195.672,346.455 1195.834,347.446 1196.562,348.768 C1196.693,349.004 1196.838,349.248 1197.045,349.584 C1197.084,349.647 1197.111,349.69 1197.178,349.799 C1197.246,349.908 1197.246,349.908 1197.315,350.018 C1197.428,350.201 1197.513,350.337 1197.596,350.475 C1199.835,354.174 1200.002,357.684 1198.873,361.735 C1201.149,363.062 1202.354,365.245 1202.485,367.845 C1202.485,371.7 1199.361,374.824 1195.506,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1195.506,297.184 C1199.361,297.184 1202.485,300.308 1202.485,304.163 C1202.484,306.734 1201.12,308.755 1199.055,310.149 C1197.876,314.341 1197.829,316.788 1200.014,320.727 C1200.093,320.858 1200.175,320.991 1200.286,321.169 C1200.203,321.036 1200.494,321.503 1200.557,321.607 C1200.777,321.963 1200.934,322.227 1201.079,322.49 C1201.999,324.159 1202.232,325.579 1201.655,327.385 C1201.459,327.999 1201.251,328.542 1200.91,329.368 C1200.872,329.46 1200.83,329.562 1200.75,329.753 C1200.686,329.908 1200.639,330.021 1200.594,330.132 C1199.87,331.906 1199.58,333.04 1199.58,334.573 C1199.58,335.003 1199.232,335.351 1198.802,335.351 C1198.373,335.351 1198.024,335.003 1198.024,334.573 C1198.024,332.802 1198.36,331.488 1199.154,329.544 C1199.201,329.43 1199.249,329.314 1199.313,329.158 C1199.393,328.966 1199.435,328.864 1199.473,328.774 C1199.799,327.984 1199.994,327.475 1200.174,326.912 C1200.608,325.553 1200.445,324.562 1199.717,323.24 C1199.587,323.004 1199.442,322.76 1199.234,322.424 C1199.195,322.361 1199.168,322.318 1199.101,322.209 C1199.033,322.1 1199.033,322.1 1198.965,321.99 C1198.851,321.807 1198.767,321.671 1198.684,321.533 C1196.468,317.942 1196.392,314.831 1197.262,310.893 C1195.987,311.153 1196.574,311.088 1195.506,311.142 C1194.385,311.085 1195.026,311.153 1193.594,310.861 C1192.622,314.8 1192.715,317.063 1194.747,320.727 C1194.827,320.858 1194.908,320.991 1195.019,321.169 C1194.936,321.036 1195.227,321.503 1195.291,321.607 C1195.51,321.963 1195.667,322.227 1195.812,322.49 C1196.732,324.159 1196.965,325.579 1196.388,327.385 C1196.192,327.999 1195.984,328.542 1195.643,329.368 C1195.605,329.46 1195.563,329.562 1195.483,329.753 C1195.419,329.908 1195.372,330.021 1195.327,330.132 C1194.603,331.906 1194.313,333.04 1194.313,334.573 C1194.313,335.003 1193.965,335.351 1193.535,335.351 C1193.106,335.351 1192.758,335.003 1192.758,334.573 C1192.758,332.802 1193.093,331.488 1193.887,329.544 C1193.934,329.43 1193.982,329.314 1194.047,329.158 C1194.126,328.966 1194.168,328.864 1194.206,328.774 C1194.532,327.984 1194.727,327.475 1194.907,326.912 C1195.341,325.553 1195.178,324.562 1194.45,323.24 C1194.32,323.004 1194.175,322.76 1193.967,322.424 C1193.929,322.361 1193.902,322.318 1193.834,322.209 C1193.767,322.1 1193.767,322.1 1193.698,321.99 C1193.584,321.807 1193.5,321.671 1193.417,321.533 C1191.177,317.834 1191.01,314.324 1192.14,310.273 C1189.863,308.946 1188.659,306.763 1188.527,304.163 C1188.527,300.308 1191.652,297.184 1195.506,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1209.464,374.824 C1205.61,374.824 1202.485,371.7 1202.485,367.845 C1202.487,365.274 1203.85,363.253 1205.915,361.859 C1207.094,357.667 1207.141,355.22 1204.957,351.281 C1204.877,351.15 1204.796,351.017 1204.685,350.839 C1204.767,350.972 1204.477,350.505 1204.413,350.401 C1204.193,350.045 1204.036,349.781 1203.891,349.518 C1202.972,347.849 1202.739,346.429 1203.316,344.623 C1203.511,344.009 1203.719,343.466 1204.061,342.64 C1204.099,342.548 1204.141,342.446 1204.221,342.255 C1204.285,342.1 1204.331,341.987 1204.377,341.876 C1205.101,340.102 1205.391,338.968 1205.391,337.435 C1205.391,337.005 1205.739,336.657 1206.169,336.657 C1206.598,336.657 1206.946,337.005 1206.946,337.435 C1206.946,339.206 1206.61,340.52 1205.816,342.464 C1205.77,342.578 1205.722,342.694 1205.657,342.85 C1205.578,343.042 1205.535,343.144 1205.498,343.234 C1205.172,344.024 1204.977,344.533 1204.797,345.096 C1204.363,346.455 1204.525,347.446 1205.254,348.768 C1205.384,349.004 1205.529,349.248 1205.736,349.584 C1205.775,349.647 1205.802,349.69 1205.869,349.799 C1205.937,349.908 1205.937,349.908 1206.006,350.018 C1206.119,350.201 1206.204,350.337 1206.287,350.475 C1208.503,354.066 1208.579,357.177 1207.709,361.115 C1208.984,360.855 1208.397,360.92 1209.464,360.866 C1210.585,360.923 1209.944,360.855 1211.377,361.147 C1212.349,357.208 1212.255,354.945 1210.224,351.281 C1210.144,351.15 1210.062,351.017 1209.952,350.839 C1210.034,350.972 1209.744,350.505 1209.68,350.401 C1209.46,350.045 1209.303,349.781 1209.158,349.518 C1208.239,347.849 1208.005,346.429 1208.582,344.623 C1208.778,344.009 1208.986,343.466 1209.328,342.64 C1209.365,342.548 1209.408,342.446 1209.487,342.255 C1209.551,342.1 1209.598,341.987 1209.643,341.876 C1210.368,340.102 1210.658,338.968 1210.658,337.435 C1210.658,337.005 1211.006,336.657 1211.435,336.657 C1211.865,336.657 1212.213,337.005 1212.213,337.435 C1212.213,339.206 1211.877,340.52 1211.083,342.464 C1211.037,342.578 1210.989,342.694 1210.924,342.85 C1210.844,343.042 1210.802,343.144 1210.765,343.234 C1210.438,344.024 1210.244,344.533 1210.064,345.096 C1209.63,346.455 1209.792,347.446 1210.52,348.768 C1210.65,349.004 1210.796,349.248 1211.003,349.584 C1211.042,349.647 1211.069,349.69 1211.136,349.799 C1211.204,349.908 1211.204,349.908 1211.273,350.018 C1211.386,350.201 1211.47,350.337 1211.554,350.475 C1213.793,354.174 1213.96,357.684 1212.83,361.735 C1215.107,363.062 1216.312,365.245 1216.443,367.845 C1216.443,371.7 1213.319,374.824 1209.464,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1209.464,297.184 C1213.319,297.184 1216.443,300.308 1216.443,304.163 C1216.441,306.734 1215.078,308.755 1213.013,310.149 C1211.834,314.341 1211.787,316.788 1213.971,320.727 C1214.051,320.858 1214.133,320.991 1214.244,321.169 C1214.161,321.036 1214.452,321.503 1214.515,321.607 C1214.735,321.963 1214.892,322.227 1215.037,322.49 C1215.957,324.159 1216.19,325.579 1215.613,327.385 C1215.417,327.999 1215.209,328.542 1214.868,329.368 C1214.83,329.46 1214.787,329.562 1214.708,329.753 C1214.644,329.908 1214.597,330.021 1214.552,330.132 C1213.827,331.906 1213.538,333.04 1213.538,334.573 C1213.538,335.003 1213.189,335.351 1212.76,335.351 C1212.331,335.351 1211.982,335.003 1211.982,334.573 C1211.982,332.802 1212.318,331.488 1213.112,329.544 C1213.159,329.43 1213.206,329.314 1213.271,329.158 C1213.351,328.966 1213.393,328.864 1213.431,328.774 C1213.757,327.984 1213.952,327.475 1214.132,326.912 C1214.566,325.553 1214.403,324.562 1213.675,323.24 C1213.545,323.004 1213.4,322.76 1213.192,322.424 C1213.153,322.361 1213.126,322.318 1213.059,322.209 C1212.991,322.1 1212.991,322.1 1212.922,321.99 C1212.809,321.807 1212.725,321.671 1212.642,321.533 C1210.426,317.942 1210.35,314.831 1211.219,310.893 C1209.944,311.153 1210.532,311.088 1209.464,311.142 C1208.343,311.085 1208.984,311.153 1207.552,310.861 C1206.58,314.8 1206.673,317.063 1208.705,320.727 C1208.784,320.858 1208.866,320.991 1208.977,321.169 C1208.894,321.036 1209.185,321.503 1209.249,321.607 C1209.468,321.963 1209.625,322.227 1209.77,322.49 C1210.69,324.159 1210.923,325.579 1210.346,327.385 C1210.15,327.999 1209.943,328.542 1209.601,329.368 C1209.563,329.46 1209.521,329.562 1209.441,329.753 C1209.377,329.908 1209.33,330.021 1209.285,330.132 C1208.561,331.906 1208.271,333.04 1208.271,334.573 C1208.271,335.003 1207.923,335.351 1207.493,335.351 C1207.064,335.351 1206.715,335.003 1206.715,334.573 C1206.715,332.802 1207.051,331.488 1207.845,329.544 C1207.892,329.43 1207.94,329.314 1208.004,329.158 C1208.084,328.966 1208.126,328.864 1208.164,328.774 C1208.49,327.984 1208.685,327.475 1208.865,326.912 C1209.299,325.553 1209.136,324.562 1208.408,323.24 C1208.278,323.004 1208.133,322.76 1207.925,322.424 C1207.886,322.361 1207.859,322.318 1207.792,322.209 C1207.724,322.1 1207.724,322.1 1207.656,321.99 C1207.542,321.807 1207.458,321.671 1207.375,321.533 C1205.135,317.834 1204.968,314.324 1206.098,310.273 C1203.821,308.946 1202.617,306.763 1202.485,304.163 C1202.485,300.308 1205.61,297.184 1209.464,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1223.422,374.824 C1219.568,374.824 1216.443,371.7 1216.443,367.845 C1216.445,365.274 1217.808,363.253 1219.873,361.859 C1221.052,357.667 1221.099,355.22 1218.915,351.281 C1218.835,351.15 1218.754,351.017 1218.643,350.839 C1218.725,350.972 1218.435,350.505 1218.371,350.401 C1218.151,350.045 1217.994,349.781 1217.849,349.518 C1216.93,347.849 1216.697,346.429 1217.273,344.623 C1217.469,344.009 1217.677,343.466 1218.019,342.64 C1218.057,342.548 1218.099,342.446 1218.179,342.255 C1218.242,342.1 1218.289,341.987 1218.335,341.876 C1219.059,340.102 1219.349,338.968 1219.349,337.435 C1219.349,337.005 1219.697,336.657 1220.127,336.657 C1220.556,336.657 1220.904,337.005 1220.904,337.435 C1220.904,339.206 1220.568,340.52 1219.774,342.464 C1219.728,342.578 1219.68,342.694 1219.615,342.85 C1219.535,343.042 1219.493,343.144 1219.456,343.234 C1219.13,344.024 1218.935,344.533 1218.755,345.096 C1218.321,346.455 1218.483,347.446 1219.211,348.768 C1219.342,349.004 1219.487,349.248 1219.694,349.584 C1219.733,349.647 1219.76,349.69 1219.827,349.799 C1219.895,349.908 1219.895,349.908 1219.964,350.018 C1220.077,350.201 1220.162,350.337 1220.245,350.475 C1222.461,354.066 1222.537,357.177 1221.667,361.115 C1222.942,360.855 1222.355,360.92 1223.422,360.866 C1224.543,360.923 1223.902,360.855 1225.334,361.147 C1226.307,357.208 1226.213,354.945 1224.182,351.281 C1224.102,351.15 1224.021,351.017 1223.91,350.839 C1223.992,350.972 1223.702,350.505 1223.638,350.401 C1223.418,350.045 1223.261,349.781 1223.116,349.518 C1222.196,347.849 1221.963,346.429 1222.54,344.623 C1222.736,344.009 1222.944,343.466 1223.286,342.64 C1223.323,342.548 1223.366,342.446 1223.445,342.255 C1223.509,342.1 1223.556,341.987 1223.601,341.876 C1224.326,340.102 1224.616,338.968 1224.616,337.435 C1224.616,337.005 1224.964,336.657 1225.393,336.657 C1225.823,336.657 1226.171,337.005 1226.171,337.435 C1226.171,339.206 1225.835,340.52 1225.041,342.464 C1224.995,342.578 1224.947,342.694 1224.882,342.85 C1224.802,343.042 1224.76,343.144 1224.723,343.234 C1224.396,344.024 1224.202,344.533 1224.022,345.096 C1223.588,346.455 1223.75,347.446 1224.478,348.768 C1224.608,349.004 1224.754,349.248 1224.961,349.584 C1225,349.647 1225.027,349.69 1225.094,349.799 C1225.162,349.908 1225.162,349.908 1225.231,350.018 C1225.344,350.201 1225.428,350.337 1225.512,350.475 C1227.751,354.174 1227.918,357.684 1226.788,361.735 C1229.065,363.062 1230.27,365.245 1230.401,367.845 C1230.401,371.7 1227.276,374.824 1223.422,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1223.422,297.184 C1227.277,297.184 1230.401,300.308 1230.401,304.163 C1230.399,306.734 1229.036,308.755 1226.971,310.149 C1225.792,314.341 1225.745,316.788 1227.929,320.727 C1228.009,320.858 1228.091,320.991 1228.201,321.169 C1228.119,321.036 1228.409,321.503 1228.473,321.607 C1228.693,321.963 1228.85,322.227 1228.995,322.49 C1229.915,324.159 1230.148,325.579 1229.571,327.385 C1229.375,327.999 1229.167,328.542 1228.826,329.368 C1228.788,329.46 1228.745,329.562 1228.666,329.753 C1228.602,329.908 1228.555,330.021 1228.51,330.132 C1227.785,331.906 1227.495,333.04 1227.495,334.573 C1227.495,335.003 1227.147,335.351 1226.718,335.351 C1226.288,335.351 1225.94,335.003 1225.94,334.573 C1225.94,332.802 1226.276,331.488 1227.07,329.544 C1227.117,329.43 1227.164,329.314 1227.229,329.158 C1227.309,328.966 1227.351,328.864 1227.388,328.774 C1227.715,327.984 1227.91,327.475 1228.089,326.912 C1228.524,325.553 1228.361,324.562 1227.633,323.24 C1227.503,323.004 1227.358,322.76 1227.15,322.424 C1227.111,322.361 1227.084,322.318 1227.017,322.209 C1226.949,322.1 1226.949,322.1 1226.88,321.99 C1226.767,321.807 1226.683,321.671 1226.6,321.533 C1224.383,317.942 1224.307,314.831 1225.177,310.893 C1223.902,311.153 1224.49,311.088 1223.422,311.142 C1222.301,311.085 1222.942,311.153 1221.51,310.861 C1220.538,314.8 1220.631,317.063 1222.662,320.727 C1222.742,320.858 1222.824,320.991 1222.935,321.169 C1222.852,321.036 1223.143,321.503 1223.206,321.607 C1223.426,321.963 1223.583,322.227 1223.728,322.49 C1224.648,324.159 1224.881,325.579 1224.304,327.385 C1224.108,327.999 1223.9,328.542 1223.559,329.368 C1223.521,329.46 1223.479,329.562 1223.399,329.753 C1223.335,329.908 1223.288,330.021 1223.243,330.132 C1222.518,331.906 1222.229,333.04 1222.229,334.573 C1222.229,335.003 1221.88,335.351 1221.451,335.351 C1221.022,335.351 1220.673,335.003 1220.673,334.573 C1220.673,332.802 1221.009,331.488 1221.803,329.544 C1221.85,329.43 1221.897,329.314 1221.962,329.158 C1222.042,328.966 1222.084,328.864 1222.122,328.774 C1222.448,327.984 1222.643,327.475 1222.823,326.912 C1223.257,325.553 1223.094,324.562 1222.366,323.24 C1222.236,323.004 1222.091,322.76 1221.883,322.424 C1221.844,322.361 1221.817,322.318 1221.75,322.209 C1221.682,322.1 1221.682,322.1 1221.614,321.99 C1221.5,321.807 1221.416,321.671 1221.333,321.533 C1219.093,317.834 1218.926,314.324 1220.056,310.273 C1217.779,308.946 1216.575,306.763 1216.443,304.163 C1216.443,300.308 1219.568,297.184 1223.422,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1237.38,374.824 C1233.526,374.824 1230.401,371.7 1230.401,367.845 C1230.403,365.274 1231.766,363.253 1233.831,361.859 C1235.01,357.667 1235.057,355.22 1232.873,351.281 C1232.793,351.15 1232.712,351.017 1232.601,350.839 C1232.683,350.972 1232.393,350.505 1232.329,350.401 C1232.109,350.045 1231.952,349.781 1231.807,349.518 C1230.888,347.849 1230.654,346.429 1231.231,344.623 C1231.427,344.009 1231.635,343.466 1231.977,342.64 C1232.014,342.548 1232.057,342.446 1232.136,342.255 C1232.2,342.1 1232.247,341.987 1232.292,341.876 C1233.017,340.102 1233.307,338.968 1233.307,337.435 C1233.307,337.005 1233.655,336.657 1234.084,336.657 C1234.514,336.657 1234.862,337.005 1234.862,337.435 C1234.862,339.206 1234.526,340.52 1233.732,342.464 C1233.686,342.578 1233.638,342.694 1233.573,342.85 C1233.493,343.042 1233.451,343.144 1233.414,343.234 C1233.088,344.024 1232.893,344.533 1232.713,345.096 C1232.279,346.455 1232.441,347.446 1233.169,348.768 C1233.299,349.004 1233.445,349.248 1233.652,349.584 C1233.691,349.647 1233.718,349.69 1233.785,349.799 C1233.853,349.908 1233.853,349.908 1233.922,350.018 C1234.035,350.201 1234.12,350.337 1234.203,350.475 C1236.419,354.066 1236.495,357.177 1235.625,361.115 C1236.9,360.855 1236.313,360.92 1237.38,360.866 C1238.501,360.923 1237.86,360.855 1239.292,361.147 C1240.265,357.208 1240.171,354.945 1238.14,351.281 C1238.06,351.15 1237.978,351.017 1237.868,350.839 C1237.95,350.972 1237.66,350.505 1237.596,350.401 C1237.376,350.045 1237.219,349.781 1237.074,349.518 C1236.154,347.849 1235.921,346.429 1236.498,344.623 C1236.694,344.009 1236.902,343.466 1237.243,342.64 C1237.281,342.548 1237.324,342.446 1237.403,342.255 C1237.467,342.1 1237.514,341.987 1237.559,341.876 C1238.284,340.102 1238.574,338.968 1238.574,337.435 C1238.574,337.005 1238.922,336.657 1239.351,336.657 C1239.781,336.657 1240.129,337.005 1240.129,337.435 C1240.129,339.206 1239.793,340.52 1238.999,342.464 C1238.953,342.578 1238.905,342.694 1238.84,342.85 C1238.76,343.042 1238.718,343.144 1238.681,343.234 C1238.354,344.024 1238.16,344.533 1237.98,345.096 C1237.546,346.455 1237.708,347.446 1238.436,348.768 C1238.566,349.004 1238.712,349.248 1238.919,349.584 C1238.958,349.647 1238.985,349.69 1239.052,349.799 C1239.12,349.908 1239.12,349.908 1239.189,350.018 C1239.302,350.201 1239.386,350.337 1239.47,350.475 C1241.709,354.174 1241.876,357.684 1240.746,361.735 C1243.023,363.062 1244.228,365.245 1244.359,367.845 C1244.359,371.7 1241.234,374.824 1237.38,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1237.38,297.184 C1241.234,297.184 1244.359,300.308 1244.359,304.163 C1244.357,306.734 1242.994,308.755 1240.929,310.149 C1239.75,314.341 1239.703,316.788 1241.887,320.727 C1241.967,320.858 1242.049,320.991 1242.159,321.169 C1242.077,321.036 1242.367,321.503 1242.431,321.607 C1242.651,321.963 1242.808,322.227 1242.953,322.49 C1243.873,324.159 1244.106,325.579 1243.529,327.385 C1243.333,327.999 1243.125,328.542 1242.784,329.368 C1242.746,329.46 1242.703,329.562 1242.624,329.753 C1242.56,329.908 1242.513,330.021 1242.468,330.132 C1241.743,331.906 1241.453,333.04 1241.453,334.573 C1241.453,335.003 1241.105,335.351 1240.676,335.351 C1240.246,335.351 1239.898,335.003 1239.898,334.573 C1239.898,332.802 1240.234,331.488 1241.028,329.544 C1241.075,329.43 1241.122,329.314 1241.187,329.158 C1241.267,328.966 1241.309,328.864 1241.346,328.774 C1241.673,327.984 1241.867,327.475 1242.047,326.912 C1242.482,325.553 1242.319,324.562 1241.591,323.24 C1241.461,323.004 1241.316,322.76 1241.108,322.424 C1241.069,322.361 1241.042,322.318 1240.975,322.209 C1240.907,322.1 1240.907,322.1 1240.838,321.99 C1240.725,321.807 1240.641,321.671 1240.557,321.533 C1238.341,317.942 1238.265,314.831 1239.135,310.893 C1237.86,311.153 1238.448,311.088 1237.38,311.142 C1236.259,311.085 1236.9,311.153 1235.468,310.861 C1234.495,314.8 1234.589,317.063 1236.62,320.727 C1236.7,320.858 1236.782,320.991 1236.892,321.169 C1236.81,321.036 1237.1,321.503 1237.164,321.607 C1237.384,321.963 1237.541,322.227 1237.686,322.49 C1238.606,324.159 1238.839,325.579 1238.262,327.385 C1238.066,327.999 1237.858,328.542 1237.517,329.368 C1237.479,329.46 1237.436,329.562 1237.357,329.753 C1237.293,329.908 1237.246,330.021 1237.201,330.132 C1236.476,331.906 1236.187,333.04 1236.187,334.573 C1236.187,335.003 1235.838,335.351 1235.409,335.351 C1234.979,335.351 1234.631,335.003 1234.631,334.573 C1234.631,332.802 1234.967,331.488 1235.761,329.544 C1235.808,329.43 1235.855,329.314 1235.92,329.158 C1236,328.966 1236.042,328.864 1236.079,328.774 C1236.406,327.984 1236.601,327.475 1236.781,326.912 C1237.215,325.553 1237.052,324.562 1236.324,323.24 C1236.194,323.004 1236.049,322.76 1235.841,322.424 C1235.802,322.361 1235.775,322.318 1235.708,322.209 C1235.64,322.1 1235.64,322.1 1235.571,321.99 C1235.458,321.807 1235.374,321.671 1235.291,321.533 C1233.051,317.834 1232.884,314.324 1234.014,310.273 C1231.737,308.946 1230.532,306.763 1230.401,304.163 C1230.401,300.308 1233.526,297.184 1237.38,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1251.338,374.824 C1247.484,374.824 1244.359,371.7 1244.359,367.845 C1244.361,365.274 1245.724,363.253 1247.789,361.859 C1248.968,357.667 1249.015,355.22 1246.831,351.281 C1246.751,351.15 1246.67,351.017 1246.559,350.839 C1246.641,350.972 1246.351,350.505 1246.287,350.401 C1246.067,350.045 1245.91,349.781 1245.765,349.518 C1244.845,347.849 1244.612,346.429 1245.189,344.623 C1245.385,344.009 1245.593,343.466 1245.935,342.64 C1245.972,342.548 1246.015,342.446 1246.094,342.255 C1246.158,342.1 1246.205,341.987 1246.25,341.876 C1246.975,340.102 1247.265,338.968 1247.265,337.435 C1247.265,337.005 1247.613,336.657 1248.042,336.657 C1248.472,336.657 1248.82,337.005 1248.82,337.435 C1248.82,339.206 1248.484,340.52 1247.69,342.464 C1247.644,342.578 1247.596,342.694 1247.531,342.85 C1247.451,343.042 1247.409,343.144 1247.372,343.234 C1247.045,344.024 1246.851,344.533 1246.671,345.096 C1246.237,346.455 1246.399,347.446 1247.127,348.768 C1247.257,349.004 1247.403,349.248 1247.61,349.584 C1247.649,349.647 1247.676,349.69 1247.743,349.799 C1247.811,349.908 1247.811,349.908 1247.88,350.018 C1247.993,350.201 1248.077,350.337 1248.161,350.475 C1250.377,354.066 1250.453,357.177 1249.583,361.115 C1250.858,360.855 1250.271,360.92 1251.338,360.866 C1252.459,360.923 1251.818,360.855 1253.25,361.147 C1254.223,357.208 1254.129,354.945 1252.098,351.281 C1252.018,351.15 1251.936,351.017 1251.826,350.839 C1251.908,350.972 1251.618,350.505 1251.554,350.401 C1251.334,350.045 1251.177,349.781 1251.032,349.518 C1250.112,347.849 1249.879,346.429 1250.456,344.623 C1250.652,344.009 1250.86,343.466 1251.201,342.64 C1251.239,342.548 1251.282,342.446 1251.361,342.255 C1251.425,342.1 1251.472,341.987 1251.517,341.876 C1252.242,340.102 1252.531,338.968 1252.532,337.435 C1252.531,337.005 1252.88,336.657 1253.309,336.657 C1253.739,336.657 1254.087,337.005 1254.087,337.435 C1254.087,339.206 1253.751,340.52 1252.957,342.464 C1252.91,342.578 1252.863,342.694 1252.798,342.85 C1252.718,343.042 1252.676,343.144 1252.639,343.234 C1252.312,344.024 1252.118,344.533 1251.938,345.096 C1251.503,346.455 1251.666,347.446 1252.394,348.768 C1252.524,349.004 1252.669,349.248 1252.877,349.584 C1252.916,349.647 1252.943,349.69 1253.01,349.799 C1253.078,349.908 1253.078,349.908 1253.147,350.018 C1253.26,350.201 1253.344,350.337 1253.427,350.475 C1255.667,354.174 1255.834,357.684 1254.704,361.735 C1256.981,363.062 1258.186,365.245 1258.317,367.845 C1258.317,371.7 1255.192,374.824 1251.338,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1251.338,297.184 C1255.192,297.184 1258.317,300.308 1258.317,304.163 C1258.315,306.734 1256.952,308.755 1254.887,310.149 C1253.708,314.341 1253.661,316.788 1255.845,320.727 C1255.925,320.858 1256.007,320.991 1256.117,321.169 C1256.035,321.036 1256.325,321.503 1256.389,321.607 C1256.609,321.963 1256.766,322.227 1256.911,322.49 C1257.831,324.159 1258.064,325.579 1257.487,327.385 C1257.291,327.999 1257.083,328.542 1256.742,329.368 C1256.704,329.46 1256.661,329.562 1256.582,329.753 C1256.518,329.908 1256.471,330.021 1256.426,330.132 C1255.701,331.906 1255.411,333.04 1255.411,334.573 C1255.411,335.003 1255.063,335.351 1254.634,335.351 C1254.204,335.351 1253.856,335.003 1253.856,334.573 C1253.856,332.802 1254.192,331.488 1254.986,329.544 C1255.032,329.43 1255.08,329.314 1255.145,329.158 C1255.225,328.966 1255.267,328.864 1255.304,328.774 C1255.631,327.984 1255.825,327.475 1256.005,326.912 C1256.44,325.553 1256.277,324.562 1255.549,323.24 C1255.419,323.004 1255.274,322.76 1255.066,322.424 C1255.027,322.361 1255,322.318 1254.933,322.209 C1254.865,322.1 1254.865,322.1 1254.796,321.99 C1254.683,321.807 1254.599,321.671 1254.515,321.533 C1252.299,317.942 1252.223,314.831 1253.093,310.893 C1251.818,311.153 1252.406,311.088 1251.338,311.142 C1250.217,311.085 1250.858,311.153 1249.426,310.861 C1248.453,314.8 1248.547,317.063 1250.578,320.727 C1250.658,320.858 1250.74,320.991 1250.85,321.169 C1250.768,321.036 1251.058,321.503 1251.122,321.607 C1251.342,321.963 1251.499,322.227 1251.644,322.49 C1252.564,324.159 1252.797,325.579 1252.22,327.385 C1252.024,327.999 1251.816,328.542 1251.475,329.368 C1251.437,329.46 1251.394,329.562 1251.315,329.753 C1251.251,329.908 1251.204,330.021 1251.159,330.132 C1250.434,331.906 1250.145,333.04 1250.144,334.573 C1250.145,335.003 1249.796,335.351 1249.367,335.351 C1248.937,335.351 1248.589,335.003 1248.589,334.573 C1248.589,332.802 1248.925,331.488 1249.719,329.544 C1249.766,329.43 1249.813,329.314 1249.878,329.158 C1249.958,328.966 1250,328.864 1250.037,328.774 C1250.364,327.984 1250.558,327.475 1250.738,326.912 C1251.173,325.553 1251.01,324.562 1250.282,323.24 C1250.152,323.004 1250.007,322.76 1249.799,322.424 C1249.76,322.361 1249.733,322.318 1249.666,322.209 C1249.598,322.1 1249.598,322.1 1249.529,321.99 C1249.416,321.807 1249.332,321.671 1249.249,321.533 C1247.009,317.834 1246.842,314.324 1247.972,310.273 C1245.695,308.946 1244.49,306.763 1244.359,304.163 C1244.359,300.308 1247.484,297.184 1251.338,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1265.296,374.824 C1261.442,374.824 1258.317,371.7 1258.317,367.845 C1258.319,365.274 1259.682,363.253 1261.747,361.859 C1262.926,357.667 1262.973,355.22 1260.789,351.281 C1260.709,351.15 1260.627,351.017 1260.517,350.839 C1260.599,350.972 1260.309,350.505 1260.245,350.401 C1260.025,350.045 1259.868,349.781 1259.723,349.518 C1258.803,347.849 1258.57,346.429 1259.147,344.623 C1259.343,344.009 1259.551,343.466 1259.892,342.64 C1259.93,342.548 1259.973,342.446 1260.052,342.255 C1260.116,342.1 1260.163,341.987 1260.208,341.876 C1260.933,340.102 1261.223,338.968 1261.223,337.435 C1261.223,337.005 1261.571,336.657 1262,336.657 C1262.43,336.657 1262.778,337.005 1262.778,337.435 C1262.778,339.206 1262.442,340.52 1261.648,342.464 C1261.602,342.578 1261.554,342.694 1261.489,342.85 C1261.409,343.042 1261.367,343.144 1261.33,343.234 C1261.003,344.024 1260.809,344.533 1260.629,345.096 C1260.195,346.455 1260.357,347.446 1261.085,348.768 C1261.215,349.004 1261.36,349.248 1261.568,349.584 C1261.607,349.647 1261.634,349.69 1261.701,349.799 C1261.769,349.908 1261.769,349.908 1261.838,350.018 C1261.951,350.201 1262.035,350.337 1262.119,350.475 C1264.335,354.066 1264.411,357.177 1263.541,361.115 C1264.816,360.855 1264.229,360.92 1265.296,360.866 C1266.417,360.923 1265.776,360.855 1267.208,361.147 C1268.181,357.208 1268.087,354.945 1266.056,351.281 C1265.976,351.15 1265.894,351.017 1265.784,350.839 C1265.866,350.972 1265.576,350.505 1265.512,350.401 C1265.292,350.045 1265.135,349.781 1264.99,349.518 C1264.07,347.849 1263.837,346.429 1264.414,344.623 C1264.61,344.009 1264.818,343.466 1265.159,342.64 C1265.197,342.548 1265.24,342.446 1265.319,342.255 C1265.383,342.1 1265.43,341.987 1265.475,341.876 C1266.2,340.102 1266.49,338.968 1266.49,337.435 C1266.49,337.005 1266.838,336.657 1267.267,336.657 C1267.697,336.657 1268.045,337.005 1268.045,337.435 C1268.045,339.206 1267.709,340.52 1266.915,342.464 C1266.868,342.578 1266.821,342.694 1266.756,342.85 C1266.676,343.042 1266.634,343.144 1266.597,343.234 C1266.27,344.024 1266.076,344.533 1265.896,345.096 C1265.461,346.455 1265.624,347.446 1266.352,348.768 C1266.482,349.004 1266.627,349.248 1266.835,349.584 C1266.874,349.647 1266.901,349.69 1266.968,349.799 C1267.036,349.908 1267.036,349.908 1267.105,350.018 C1267.218,350.201 1267.302,350.337 1267.385,350.475 C1269.625,354.174 1269.792,357.684 1268.662,361.735 C1270.939,363.062 1272.144,365.245 1272.275,367.845 C1272.275,371.7 1269.15,374.824 1265.296,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1265.296,297.184 C1269.15,297.184 1272.275,300.308 1272.275,304.163 C1272.273,306.734 1270.91,308.755 1268.845,310.149 C1267.666,314.341 1267.619,316.788 1269.803,320.727 C1269.883,320.858 1269.964,320.991 1270.075,321.169 C1269.993,321.036 1270.283,321.503 1270.347,321.607 C1270.567,321.963 1270.724,322.227 1270.869,322.49 C1271.789,324.159 1272.022,325.579 1271.445,327.385 C1271.249,327.999 1271.041,328.542 1270.699,329.368 C1270.662,329.46 1270.619,329.562 1270.54,329.753 C1270.476,329.908 1270.429,330.021 1270.384,330.132 C1269.659,331.906 1269.369,333.04 1269.369,334.573 C1269.369,335.003 1269.021,335.351 1268.592,335.351 C1268.162,335.351 1267.814,335.003 1267.814,334.573 C1267.814,332.802 1268.15,331.488 1268.944,329.544 C1268.99,329.43 1269.038,329.314 1269.103,329.158 C1269.183,328.966 1269.225,328.864 1269.262,328.774 C1269.589,327.984 1269.783,327.475 1269.963,326.912 C1270.397,325.553 1270.235,324.562 1269.507,323.24 C1269.377,323.004 1269.231,322.76 1269.024,322.424 C1268.985,322.361 1268.958,322.318 1268.891,322.209 C1268.823,322.1 1268.823,322.1 1268.754,321.99 C1268.641,321.807 1268.557,321.671 1268.473,321.533 C1266.257,317.942 1266.181,314.831 1267.051,310.893 C1265.776,311.153 1266.363,311.088 1265.296,311.142 C1264.175,311.085 1264.816,311.153 1263.384,310.861 C1262.411,314.8 1262.505,317.063 1264.536,320.727 C1264.616,320.858 1264.698,320.991 1264.808,321.169 C1264.726,321.036 1265.016,321.503 1265.08,321.607 C1265.3,321.963 1265.457,322.227 1265.602,322.49 C1266.522,324.159 1266.755,325.579 1266.178,327.385 C1265.982,327.999 1265.774,328.542 1265.433,329.368 C1265.395,329.46 1265.352,329.562 1265.273,329.753 C1265.209,329.908 1265.162,330.021 1265.117,330.132 C1264.392,331.906 1264.102,333.04 1264.102,334.573 C1264.102,335.003 1263.754,335.351 1263.325,335.351 C1262.895,335.351 1262.547,335.003 1262.547,334.573 C1262.547,332.802 1262.883,331.488 1263.677,329.544 C1263.724,329.43 1263.771,329.314 1263.836,329.158 C1263.916,328.966 1263.958,328.864 1263.995,328.774 C1264.322,327.984 1264.516,327.475 1264.696,326.912 C1265.131,325.553 1264.968,324.562 1264.24,323.24 C1264.11,323.004 1263.965,322.76 1263.757,322.424 C1263.718,322.361 1263.691,322.318 1263.624,322.209 C1263.556,322.1 1263.556,322.1 1263.487,321.99 C1263.374,321.807 1263.29,321.671 1263.206,321.533 C1260.967,317.834 1260.8,314.324 1261.93,310.273 C1259.653,308.946 1258.448,306.763 1258.317,304.163 C1258.317,300.308 1261.442,297.184 1265.296,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1279.254,374.824 C1275.4,374.824 1272.275,371.7 1272.275,367.845 C1272.277,365.274 1273.64,363.253 1275.705,361.859 C1276.884,357.667 1276.931,355.22 1274.747,351.281 C1274.667,351.15 1274.585,351.017 1274.475,350.839 C1274.557,350.972 1274.267,350.505 1274.203,350.401 C1273.983,350.045 1273.826,349.781 1273.681,349.518 C1272.761,347.849 1272.528,346.429 1273.105,344.623 C1273.301,344.009 1273.509,343.466 1273.85,342.64 C1273.888,342.548 1273.931,342.446 1274.01,342.255 C1274.074,342.1 1274.121,341.987 1274.166,341.876 C1274.891,340.102 1275.181,338.968 1275.181,337.435 C1275.181,337.005 1275.529,336.657 1275.958,336.657 C1276.388,336.657 1276.736,337.005 1276.736,337.435 C1276.736,339.206 1276.4,340.52 1275.606,342.464 C1275.559,342.578 1275.512,342.694 1275.447,342.85 C1275.367,343.042 1275.325,343.144 1275.288,343.234 C1274.961,344.024 1274.767,344.533 1274.587,345.096 C1274.152,346.455 1274.315,347.446 1275.043,348.768 C1275.173,349.004 1275.318,349.248 1275.526,349.584 C1275.565,349.647 1275.592,349.69 1275.659,349.799 C1275.727,349.908 1275.727,349.908 1275.796,350.018 C1275.909,350.201 1275.993,350.337 1276.077,350.475 C1278.293,354.066 1278.369,357.177 1277.499,361.115 C1278.774,360.855 1278.186,360.92 1279.254,360.866 C1280.375,360.923 1279.734,360.855 1281.166,361.147 C1282.138,357.208 1282.045,354.945 1280.014,351.281 C1279.934,351.15 1279.852,351.017 1279.741,350.839 C1279.824,350.972 1279.533,350.505 1279.47,350.401 C1279.25,350.045 1279.093,349.781 1278.948,349.518 C1278.028,347.849 1277.795,346.429 1278.372,344.623 C1278.568,344.009 1278.776,343.466 1279.117,342.64 C1279.155,342.548 1279.198,342.446 1279.277,342.255 C1279.341,342.1 1279.388,341.987 1279.433,341.876 C1280.158,340.102 1280.447,338.968 1280.447,337.435 C1280.447,337.005 1280.796,336.657 1281.225,336.657 C1281.655,336.657 1282.003,337.005 1282.003,337.435 C1282.003,339.206 1281.667,340.52 1280.873,342.464 C1280.826,342.578 1280.779,342.694 1280.714,342.85 C1280.634,343.042 1280.592,343.144 1280.554,343.234 C1280.228,344.024 1280.033,344.533 1279.854,345.096 C1279.419,346.455 1279.582,347.446 1280.31,348.768 C1280.44,349.004 1280.585,349.248 1280.793,349.584 C1280.832,349.647 1280.859,349.69 1280.926,349.799 C1280.994,349.908 1280.994,349.908 1281.062,350.018 C1281.176,350.201 1281.26,350.337 1281.343,350.475 C1283.583,354.174 1283.75,357.684 1282.62,361.735 C1284.897,363.062 1286.101,365.245 1286.233,367.845 C1286.233,371.7 1283.108,374.824 1279.254,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1279.254,297.184 C1283.108,297.184 1286.233,300.308 1286.233,304.163 C1286.231,306.734 1284.868,308.755 1282.803,310.149 C1281.624,314.341 1281.577,316.788 1283.761,320.727 C1283.841,320.858 1283.922,320.991 1284.033,321.169 C1283.951,321.036 1284.241,321.503 1284.305,321.607 C1284.525,321.963 1284.682,322.227 1284.827,322.49 C1285.746,324.159 1285.98,325.579 1285.403,327.385 C1285.207,327.999 1284.999,328.542 1284.657,329.368 C1284.62,329.46 1284.577,329.562 1284.498,329.753 C1284.434,329.908 1284.387,330.021 1284.342,330.132 C1283.617,331.906 1283.327,333.04 1283.327,334.573 C1283.327,335.003 1282.979,335.351 1282.55,335.351 C1282.12,335.351 1281.772,335.003 1281.772,334.573 C1281.772,332.802 1282.108,331.488 1282.902,329.544 C1282.948,329.43 1282.996,329.314 1283.061,329.158 C1283.141,328.966 1283.183,328.864 1283.22,328.774 C1283.547,327.984 1283.741,327.475 1283.921,326.912 C1284.355,325.553 1284.193,324.562 1283.465,323.24 C1283.335,323.004 1283.189,322.76 1282.982,322.424 C1282.943,322.361 1282.916,322.318 1282.849,322.209 C1282.781,322.1 1282.781,322.1 1282.712,321.99 C1282.599,321.807 1282.515,321.671 1282.431,321.533 C1280.215,317.942 1280.139,314.831 1281.009,310.893 C1279.734,311.153 1280.321,311.088 1279.254,311.142 C1278.133,311.085 1278.774,311.153 1277.342,310.861 C1276.369,314.8 1276.463,317.063 1278.494,320.727 C1278.574,320.858 1278.656,320.991 1278.766,321.169 C1278.684,321.036 1278.974,321.503 1279.038,321.607 C1279.258,321.963 1279.415,322.227 1279.56,322.49 C1280.48,324.159 1280.713,325.579 1280.136,327.385 C1279.94,327.999 1279.732,328.542 1279.391,329.368 C1279.353,329.46 1279.31,329.562 1279.231,329.753 C1279.167,329.908 1279.12,330.021 1279.075,330.132 C1278.35,331.906 1278.06,333.04 1278.06,334.573 C1278.06,335.003 1277.712,335.351 1277.283,335.351 C1276.853,335.351 1276.505,335.003 1276.505,334.573 C1276.505,332.802 1276.841,331.488 1277.635,329.544 C1277.682,329.43 1277.729,329.314 1277.794,329.158 C1277.874,328.966 1277.916,328.864 1277.953,328.774 C1278.28,327.984 1278.474,327.475 1278.654,326.912 C1279.089,325.553 1278.926,324.562 1278.198,323.24 C1278.068,323.004 1277.922,322.76 1277.715,322.424 C1277.676,322.361 1277.649,322.318 1277.582,322.209 C1277.514,322.1 1277.514,322.1 1277.445,321.99 C1277.332,321.807 1277.248,321.671 1277.164,321.533 C1274.925,317.834 1274.758,314.324 1275.888,310.273 C1273.611,308.946 1272.406,306.763 1272.275,304.163 C1272.275,300.308 1275.4,297.184 1279.254,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1293.212,374.824 C1289.357,374.824 1286.233,371.7 1286.233,367.845 C1286.235,365.274 1287.598,363.253 1289.663,361.859 C1290.842,357.667 1290.889,355.22 1288.705,351.281 C1288.625,351.15 1288.543,351.017 1288.433,350.839 C1288.515,350.972 1288.225,350.505 1288.161,350.401 C1287.941,350.045 1287.784,349.781 1287.639,349.518 C1286.719,347.849 1286.486,346.429 1287.063,344.623 C1287.259,344.009 1287.467,343.466 1287.808,342.64 C1287.846,342.548 1287.889,342.446 1287.968,342.255 C1288.032,342.1 1288.079,341.987 1288.124,341.876 C1288.849,340.102 1289.139,338.968 1289.139,337.435 C1289.139,337.005 1289.487,336.657 1289.916,336.657 C1290.346,336.657 1290.694,337.005 1290.694,337.435 C1290.694,339.206 1290.358,340.52 1289.564,342.464 C1289.517,342.578 1289.47,342.694 1289.405,342.85 C1289.325,343.042 1289.283,343.144 1289.246,343.234 C1288.919,344.024 1288.725,344.533 1288.545,345.096 C1288.11,346.455 1288.273,347.446 1289.001,348.768 C1289.131,349.004 1289.276,349.248 1289.484,349.584 C1289.523,349.647 1289.55,349.69 1289.617,349.799 C1289.685,349.908 1289.685,349.908 1289.754,350.018 C1289.867,350.201 1289.951,350.337 1290.034,350.475 C1292.25,354.066 1292.327,357.177 1291.457,361.115 C1292.732,360.855 1292.144,360.92 1293.212,360.866 C1294.333,360.923 1293.692,360.855 1295.124,361.147 C1296.096,357.208 1296.003,354.945 1293.972,351.281 C1293.892,351.15 1293.81,351.017 1293.699,350.839 C1293.782,350.972 1293.491,350.505 1293.428,350.401 C1293.208,350.045 1293.051,349.781 1292.906,349.518 C1291.986,347.849 1291.753,346.429 1292.33,344.623 C1292.526,344.009 1292.734,343.466 1293.075,342.64 C1293.113,342.548 1293.156,342.446 1293.235,342.255 C1293.299,342.1 1293.346,341.987 1293.391,341.876 C1294.115,340.102 1294.405,338.968 1294.405,337.435 C1294.405,337.005 1294.754,336.657 1295.183,336.657 C1295.612,336.657 1295.961,337.005 1295.961,337.435 C1295.961,339.206 1295.625,340.52 1294.831,342.464 C1294.784,342.578 1294.736,342.694 1294.672,342.85 C1294.592,343.042 1294.55,343.144 1294.512,343.234 C1294.186,344.024 1293.991,344.533 1293.811,345.096 C1293.377,346.455 1293.54,347.446 1294.268,348.768 C1294.398,349.004 1294.543,349.248 1294.751,349.584 C1294.79,349.647 1294.817,349.69 1294.884,349.799 C1294.952,349.908 1294.952,349.908 1295.02,350.018 C1295.134,350.201 1295.218,350.337 1295.301,350.475 C1297.541,354.174 1297.708,357.684 1296.578,361.735 C1298.855,363.062 1300.059,365.245 1300.191,367.845 C1300.191,371.7 1297.066,374.824 1293.212,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1293.212,297.184 C1297.066,297.184 1300.191,300.308 1300.191,304.163 C1300.189,306.734 1298.826,308.755 1296.761,310.149 C1295.582,314.341 1295.535,316.788 1297.719,320.727 C1297.799,320.858 1297.88,320.991 1297.991,321.169 C1297.909,321.036 1298.199,321.503 1298.263,321.607 C1298.483,321.963 1298.64,322.227 1298.785,322.49 C1299.704,324.159 1299.938,325.579 1299.361,327.385 C1299.165,327.999 1298.957,328.542 1298.615,329.368 C1298.578,329.46 1298.535,329.562 1298.456,329.753 C1298.392,329.908 1298.345,330.021 1298.299,330.132 C1297.575,331.906 1297.285,333.04 1297.285,334.573 C1297.285,335.003 1296.937,335.351 1296.507,335.351 C1296.078,335.351 1295.73,335.003 1295.73,334.573 C1295.73,332.802 1296.066,331.488 1296.86,329.544 C1296.906,329.43 1296.954,329.314 1297.019,329.158 C1297.099,328.966 1297.141,328.864 1297.178,328.774 C1297.505,327.984 1297.699,327.475 1297.879,326.912 C1298.313,325.553 1298.151,324.562 1297.423,323.24 C1297.292,323.004 1297.147,322.76 1296.94,322.424 C1296.901,322.361 1296.874,322.318 1296.807,322.209 C1296.739,322.1 1296.739,322.1 1296.67,321.99 C1296.557,321.807 1296.472,321.671 1296.389,321.533 C1294.173,317.942 1294.097,314.831 1294.967,310.893 C1293.692,311.153 1294.279,311.088 1293.212,311.142 C1292.091,311.085 1292.732,311.153 1291.3,310.861 C1290.327,314.8 1290.421,317.063 1292.452,320.727 C1292.532,320.858 1292.614,320.991 1292.724,321.169 C1292.642,321.036 1292.932,321.503 1292.996,321.607 C1293.216,321.963 1293.373,322.227 1293.518,322.49 C1294.438,324.159 1294.671,325.579 1294.094,327.385 C1293.898,327.999 1293.69,328.542 1293.349,329.368 C1293.311,329.46 1293.268,329.562 1293.189,329.753 C1293.125,329.908 1293.078,330.021 1293.033,330.132 C1292.308,331.906 1292.018,333.04 1292.018,334.573 C1292.018,335.003 1291.67,335.351 1291.241,335.351 C1290.811,335.351 1290.463,335.003 1290.463,334.573 C1290.463,332.802 1290.799,331.488 1291.593,329.544 C1291.639,329.43 1291.687,329.314 1291.752,329.158 C1291.832,328.966 1291.874,328.864 1291.911,328.774 C1292.238,327.984 1292.432,327.475 1292.612,326.912 C1293.046,325.553 1292.884,324.562 1292.156,323.24 C1292.026,323.004 1291.88,322.76 1291.673,322.424 C1291.634,322.361 1291.607,322.318 1291.54,322.209 C1291.472,322.1 1291.472,322.1 1291.403,321.99 C1291.29,321.807 1291.206,321.671 1291.122,321.533 C1288.883,317.834 1288.716,314.324 1289.846,310.273 C1287.569,308.946 1286.364,306.763 1286.233,304.163 C1286.233,300.308 1289.357,297.184 1293.212,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1307.17,374.824 C1303.315,374.824 1300.191,371.7 1300.191,367.845 C1300.193,365.274 1301.556,363.253 1303.621,361.859 C1304.8,357.667 1304.847,355.22 1302.663,351.281 C1302.583,351.15 1302.501,351.017 1302.391,350.839 C1302.473,350.972 1302.182,350.505 1302.119,350.401 C1301.899,350.045 1301.742,349.781 1301.597,349.518 C1300.677,347.849 1300.444,346.429 1301.021,344.623 C1301.217,344.009 1301.425,343.466 1301.766,342.64 C1301.804,342.548 1301.847,342.446 1301.926,342.255 C1301.99,342.1 1302.037,341.987 1302.082,341.876 C1302.807,340.102 1303.096,338.968 1303.096,337.435 C1303.096,337.005 1303.445,336.657 1303.874,336.657 C1304.303,336.657 1304.652,337.005 1304.652,337.435 C1304.652,339.206 1304.316,340.52 1303.522,342.464 C1303.475,342.578 1303.428,342.694 1303.363,342.85 C1303.283,343.042 1303.241,343.144 1303.203,343.234 C1302.877,344.024 1302.682,344.533 1302.503,345.096 C1302.068,346.455 1302.231,347.446 1302.959,348.768 C1303.089,349.004 1303.234,349.248 1303.442,349.584 C1303.481,349.647 1303.508,349.69 1303.575,349.799 C1303.643,349.908 1303.643,349.908 1303.712,350.018 C1303.825,350.201 1303.909,350.337 1303.992,350.475 C1306.208,354.066 1306.284,357.177 1305.415,361.115 C1306.69,360.855 1306.102,360.92 1307.17,360.866 C1308.291,360.923 1307.65,360.855 1309.082,361.147 C1310.054,357.208 1309.961,354.945 1307.929,351.281 C1307.85,351.15 1307.768,351.017 1307.657,350.839 C1307.74,350.972 1307.449,350.505 1307.385,350.401 C1307.166,350.045 1307.009,349.781 1306.864,349.518 C1305.944,347.849 1305.711,346.429 1306.288,344.623 C1306.484,344.009 1306.692,343.466 1307.033,342.64 C1307.071,342.548 1307.113,342.446 1307.193,342.255 C1307.257,342.1 1307.304,341.987 1307.349,341.876 C1308.073,340.102 1308.363,338.968 1308.363,337.435 C1308.363,337.005 1308.711,336.657 1309.141,336.657 C1309.57,336.657 1309.918,337.005 1309.918,337.435 C1309.918,339.206 1309.583,340.52 1308.789,342.464 C1308.742,342.578 1308.694,342.694 1308.63,342.85 C1308.55,343.042 1308.508,343.144 1308.47,343.234 C1308.144,344.024 1307.949,344.533 1307.769,345.096 C1307.335,346.455 1307.498,347.446 1308.226,348.768 C1308.356,349.004 1308.501,349.248 1308.709,349.584 C1308.748,349.647 1308.775,349.69 1308.842,349.799 C1308.91,349.908 1308.91,349.908 1308.978,350.018 C1309.092,350.201 1309.176,350.337 1309.259,350.475 C1311.499,354.174 1311.666,357.684 1310.536,361.735 C1312.813,363.062 1314.017,365.245 1314.149,367.845 C1314.149,371.7 1311.024,374.824 1307.17,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1307.17,297.184 C1311.024,297.184 1314.149,300.308 1314.149,304.163 C1314.147,306.734 1312.784,308.755 1310.719,310.149 C1309.54,314.341 1309.493,316.788 1311.677,320.727 C1311.757,320.858 1311.838,320.991 1311.949,321.169 C1311.867,321.036 1312.157,321.503 1312.221,321.607 C1312.441,321.963 1312.598,322.227 1312.743,322.49 C1313.662,324.159 1313.896,325.579 1313.318,327.385 C1313.123,327.999 1312.915,328.542 1312.573,329.368 C1312.536,329.46 1312.493,329.562 1312.413,329.753 C1312.349,329.908 1312.303,330.021 1312.257,330.132 C1311.533,331.906 1311.243,333.04 1311.243,334.573 C1311.243,335.003 1310.895,335.351 1310.465,335.351 C1310.036,335.351 1309.688,335.003 1309.688,334.573 C1309.688,332.802 1310.024,331.488 1310.818,329.544 C1310.864,329.43 1310.912,329.314 1310.977,329.158 C1311.057,328.966 1311.099,328.864 1311.136,328.774 C1311.462,327.984 1311.657,327.475 1311.837,326.912 C1312.271,325.553 1312.109,324.562 1311.38,323.24 C1311.25,323.004 1311.105,322.76 1310.898,322.424 C1310.859,322.361 1310.832,322.318 1310.765,322.209 C1310.697,322.1 1310.697,322.1 1310.628,321.99 C1310.515,321.807 1310.43,321.671 1310.347,321.533 C1308.131,317.942 1308.055,314.831 1308.925,310.893 C1307.65,311.153 1308.237,311.088 1307.17,311.142 C1306.049,311.085 1306.69,311.153 1305.257,310.861 C1304.285,314.8 1304.379,317.063 1306.41,320.727 C1306.49,320.858 1306.571,320.991 1306.682,321.169 C1306.6,321.036 1306.89,321.503 1306.954,321.607 C1307.174,321.963 1307.331,322.227 1307.476,322.49 C1308.396,324.159 1308.629,325.579 1308.052,327.385 C1307.856,327.999 1307.648,328.542 1307.306,329.368 C1307.269,329.46 1307.226,329.562 1307.147,329.753 C1307.083,329.908 1307.036,330.021 1306.99,330.132 C1306.266,331.906 1305.976,333.04 1305.976,334.573 C1305.976,335.003 1305.628,335.351 1305.199,335.351 C1304.769,335.351 1304.421,335.003 1304.421,334.573 C1304.421,332.802 1304.757,331.488 1305.551,329.544 C1305.597,329.43 1305.645,329.314 1305.71,329.158 C1305.79,328.966 1305.832,328.864 1305.869,328.774 C1306.196,327.984 1306.39,327.475 1306.57,326.912 C1307.004,325.553 1306.842,324.562 1306.114,323.24 C1305.984,323.004 1305.838,322.76 1305.631,322.424 C1305.592,322.361 1305.565,322.318 1305.498,322.209 C1305.43,322.1 1305.43,322.1 1305.361,321.99 C1305.248,321.807 1305.164,321.671 1305.08,321.533 C1302.841,317.834 1302.674,314.324 1303.803,310.273 C1301.527,308.946 1300.322,306.763 1300.191,304.163 C1300.191,300.308 1303.315,297.184 1307.17,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1321.128,374.824 C1317.273,374.824 1314.149,371.7 1314.149,367.845 C1314.151,365.274 1315.514,363.253 1317.579,361.859 C1318.758,357.667 1318.805,355.22 1316.62,351.281 C1316.541,351.15 1316.459,351.017 1316.349,350.839 C1316.431,350.972 1316.14,350.505 1316.077,350.401 C1315.857,350.045 1315.7,349.781 1315.555,349.518 C1314.635,347.849 1314.402,346.429 1314.979,344.623 C1315.175,344.009 1315.383,343.466 1315.724,342.64 C1315.762,342.548 1315.804,342.446 1315.884,342.255 C1315.948,342.1 1315.995,341.987 1316.04,341.876 C1316.765,340.102 1317.054,338.968 1317.054,337.435 C1317.054,337.005 1317.402,336.657 1317.832,336.657 C1318.261,336.657 1318.61,337.005 1318.61,337.435 C1318.61,339.206 1318.274,340.52 1317.48,342.464 C1317.433,342.578 1317.385,342.694 1317.321,342.85 C1317.241,343.042 1317.199,343.144 1317.161,343.234 C1316.835,344.024 1316.64,344.533 1316.46,345.096 C1316.026,346.455 1316.189,347.446 1316.917,348.768 C1317.047,349.004 1317.192,349.248 1317.4,349.584 C1317.439,349.647 1317.466,349.69 1317.533,349.799 C1317.601,349.908 1317.601,349.908 1317.669,350.018 C1317.783,350.201 1317.867,350.337 1317.95,350.475 C1320.166,354.066 1320.242,357.177 1319.372,361.115 C1320.647,360.855 1320.06,360.92 1321.128,360.866 C1322.249,360.923 1321.608,360.855 1323.04,361.147 C1324.012,357.208 1323.919,354.945 1321.887,351.281 C1321.807,351.15 1321.726,351.017 1321.615,350.839 C1321.698,350.972 1321.407,350.505 1321.343,350.401 C1321.124,350.045 1320.966,349.781 1320.822,349.518 C1319.902,347.849 1319.669,346.429 1320.246,344.623 C1320.442,344.009 1320.649,343.466 1320.991,342.64 C1321.029,342.548 1321.071,342.446 1321.151,342.255 C1321.215,342.1 1321.261,341.987 1321.307,341.876 C1322.031,340.102 1322.321,338.968 1322.321,337.435 C1322.321,337.005 1322.669,336.657 1323.099,336.657 C1323.528,336.657 1323.876,337.005 1323.876,337.435 C1323.876,339.206 1323.541,340.52 1322.747,342.464 C1322.7,342.578 1322.652,342.694 1322.587,342.85 C1322.508,343.042 1322.466,343.144 1322.428,343.234 C1322.102,344.024 1321.907,344.533 1321.727,345.096 C1321.293,346.455 1321.456,347.446 1322.184,348.768 C1322.314,349.004 1322.459,349.248 1322.667,349.584 C1322.705,349.647 1322.732,349.69 1322.8,349.799 C1322.867,349.908 1322.867,349.908 1322.936,350.018 C1323.05,350.201 1323.134,350.337 1323.217,350.475 C1325.456,354.174 1325.623,357.684 1324.494,361.735 C1326.771,363.062 1327.975,365.245 1328.107,367.845 C1328.106,371.7 1324.982,374.824 1321.128,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1321.128,297.184 C1324.982,297.184 1328.107,300.308 1328.107,304.163 C1328.105,306.734 1326.742,308.755 1324.677,310.149 C1323.498,314.341 1323.451,316.788 1325.635,320.727 C1325.715,320.858 1325.796,320.991 1325.907,321.169 C1325.825,321.036 1326.115,321.503 1326.179,321.607 C1326.399,321.963 1326.556,322.227 1326.701,322.49 C1327.62,324.159 1327.853,325.579 1327.276,327.385 C1327.08,327.999 1326.873,328.542 1326.531,329.368 C1326.493,329.46 1326.451,329.562 1326.371,329.753 C1326.307,329.908 1326.261,330.021 1326.215,330.132 C1325.491,331.906 1325.201,333.04 1325.201,334.573 C1325.201,335.003 1324.853,335.351 1324.423,335.351 C1323.994,335.351 1323.646,335.003 1323.646,334.573 C1323.646,332.802 1323.982,331.488 1324.776,329.544 C1324.822,329.43 1324.87,329.314 1324.935,329.158 C1325.015,328.966 1325.057,328.864 1325.094,328.774 C1325.42,327.984 1325.615,327.475 1325.795,326.912 C1326.229,325.553 1326.067,324.562 1325.338,323.24 C1325.208,323.004 1325.063,322.76 1324.856,322.424 C1324.817,322.361 1324.79,322.318 1324.723,322.209 C1324.655,322.1 1324.655,322.1 1324.586,321.99 C1324.473,321.807 1324.388,321.671 1324.305,321.533 C1322.089,317.942 1322.013,314.831 1322.883,310.893 C1321.608,311.153 1322.195,311.088 1321.128,311.142 C1320.007,311.085 1320.647,311.153 1319.215,310.861 C1318.243,314.8 1318.337,317.063 1320.368,320.727 C1320.448,320.858 1320.529,320.991 1320.64,321.169 C1320.558,321.036 1320.848,321.503 1320.912,321.607 C1321.132,321.963 1321.289,322.227 1321.434,322.49 C1322.353,324.159 1322.586,325.579 1322.01,327.385 C1321.814,327.999 1321.606,328.542 1321.264,329.368 C1321.227,329.46 1321.184,329.562 1321.104,329.753 C1321.041,329.908 1320.994,330.021 1320.948,330.132 C1320.224,331.906 1319.934,333.04 1319.934,334.573 C1319.934,335.003 1319.586,335.351 1319.156,335.351 C1318.727,335.351 1318.379,335.003 1318.379,334.573 C1318.379,332.802 1318.715,331.488 1319.509,329.544 C1319.555,329.43 1319.603,329.314 1319.668,329.158 C1319.748,328.966 1319.79,328.864 1319.827,328.774 C1320.153,327.984 1320.348,327.475 1320.528,326.912 C1320.962,325.553 1320.8,324.562 1320.072,323.24 C1319.941,323.004 1319.796,322.76 1319.589,322.424 C1319.55,322.361 1319.523,322.318 1319.456,322.209 C1319.388,322.1 1319.388,322.1 1319.319,321.99 C1319.206,321.807 1319.121,321.671 1319.038,321.533 C1316.799,317.834 1316.632,314.324 1317.761,310.273 C1315.485,308.946 1314.28,306.763 1314.149,304.163 C1314.149,300.308 1317.273,297.184 1321.128,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1335.086,374.824 C1331.231,374.824 1328.107,371.7 1328.107,367.845 C1328.108,365.274 1329.471,363.253 1331.537,361.859 C1332.715,357.667 1332.763,355.22 1330.578,351.281 C1330.499,351.15 1330.417,351.017 1330.306,350.839 C1330.389,350.972 1330.098,350.505 1330.035,350.401 C1329.815,350.045 1329.658,349.781 1329.513,349.518 C1328.593,347.849 1328.36,346.429 1328.937,344.623 C1329.133,344.009 1329.341,343.466 1329.682,342.64 C1329.72,342.548 1329.762,342.446 1329.842,342.255 C1329.906,342.1 1329.953,341.987 1329.998,341.876 C1330.722,340.102 1331.012,338.968 1331.012,337.435 C1331.012,337.005 1331.36,336.657 1331.79,336.657 C1332.219,336.657 1332.568,337.005 1332.568,337.435 C1332.568,339.206 1332.232,340.52 1331.438,342.464 C1331.391,342.578 1331.343,342.694 1331.279,342.85 C1331.199,343.042 1331.157,343.144 1331.119,343.234 C1330.793,344.024 1330.598,344.533 1330.418,345.096 C1329.984,346.455 1330.147,347.446 1330.875,348.768 C1331.005,349.004 1331.15,349.248 1331.358,349.584 C1331.396,349.647 1331.423,349.69 1331.491,349.799 C1331.558,349.908 1331.558,349.908 1331.627,350.018 C1331.741,350.201 1331.825,350.337 1331.908,350.475 C1334.124,354.066 1334.2,357.177 1333.33,361.115 C1334.605,360.855 1334.018,360.92 1335.086,360.866 C1336.206,360.923 1335.566,360.855 1336.998,361.147 C1337.97,357.208 1337.876,354.945 1335.845,351.281 C1335.765,351.15 1335.684,351.017 1335.573,350.839 C1335.656,350.972 1335.365,350.505 1335.301,350.401 C1335.081,350.045 1334.924,349.781 1334.779,349.518 C1333.86,347.849 1333.627,346.429 1334.204,344.623 C1334.4,344.009 1334.607,343.466 1334.949,342.64 C1334.987,342.548 1335.029,342.446 1335.109,342.255 C1335.173,342.1 1335.219,341.987 1335.265,341.876 C1335.989,340.102 1336.279,338.968 1336.279,337.435 C1336.279,337.005 1336.627,336.657 1337.057,336.657 C1337.486,336.657 1337.834,337.005 1337.834,337.435 C1337.834,339.206 1337.499,340.52 1336.705,342.464 C1336.658,342.578 1336.61,342.694 1336.545,342.85 C1336.466,343.042 1336.424,343.144 1336.386,343.234 C1336.06,344.024 1335.865,344.533 1335.685,345.096 C1335.251,346.455 1335.414,347.446 1336.142,348.768 C1336.272,349.004 1336.417,349.248 1336.624,349.584 C1336.663,349.647 1336.69,349.69 1336.758,349.799 C1336.825,349.908 1336.825,349.908 1336.894,350.018 C1337.008,350.201 1337.092,350.337 1337.175,350.475 C1339.414,354.174 1339.581,357.684 1338.452,361.735 C1340.728,363.062 1341.933,365.245 1342.064,367.845 C1342.064,371.7 1338.94,374.824 1335.086,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1335.086,297.184 C1338.94,297.184 1342.065,300.308 1342.065,304.163 C1342.063,306.734 1340.7,308.755 1338.635,310.149 C1337.456,314.341 1337.409,316.788 1339.593,320.727 C1339.673,320.858 1339.754,320.991 1339.865,321.169 C1339.782,321.036 1340.073,321.503 1340.137,321.607 C1340.357,321.963 1340.514,322.227 1340.659,322.49 C1341.578,324.159 1341.811,325.579 1341.234,327.385 C1341.038,327.999 1340.831,328.542 1340.489,329.368 C1340.451,329.46 1340.409,329.562 1340.329,329.753 C1340.265,329.908 1340.219,330.021 1340.173,330.132 C1339.449,331.906 1339.159,333.04 1339.159,334.573 C1339.159,335.003 1338.811,335.351 1338.381,335.351 C1337.952,335.351 1337.604,335.003 1337.604,334.573 C1337.604,332.802 1337.939,331.488 1338.733,329.544 C1338.78,329.43 1338.828,329.314 1338.893,329.158 C1338.972,328.966 1339.014,328.864 1339.052,328.774 C1339.378,327.984 1339.573,327.475 1339.753,326.912 C1340.187,325.553 1340.024,324.562 1339.296,323.24 C1339.166,323.004 1339.021,322.76 1338.814,322.424 C1338.775,322.361 1338.748,322.318 1338.68,322.209 C1338.613,322.1 1338.613,322.1 1338.544,321.99 C1338.43,321.807 1338.346,321.671 1338.263,321.533 C1336.047,317.942 1335.971,314.831 1336.841,310.893 C1335.566,311.153 1336.153,311.088 1335.086,311.142 C1333.965,311.085 1334.605,311.153 1333.173,310.861 C1332.201,314.8 1332.295,317.063 1334.326,320.727 C1334.406,320.858 1334.487,320.991 1334.598,321.169 C1334.516,321.036 1334.806,321.503 1334.87,321.607 C1335.09,321.963 1335.247,322.227 1335.392,322.49 C1336.311,324.159 1336.544,325.579 1335.967,327.385 C1335.771,327.999 1335.564,328.542 1335.222,329.368 C1335.184,329.46 1335.142,329.562 1335.062,329.753 C1334.999,329.908 1334.952,330.021 1334.906,330.132 C1334.182,331.906 1333.892,333.04 1333.892,334.573 C1333.892,335.003 1333.544,335.351 1333.114,335.351 C1332.685,335.351 1332.337,335.003 1332.337,334.573 C1332.337,332.802 1332.673,331.488 1333.467,329.544 C1333.513,329.43 1333.561,329.314 1333.626,329.158 C1333.706,328.966 1333.748,328.864 1333.785,328.774 C1334.111,327.984 1334.306,327.475 1334.486,326.912 C1334.92,325.553 1334.758,324.562 1334.029,323.24 C1333.899,323.004 1333.754,322.76 1333.547,322.424 C1333.508,322.361 1333.481,322.318 1333.414,322.209 C1333.346,322.1 1333.346,322.1 1333.277,321.99 C1333.164,321.807 1333.079,321.671 1332.996,321.533 C1330.757,317.834 1330.59,314.324 1331.719,310.273 C1329.443,308.946 1328.238,306.763 1328.107,304.163 C1328.107,300.308 1331.231,297.184 1335.086,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1349.043,374.824 C1345.189,374.824 1342.065,371.7 1342.065,367.845 C1342.066,365.274 1343.429,363.253 1345.495,361.859 C1346.673,357.667 1346.72,355.22 1344.536,351.281 C1344.457,351.15 1344.375,351.017 1344.264,350.839 C1344.347,350.972 1344.056,350.505 1343.992,350.401 C1343.772,350.045 1343.615,349.781 1343.471,349.518 C1342.551,347.849 1342.318,346.429 1342.895,344.623 C1343.091,344.009 1343.298,343.466 1343.64,342.64 C1343.678,342.548 1343.72,342.446 1343.8,342.255 C1343.864,342.1 1343.911,341.987 1343.956,341.876 C1344.68,340.102 1344.97,338.968 1344.97,337.435 C1344.97,337.005 1345.318,336.657 1345.748,336.657 C1346.177,336.657 1346.525,337.005 1346.526,337.435 C1346.525,339.206 1346.19,340.52 1345.396,342.464 C1345.349,342.578 1345.301,342.694 1345.236,342.85 C1345.157,343.042 1345.115,343.144 1345.077,343.234 C1344.751,344.024 1344.556,344.533 1344.376,345.096 C1343.942,346.455 1344.105,347.446 1344.833,348.768 C1344.963,349.004 1345.108,349.248 1345.316,349.584 C1345.354,349.647 1345.381,349.69 1345.449,349.799 C1345.516,349.908 1345.516,349.908 1345.585,350.018 C1345.699,350.201 1345.783,350.337 1345.866,350.475 C1348.082,354.066 1348.158,357.177 1347.288,361.115 C1348.563,360.855 1347.976,360.92 1349.043,360.866 C1350.164,360.923 1349.524,360.855 1350.956,361.147 C1351.928,357.208 1351.834,354.945 1349.803,351.281 C1349.723,351.15 1349.642,351.017 1349.531,350.839 C1349.613,350.972 1349.323,350.505 1349.259,350.401 C1349.039,350.045 1348.882,349.781 1348.737,349.518 C1347.818,347.849 1347.585,346.429 1348.162,344.623 C1348.358,344.009 1348.565,343.466 1348.907,342.64 C1348.945,342.548 1348.987,342.446 1349.067,342.255 C1349.131,342.1 1349.177,341.987 1349.223,341.876 C1349.947,340.102 1350.237,338.968 1350.237,337.435 C1350.237,337.005 1350.585,336.657 1351.015,336.657 C1351.444,336.657 1351.792,337.005 1351.792,337.435 C1351.792,339.206 1351.456,340.52 1350.662,342.464 C1350.616,342.578 1350.568,342.694 1350.503,342.85 C1350.424,343.042 1350.381,343.144 1350.344,343.234 C1350.018,344.024 1349.823,344.533 1349.643,345.096 C1349.209,346.455 1349.371,347.446 1350.1,348.768 C1350.23,349.004 1350.375,349.248 1350.582,349.584 C1350.621,349.647 1350.648,349.69 1350.715,349.799 C1350.783,349.908 1350.783,349.908 1350.852,350.018 C1350.965,350.201 1351.05,350.337 1351.133,350.475 C1353.372,354.174 1353.539,357.684 1352.41,361.735 C1354.686,363.062 1355.891,365.245 1356.022,367.845 C1356.022,371.7 1352.898,374.824 1349.043,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1349.043,297.184 C1352.898,297.184 1356.022,300.308 1356.022,304.163 C1356.021,306.734 1354.658,308.755 1352.592,310.149 C1351.414,314.341 1351.367,316.788 1353.551,320.727 C1353.63,320.858 1353.712,320.991 1353.823,321.169 C1353.74,321.036 1354.031,321.503 1354.095,321.607 C1354.315,321.963 1354.472,322.227 1354.616,322.49 C1355.536,324.159 1355.769,325.579 1355.192,327.385 C1354.996,327.999 1354.789,328.542 1354.447,329.368 C1354.409,329.46 1354.367,329.562 1354.287,329.753 C1354.223,329.908 1354.177,330.021 1354.131,330.132 C1353.407,331.906 1353.117,333.04 1353.117,334.573 C1353.117,335.003 1352.769,335.351 1352.339,335.351 C1351.91,335.351 1351.562,335.003 1351.562,334.573 C1351.562,332.802 1351.897,331.488 1352.691,329.544 C1352.738,329.43 1352.786,329.314 1352.851,329.158 C1352.93,328.966 1352.972,328.864 1353.01,328.774 C1353.336,327.984 1353.531,327.475 1353.711,326.912 C1354.145,325.553 1353.982,324.562 1353.254,323.24 C1353.124,323.004 1352.979,322.76 1352.771,322.424 C1352.733,322.361 1352.706,322.318 1352.638,322.209 C1352.571,322.1 1352.571,322.1 1352.502,321.99 C1352.388,321.807 1352.304,321.671 1352.221,321.533 C1350.005,317.942 1349.929,314.831 1350.799,310.893 C1349.524,311.153 1350.111,311.088 1349.043,311.142 C1347.923,311.085 1348.563,311.153 1347.131,310.861 C1346.159,314.8 1346.253,317.063 1348.284,320.727 C1348.364,320.858 1348.445,320.991 1348.556,321.169 C1348.474,321.036 1348.764,321.503 1348.828,321.607 C1349.048,321.963 1349.205,322.227 1349.35,322.49 C1350.269,324.159 1350.502,325.579 1349.925,327.385 C1349.729,327.999 1349.522,328.542 1349.18,329.368 C1349.142,329.46 1349.1,329.562 1349.02,329.753 C1348.956,329.908 1348.91,330.021 1348.864,330.132 C1348.14,331.906 1347.85,333.04 1347.85,334.573 C1347.85,335.003 1347.502,335.351 1347.072,335.351 C1346.643,335.351 1346.295,335.003 1346.295,334.573 C1346.295,332.802 1346.63,331.488 1347.424,329.544 C1347.471,329.43 1347.519,329.314 1347.584,329.158 C1347.663,328.966 1347.706,328.864 1347.743,328.774 C1348.069,327.984 1348.264,327.475 1348.444,326.912 C1348.878,325.553 1348.715,324.562 1347.987,323.24 C1347.857,323.004 1347.712,322.76 1347.505,322.424 C1347.466,322.361 1347.439,322.318 1347.371,322.209 C1347.304,322.1 1347.304,322.1 1347.235,321.99 C1347.121,321.807 1347.037,321.671 1346.954,321.533 C1344.715,317.834 1344.548,314.324 1345.677,310.273 C1343.401,308.946 1342.196,306.763 1342.065,304.163 C1342.065,300.308 1345.189,297.184 1349.043,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1363.001,374.824 C1359.147,374.824 1356.023,371.7 1356.023,367.845 C1356.024,365.274 1357.387,363.253 1359.453,361.859 C1360.631,357.667 1360.678,355.22 1358.494,351.281 C1358.414,351.15 1358.333,351.017 1358.222,350.839 C1358.305,350.972 1358.014,350.505 1357.95,350.401 C1357.73,350.045 1357.573,349.781 1357.428,349.518 C1356.509,347.849 1356.276,346.429 1356.853,344.623 C1357.049,344.009 1357.256,343.466 1357.598,342.64 C1357.636,342.548 1357.678,342.446 1357.758,342.255 C1357.822,342.1 1357.868,341.987 1357.914,341.876 C1358.638,340.102 1358.928,338.968 1358.928,337.435 C1358.928,337.005 1359.276,336.657 1359.706,336.657 C1360.135,336.657 1360.483,337.005 1360.483,337.435 C1360.483,339.206 1360.148,340.52 1359.354,342.464 C1359.307,342.578 1359.259,342.694 1359.194,342.85 C1359.115,343.042 1359.073,343.144 1359.035,343.234 C1358.709,344.024 1358.514,344.533 1358.334,345.096 C1357.9,346.455 1358.063,347.446 1358.791,348.768 C1358.921,349.004 1359.066,349.248 1359.273,349.584 C1359.312,349.647 1359.339,349.69 1359.406,349.799 C1359.474,349.908 1359.474,349.908 1359.543,350.018 C1359.657,350.201 1359.741,350.337 1359.824,350.475 C1362.04,354.066 1362.116,357.177 1361.246,361.115 C1362.521,360.855 1361.934,360.92 1363.001,360.866 C1364.122,360.923 1363.482,360.855 1364.914,361.147 C1365.886,357.208 1365.792,354.945 1363.761,351.281 C1363.681,351.15 1363.6,351.017 1363.489,350.839 C1363.571,350.972 1363.281,350.505 1363.217,350.401 C1362.997,350.045 1362.84,349.781 1362.695,349.518 C1361.776,347.849 1361.543,346.429 1362.12,344.623 C1362.316,344.009 1362.523,343.466 1362.865,342.64 C1362.903,342.548 1362.945,342.446 1363.025,342.255 C1363.089,342.1 1363.135,341.987 1363.181,341.876 C1363.905,340.102 1364.195,338.968 1364.195,337.435 C1364.195,337.005 1364.543,336.657 1364.973,336.657 C1365.402,336.657 1365.75,337.005 1365.75,337.435 C1365.75,339.206 1365.414,340.52 1364.62,342.464 C1364.574,342.578 1364.526,342.694 1364.461,342.85 C1364.381,343.042 1364.339,343.144 1364.302,343.234 C1363.976,344.024 1363.781,344.533 1363.601,345.096 C1363.167,346.455 1363.329,347.446 1364.057,348.768 C1364.188,349.004 1364.333,349.248 1364.54,349.584 C1364.579,349.647 1364.606,349.69 1364.673,349.799 C1364.741,349.908 1364.741,349.908 1364.81,350.018 C1364.923,350.201 1365.008,350.337 1365.091,350.475 C1367.33,354.174 1367.497,357.684 1366.368,361.735 C1368.644,363.062 1369.849,365.245 1369.98,367.845 C1369.98,371.7 1366.856,374.824 1363.001,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1363.001,297.184 C1366.856,297.184 1369.98,300.308 1369.98,304.163 C1369.979,306.734 1368.616,308.755 1366.55,310.149 C1365.371,314.341 1365.324,316.788 1367.509,320.727 C1367.589,320.858 1367.67,320.991 1367.781,321.169 C1367.698,321.036 1367.989,321.503 1368.052,321.607 C1368.272,321.963 1368.429,322.227 1368.574,322.49 C1369.494,324.159 1369.727,325.579 1369.15,327.385 C1368.954,327.999 1368.746,328.542 1368.405,329.368 C1368.367,329.46 1368.325,329.562 1368.245,329.753 C1368.181,329.908 1368.134,330.021 1368.089,330.132 C1367.365,331.906 1367.075,333.04 1367.075,334.573 C1367.075,335.003 1366.727,335.351 1366.297,335.351 C1365.868,335.351 1365.52,335.003 1365.519,334.573 C1365.52,332.802 1365.855,331.488 1366.649,329.544 C1366.696,329.43 1366.744,329.314 1366.808,329.158 C1366.888,328.966 1366.93,328.864 1366.968,328.774 C1367.294,327.984 1367.489,327.475 1367.669,326.912 C1368.103,325.553 1367.94,324.562 1367.212,323.24 C1367.082,323.004 1366.937,322.76 1366.729,322.424 C1366.691,322.361 1366.664,322.318 1366.596,322.209 C1366.529,322.1 1366.529,322.1 1366.46,321.99 C1366.346,321.807 1366.262,321.671 1366.179,321.533 C1363.963,317.942 1363.887,314.831 1364.757,310.893 C1363.482,311.153 1364.069,311.088 1363.001,311.142 C1361.88,311.085 1362.521,311.153 1361.089,310.861 C1360.117,314.8 1360.21,317.063 1362.242,320.727 C1362.322,320.858 1362.403,320.991 1362.514,321.169 C1362.431,321.036 1362.722,321.503 1362.786,321.607 C1363.006,321.963 1363.163,322.227 1363.307,322.49 C1364.227,324.159 1364.46,325.579 1363.883,327.385 C1363.687,327.999 1363.48,328.542 1363.138,329.368 C1363.1,329.46 1363.058,329.562 1362.978,329.753 C1362.914,329.908 1362.868,330.021 1362.822,330.132 C1362.098,331.906 1361.808,333.04 1361.808,334.573 C1361.808,335.003 1361.46,335.351 1361.03,335.351 C1360.601,335.351 1360.253,335.003 1360.253,334.573 C1360.253,332.802 1360.588,331.488 1361.382,329.544 C1361.429,329.43 1361.477,329.314 1361.542,329.158 C1361.621,328.966 1361.663,328.864 1361.701,328.774 C1362.027,327.984 1362.222,327.475 1362.402,326.912 C1362.836,325.553 1362.673,324.562 1361.945,323.24 C1361.815,323.004 1361.67,322.76 1361.463,322.424 C1361.424,322.361 1361.397,322.318 1361.329,322.209 C1361.262,322.1 1361.262,322.1 1361.193,321.99 C1361.079,321.807 1360.995,321.671 1360.912,321.533 C1358.673,317.834 1358.505,314.324 1359.635,310.273 C1357.359,308.946 1356.154,306.763 1356.022,304.163 C1356.022,300.308 1359.147,297.184 1363.001,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1376.959,374.824 C1373.105,374.824 1369.98,371.7 1369.98,367.845 C1369.982,365.274 1371.345,363.253 1373.41,361.859 C1374.589,357.667 1374.636,355.22 1372.452,351.281 C1372.372,351.15 1372.291,351.017 1372.18,350.839 C1372.262,350.972 1371.972,350.505 1371.908,350.401 C1371.688,350.045 1371.531,349.781 1371.386,349.518 C1370.467,347.849 1370.234,346.429 1370.811,344.623 C1371.007,344.009 1371.214,343.466 1371.556,342.64 C1371.594,342.548 1371.636,342.446 1371.716,342.255 C1371.78,342.1 1371.826,341.987 1371.872,341.876 C1372.596,340.102 1372.886,338.968 1372.886,337.435 C1372.886,337.005 1373.234,336.657 1373.664,336.657 C1374.093,336.657 1374.441,337.005 1374.441,337.435 C1374.441,339.206 1374.105,340.52 1373.312,342.464 C1373.265,342.578 1373.217,342.694 1373.152,342.85 C1373.073,343.042 1373.031,343.144 1372.993,343.234 C1372.667,344.024 1372.472,344.533 1372.292,345.096 C1371.858,346.455 1372.021,347.446 1372.749,348.768 C1372.879,349.004 1373.024,349.248 1373.231,349.584 C1373.27,349.647 1373.297,349.69 1373.365,349.799 C1373.432,349.908 1373.432,349.908 1373.501,350.018 C1373.615,350.201 1373.699,350.337 1373.782,350.475 C1375.998,354.066 1376.074,357.177 1375.204,361.115 C1376.479,360.855 1375.892,360.92 1376.959,360.866 C1378.08,360.923 1377.44,360.855 1378.872,361.147 C1379.844,357.208 1379.75,354.945 1377.719,351.281 C1377.639,351.15 1377.558,351.017 1377.447,350.839 C1377.529,350.972 1377.239,350.505 1377.175,350.401 C1376.955,350.045 1376.798,349.781 1376.653,349.518 C1375.734,347.849 1375.5,346.429 1376.078,344.623 C1376.273,344.009 1376.481,343.466 1376.823,342.64 C1376.86,342.548 1376.903,342.446 1376.982,342.255 C1377.046,342.1 1377.093,341.987 1377.139,341.876 C1377.863,340.102 1378.153,338.968 1378.153,337.435 C1378.153,337.005 1378.501,336.657 1378.93,336.657 C1379.36,336.657 1379.708,337.005 1379.708,337.435 C1379.708,339.206 1379.372,340.52 1378.578,342.464 C1378.532,342.578 1378.484,342.694 1378.419,342.85 C1378.339,343.042 1378.297,343.144 1378.26,343.234 C1377.933,344.024 1377.739,344.533 1377.559,345.096 C1377.125,346.455 1377.287,347.446 1378.015,348.768 C1378.146,349.004 1378.291,349.248 1378.498,349.584 C1378.537,349.647 1378.564,349.69 1378.631,349.799 C1378.699,349.908 1378.699,349.908 1378.768,350.018 C1378.881,350.201 1378.966,350.337 1379.049,350.475 C1381.288,354.174 1381.455,357.684 1380.326,361.735 C1382.602,363.062 1383.807,365.245 1383.938,367.845 C1383.938,371.7 1380.814,374.824 1376.959,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1376.959,297.184 C1380.814,297.184 1383.938,300.308 1383.938,304.163 C1383.937,306.734 1382.573,308.755 1380.508,310.149 C1379.329,314.341 1379.282,316.788 1381.467,320.727 C1381.546,320.858 1381.628,320.991 1381.739,321.169 C1381.656,321.036 1381.947,321.503 1382.01,321.607 C1382.23,321.963 1382.387,322.227 1382.532,322.49 C1383.452,324.159 1383.685,325.579 1383.108,327.385 C1382.912,327.999 1382.704,328.542 1382.363,329.368 C1382.325,329.46 1382.282,329.562 1382.203,329.753 C1382.139,329.908 1382.092,330.021 1382.047,330.132 C1381.323,331.906 1381.033,333.04 1381.033,334.573 C1381.033,335.003 1380.685,335.351 1380.255,335.351 C1379.826,335.351 1379.477,335.003 1379.477,334.573 C1379.477,332.802 1379.813,331.488 1380.607,329.544 C1380.654,329.43 1380.702,329.314 1380.766,329.158 C1380.846,328.966 1380.888,328.864 1380.926,328.774 C1381.252,327.984 1381.447,327.475 1381.627,326.912 C1382.061,325.553 1381.898,324.562 1381.17,323.24 C1381.04,323.004 1380.895,322.76 1380.687,322.424 C1380.648,322.361 1380.621,322.318 1380.554,322.209 C1380.486,322.1 1380.486,322.1 1380.418,321.99 C1380.304,321.807 1380.22,321.671 1380.137,321.533 C1377.921,317.942 1377.845,314.831 1378.714,310.893 C1377.44,311.153 1378.027,311.088 1376.959,311.142 C1375.839,311.085 1376.479,311.153 1375.047,310.861 C1374.075,314.8 1374.168,317.063 1376.2,320.727 C1376.28,320.858 1376.361,320.991 1376.472,321.169 C1376.389,321.036 1376.68,321.503 1376.744,321.607 C1376.964,321.963 1377.12,322.227 1377.265,322.49 C1378.185,324.159 1378.418,325.579 1377.841,327.385 C1377.645,327.999 1377.438,328.542 1377.096,329.368 C1377.058,329.46 1377.016,329.562 1376.936,329.753 C1376.872,329.908 1376.825,330.021 1376.78,330.132 C1376.056,331.906 1375.766,333.04 1375.766,334.573 C1375.766,335.003 1375.418,335.351 1374.988,335.351 C1374.559,335.351 1374.211,335.003 1374.211,334.573 C1374.211,332.802 1374.546,331.488 1375.34,329.544 C1375.387,329.43 1375.435,329.314 1375.5,329.158 C1375.579,328.966 1375.621,328.864 1375.659,328.774 C1375.985,327.984 1376.18,327.475 1376.36,326.912 C1376.794,325.553 1376.631,324.562 1375.903,323.24 C1375.773,323.004 1375.628,322.76 1375.42,322.424 C1375.382,322.361 1375.355,322.318 1375.287,322.209 C1375.22,322.1 1375.22,322.1 1375.151,321.99 C1375.037,321.807 1374.953,321.671 1374.87,321.533 C1372.63,317.834 1372.464,314.324 1373.593,310.273 C1371.316,308.946 1370.112,306.763 1369.98,304.163 C1369.98,300.308 1373.105,297.184 1376.959,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1390.917,374.824 C1387.063,374.824 1383.938,371.7 1383.938,367.845 C1383.94,365.274 1385.303,363.253 1387.368,361.859 C1388.547,357.667 1388.594,355.22 1386.41,351.281 C1386.33,351.15 1386.249,351.017 1386.138,350.839 C1386.22,350.972 1385.93,350.505 1385.866,350.401 C1385.646,350.045 1385.489,349.781 1385.344,349.518 C1384.425,347.849 1384.192,346.429 1384.769,344.623 C1384.964,344.009 1385.172,343.466 1385.514,342.64 C1385.552,342.548 1385.594,342.446 1385.674,342.255 C1385.738,342.1 1385.784,341.987 1385.83,341.876 C1386.554,340.102 1386.844,338.968 1386.844,337.435 C1386.844,337.005 1387.192,336.657 1387.622,336.657 C1388.051,336.657 1388.399,337.005 1388.399,337.435 C1388.399,339.206 1388.063,340.52 1387.269,342.464 C1387.223,342.578 1387.175,342.694 1387.11,342.85 C1387.031,343.042 1386.988,343.144 1386.951,343.234 C1386.625,344.024 1386.43,344.533 1386.25,345.096 C1385.816,346.455 1385.978,347.446 1386.707,348.768 C1386.837,349.004 1386.982,349.248 1387.189,349.584 C1387.228,349.647 1387.255,349.69 1387.322,349.799 C1387.39,349.908 1387.39,349.908 1387.459,350.018 C1387.572,350.201 1387.657,350.337 1387.74,350.475 C1389.956,354.066 1390.032,357.177 1389.162,361.115 C1390.437,360.855 1389.85,360.92 1390.917,360.866 C1392.038,360.923 1391.397,360.855 1392.83,361.147 C1393.802,357.208 1393.708,354.945 1391.677,351.281 C1391.597,351.15 1391.516,351.017 1391.405,350.839 C1391.487,350.972 1391.197,350.505 1391.133,350.401 C1390.913,350.045 1390.756,349.781 1390.611,349.518 C1389.692,347.849 1389.458,346.429 1390.035,344.623 C1390.231,344.009 1390.439,343.466 1390.781,342.64 C1390.818,342.548 1390.861,342.446 1390.94,342.255 C1391.004,342.1 1391.051,341.987 1391.096,341.876 C1391.821,340.102 1392.111,338.968 1392.111,337.435 C1392.111,337.005 1392.459,336.657 1392.888,336.657 C1393.318,336.657 1393.666,337.005 1393.666,337.435 C1393.666,339.206 1393.33,340.52 1392.536,342.464 C1392.49,342.578 1392.442,342.694 1392.377,342.85 C1392.297,343.042 1392.255,343.144 1392.218,343.234 C1391.891,344.024 1391.697,344.533 1391.517,345.096 C1391.083,346.455 1391.245,347.446 1391.973,348.768 C1392.103,349.004 1392.249,349.248 1392.456,349.584 C1392.495,349.647 1392.522,349.69 1392.589,349.799 C1392.657,349.908 1392.657,349.908 1392.726,350.018 C1392.839,350.201 1392.923,350.337 1393.007,350.475 C1395.246,354.174 1395.413,357.684 1394.283,361.735 C1396.56,363.062 1397.765,365.245 1397.896,367.845 C1397.896,371.7 1394.772,374.824 1390.917,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1390.917,297.184 C1394.772,297.184 1397.896,300.308 1397.896,304.163 C1397.894,306.734 1396.531,308.755 1394.466,310.149 C1393.287,314.341 1393.24,316.788 1395.424,320.727 C1395.504,320.858 1395.586,320.991 1395.696,321.169 C1395.614,321.036 1395.905,321.503 1395.968,321.607 C1396.188,321.963 1396.345,322.227 1396.49,322.49 C1397.41,324.159 1397.643,325.579 1397.066,327.385 C1396.87,327.999 1396.662,328.542 1396.321,329.368 C1396.283,329.46 1396.24,329.562 1396.161,329.753 C1396.097,329.908 1396.05,330.021 1396.005,330.132 C1395.28,331.906 1394.991,333.04 1394.991,334.573 C1394.991,335.003 1394.642,335.351 1394.213,335.351 C1393.783,335.351 1393.435,335.003 1393.435,334.573 C1393.435,332.802 1393.771,331.488 1394.565,329.544 C1394.612,329.43 1394.659,329.314 1394.724,329.158 C1394.804,328.966 1394.846,328.864 1394.884,328.774 C1395.21,327.984 1395.405,327.475 1395.585,326.912 C1396.019,325.553 1395.856,324.562 1395.128,323.24 C1394.998,323.004 1394.853,322.76 1394.645,322.424 C1394.606,322.361 1394.579,322.318 1394.512,322.209 C1394.444,322.1 1394.444,322.1 1394.375,321.99 C1394.262,321.807 1394.178,321.671 1394.095,321.533 C1391.879,317.942 1391.803,314.831 1392.672,310.893 C1391.397,311.153 1391.985,311.088 1390.917,311.142 C1389.796,311.085 1390.437,311.153 1389.005,310.861 C1388.033,314.8 1388.126,317.063 1390.158,320.727 C1390.237,320.858 1390.319,320.991 1390.43,321.169 C1390.347,321.036 1390.638,321.503 1390.701,321.607 C1390.921,321.963 1391.078,322.227 1391.223,322.49 C1392.143,324.159 1392.376,325.579 1391.799,327.385 C1391.603,327.999 1391.395,328.542 1391.054,329.368 C1391.016,329.46 1390.974,329.562 1390.894,329.753 C1390.83,329.908 1390.783,330.021 1390.738,330.132 C1390.014,331.906 1389.724,333.04 1389.724,334.573 C1389.724,335.003 1389.376,335.351 1388.946,335.351 C1388.517,335.351 1388.168,335.003 1388.168,334.573 C1388.168,332.802 1388.504,331.488 1389.298,329.544 C1389.345,329.43 1389.393,329.314 1389.457,329.158 C1389.537,328.966 1389.579,328.864 1389.617,328.774 C1389.943,327.984 1390.138,327.475 1390.318,326.912 C1390.752,325.553 1390.589,324.562 1389.861,323.24 C1389.731,323.004 1389.586,322.76 1389.378,322.424 C1389.339,322.361 1389.312,322.318 1389.245,322.209 C1389.177,322.1 1389.177,322.1 1389.109,321.99 C1388.995,321.807 1388.911,321.671 1388.828,321.533 C1386.588,317.834 1386.421,314.324 1387.551,310.273 C1385.274,308.946 1384.07,306.763 1383.938,304.163 C1383.938,300.308 1387.063,297.184 1390.917,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M762.811,374.824 C758.956,374.824 755.832,371.7 755.832,367.845 C755.834,365.274 757.197,363.253 759.262,361.859 C760.441,357.667 760.488,355.22 758.304,351.281 C758.224,351.15 758.142,351.017 758.032,350.839 C758.114,350.972 757.823,350.505 757.76,350.401 C757.54,350.045 757.383,349.781 757.238,349.518 C756.318,347.849 756.085,346.429 756.662,344.623 C756.858,344.009 757.066,343.466 757.407,342.64 C757.445,342.548 757.488,342.446 757.567,342.255 C757.631,342.1 757.678,341.987 757.723,341.876 C758.448,340.102 758.737,338.968 758.737,337.435 C758.737,337.005 759.086,336.657 759.515,336.657 C759.944,336.657 760.293,337.005 760.293,337.435 C760.293,339.206 759.957,340.52 759.163,342.464 C759.116,342.578 759.069,342.694 759.004,342.85 C758.924,343.042 758.882,343.144 758.844,343.234 C758.518,344.024 758.323,344.533 758.143,345.096 C757.709,346.455 757.872,347.446 758.6,348.768 C758.73,349.004 758.875,349.248 759.083,349.584 C759.122,349.647 759.149,349.69 759.216,349.799 C759.284,349.908 759.284,349.908 759.352,350.018 C759.466,350.201 759.55,350.337 759.633,350.475 C761.849,354.066 761.925,357.177 761.055,361.115 C762.331,360.855 761.743,360.92 762.811,360.866 C763.932,360.923 763.291,360.855 764.723,361.147 C765.695,357.208 765.602,354.945 763.57,351.281 C763.491,351.15 763.409,351.017 763.298,350.839 C763.381,350.972 763.09,350.505 763.026,350.401 C762.807,350.045 762.65,349.781 762.505,349.518 C761.585,347.849 761.352,346.429 761.929,344.623 C762.125,344.009 762.333,343.466 762.674,342.64 C762.712,342.548 762.754,342.446 762.834,342.255 C762.898,342.1 762.945,341.987 762.99,341.876 C763.714,340.102 764.004,338.968 764.004,337.435 C764.004,337.005 764.352,336.657 764.782,336.657 C765.211,336.657 765.559,337.005 765.559,337.435 C765.559,339.206 765.224,340.52 764.43,342.464 C764.383,342.578 764.335,342.694 764.271,342.85 C764.191,343.042 764.149,343.144 764.111,343.234 C763.785,344.024 763.59,344.533 763.41,345.096 C762.976,346.455 763.139,347.446 763.867,348.768 C763.997,349.004 764.142,349.248 764.35,349.584 C764.388,349.647 764.415,349.69 764.483,349.799 C764.55,349.908 764.55,349.908 764.619,350.018 C764.733,350.201 764.817,350.337 764.9,350.475 C767.139,354.174 767.307,357.684 766.177,361.735 C768.454,363.062 769.658,365.245 769.79,367.845 C769.79,371.7 766.665,374.824 762.811,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M762.811,297.184 C766.665,297.184 769.79,300.308 769.79,304.163 C769.788,306.734 768.425,308.755 766.36,310.149 C765.181,314.341 765.134,316.788 767.318,320.727 C767.398,320.858 767.479,320.991 767.59,321.169 C767.508,321.036 767.798,321.503 767.862,321.607 C768.082,321.963 768.239,322.227 768.384,322.49 C769.303,324.159 769.536,325.579 768.959,327.385 C768.763,327.999 768.556,328.542 768.214,329.368 C768.176,329.46 768.134,329.562 768.054,329.753 C767.99,329.908 767.944,330.021 767.898,330.132 C767.174,331.906 766.884,333.04 766.884,334.573 C766.884,335.003 766.536,335.351 766.106,335.351 C765.677,335.351 765.329,335.003 765.329,334.573 C765.329,332.802 765.665,331.488 766.459,329.544 C766.505,329.43 766.553,329.314 766.618,329.158 C766.698,328.966 766.74,328.864 766.777,328.774 C767.103,327.984 767.298,327.475 767.478,326.912 C767.912,325.553 767.75,324.562 767.021,323.24 C766.891,323.004 766.746,322.76 766.539,322.424 C766.5,322.361 766.473,322.318 766.406,322.209 C766.338,322.1 766.338,322.1 766.269,321.99 C766.156,321.807 766.071,321.671 765.988,321.533 C763.772,317.942 763.696,314.831 764.566,310.893 C763.291,311.153 763.878,311.088 762.811,311.142 C761.69,311.085 762.331,311.153 760.898,310.861 C759.926,314.8 760.02,317.063 762.051,320.727 C762.131,320.858 762.212,320.991 762.323,321.169 C762.241,321.036 762.531,321.503 762.595,321.607 C762.815,321.963 762.972,322.227 763.117,322.49 C764.036,324.159 764.27,325.579 763.693,327.385 C763.497,327.999 763.289,328.542 762.947,329.368 C762.91,329.46 762.867,329.562 762.788,329.753 C762.724,329.908 762.677,330.021 762.631,330.132 C761.907,331.906 761.617,333.04 761.617,334.573 C761.617,335.003 761.269,335.351 760.84,335.351 C760.41,335.351 760.062,335.003 760.062,334.573 C760.062,332.802 760.398,331.488 761.192,329.544 C761.238,329.43 761.286,329.314 761.351,329.158 C761.431,328.966 761.473,328.864 761.51,328.774 C761.836,327.984 762.031,327.475 762.211,326.912 C762.645,325.553 762.483,324.562 761.755,323.24 C761.625,323.004 761.479,322.76 761.272,322.424 C761.233,322.361 761.206,322.318 761.139,322.209 C761.071,322.1 761.071,322.1 761.002,321.99 C760.889,321.807 760.805,321.671 760.721,321.533 C758.482,317.834 758.315,314.324 759.444,310.273 C757.168,308.946 755.963,306.763 755.832,304.163 C755.832,300.308 758.956,297.184 762.811,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M776.769,374.824 C772.914,374.824 769.79,371.7 769.79,367.845 C769.792,365.274 771.154,363.253 773.22,361.859 C774.399,357.667 774.446,355.22 772.261,351.281 C772.182,351.15 772.1,351.017 771.989,350.839 C772.072,350.972 771.781,350.505 771.718,350.401 C771.498,350.045 771.341,349.781 771.196,349.518 C770.276,347.849 770.043,346.429 770.62,344.623 C770.816,344.009 771.024,343.466 771.365,342.64 C771.403,342.548 771.445,342.446 771.525,342.255 C771.589,342.1 771.636,341.987 771.681,341.876 C772.406,340.102 772.695,338.968 772.695,337.435 C772.695,337.005 773.043,336.657 773.473,336.657 C773.902,336.657 774.251,337.005 774.251,337.435 C774.251,339.206 773.915,340.52 773.121,342.464 C773.074,342.578 773.026,342.694 772.962,342.85 C772.882,343.042 772.84,343.144 772.802,343.234 C772.476,344.024 772.281,344.533 772.101,345.096 C771.667,346.455 771.83,347.446 772.558,348.768 C772.688,349.004 772.833,349.248 773.041,349.584 C773.08,349.647 773.107,349.69 773.174,349.799 C773.242,349.908 773.242,349.908 773.31,350.018 C773.424,350.201 773.508,350.337 773.591,350.475 C775.807,354.066 775.883,357.177 775.013,361.115 C776.288,360.855 775.701,360.92 776.769,360.866 C777.889,360.923 777.249,360.855 778.681,361.147 C779.653,357.208 779.56,354.945 777.528,351.281 C777.448,351.15 777.367,351.017 777.256,350.839 C777.339,350.972 777.048,350.505 776.984,350.401 C776.764,350.045 776.607,349.781 776.463,349.518 C775.543,347.849 775.31,346.429 775.887,344.623 C776.083,344.009 776.29,343.466 776.632,342.64 C776.67,342.548 776.712,342.446 776.792,342.255 C776.856,342.1 776.902,341.987 776.948,341.876 C777.672,340.102 777.962,338.968 777.962,337.435 C777.962,337.005 778.31,336.657 778.74,336.657 C779.169,336.657 779.517,337.005 779.517,337.435 C779.517,339.206 779.182,340.52 778.388,342.464 C778.341,342.578 778.293,342.694 778.228,342.85 C778.149,343.042 778.107,343.144 778.069,343.234 C777.743,344.024 777.548,344.533 777.368,345.096 C776.934,346.455 777.097,347.446 777.825,348.768 C777.955,349.004 778.1,349.248 778.307,349.584 C778.346,349.647 778.373,349.69 778.441,349.799 C778.508,349.908 778.508,349.908 778.577,350.018 C778.691,350.201 778.775,350.337 778.858,350.475 C781.097,354.174 781.264,357.684 780.135,361.735 C782.411,363.062 783.616,365.245 783.747,367.845 C783.747,371.7 780.623,374.824 776.769,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M776.769,297.184 C780.623,297.184 783.748,300.308 783.748,304.163 C783.746,306.734 782.383,308.755 780.318,310.149 C779.139,314.341 779.092,316.788 781.276,320.727 C781.356,320.858 781.437,320.991 781.548,321.169 C781.466,321.036 781.756,321.503 781.82,321.607 C782.04,321.963 782.197,322.227 782.342,322.49 C783.261,324.159 783.494,325.579 782.917,327.385 C782.721,327.999 782.514,328.542 782.172,329.368 C782.134,329.46 782.092,329.562 782.012,329.753 C781.948,329.908 781.902,330.021 781.856,330.132 C781.132,331.906 780.842,333.04 780.842,334.573 C780.842,335.003 780.494,335.351 780.064,335.351 C779.635,335.351 779.287,335.003 779.287,334.573 C779.287,332.802 779.622,331.488 780.417,329.544 C780.463,329.43 780.511,329.314 780.576,329.158 C780.655,328.966 780.698,328.864 780.735,328.774 C781.061,327.984 781.256,327.475 781.436,326.912 C781.87,325.553 781.708,324.562 780.979,323.24 C780.849,323.004 780.704,322.76 780.497,322.424 C780.458,322.361 780.431,322.318 780.364,322.209 C780.296,322.1 780.296,322.1 780.227,321.99 C780.113,321.807 780.029,321.671 779.946,321.533 C777.73,317.942 777.654,314.831 778.524,310.893 C777.249,311.153 777.836,311.088 776.769,311.142 C775.648,311.085 776.288,311.153 774.856,310.861 C773.884,314.8 773.978,317.063 776.009,320.727 C776.089,320.858 776.17,320.991 776.281,321.169 C776.199,321.036 776.489,321.503 776.553,321.607 C776.773,321.963 776.93,322.227 777.075,322.49 C777.994,324.159 778.227,325.579 777.651,327.385 C777.455,327.999 777.247,328.542 776.905,329.368 C776.867,329.46 776.825,329.562 776.745,329.753 C776.682,329.908 776.635,330.021 776.589,330.132 C775.865,331.906 775.575,333.04 775.575,334.573 C775.575,335.003 775.227,335.351 774.797,335.351 C774.368,335.351 774.02,335.003 774.02,334.573 C774.02,332.802 774.356,331.488 775.15,329.544 C775.196,329.43 775.244,329.314 775.309,329.158 C775.389,328.966 775.431,328.864 775.468,328.774 C775.794,327.984 775.989,327.475 776.169,326.912 C776.603,325.553 776.441,324.562 775.713,323.24 C775.582,323.004 775.437,322.76 775.23,322.424 C775.191,322.361 775.164,322.318 775.097,322.209 C775.029,322.1 775.029,322.1 774.96,321.99 C774.847,321.807 774.762,321.671 774.679,321.533 C772.44,317.834 772.273,314.324 773.402,310.273 C771.126,308.946 769.921,306.763 769.79,304.163 C769.79,300.308 772.914,297.184 776.769,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M790.727,374.824 C786.872,374.824 783.748,371.7 783.748,367.845 C783.749,365.274 785.112,363.253 787.178,361.859 C788.357,357.667 788.404,355.22 786.219,351.281 C786.14,351.15 786.058,351.017 785.947,350.839 C786.03,350.972 785.739,350.505 785.675,350.401 C785.456,350.045 785.299,349.781 785.154,349.518 C784.234,347.849 784.001,346.429 784.578,344.623 C784.774,344.009 784.982,343.466 785.323,342.64 C785.361,342.548 785.403,342.446 785.483,342.255 C785.547,342.1 785.594,341.987 785.639,341.876 C786.363,340.102 786.653,338.968 786.653,337.435 C786.653,337.005 787.001,336.657 787.431,336.657 C787.86,336.657 788.208,337.005 788.209,337.435 C788.208,339.206 787.873,340.52 787.079,342.464 C787.032,342.578 786.984,342.694 786.92,342.85 C786.84,343.042 786.798,343.144 786.76,343.234 C786.434,344.024 786.239,344.533 786.059,345.096 C785.625,346.455 785.788,347.446 786.516,348.768 C786.646,349.004 786.791,349.248 786.999,349.584 C787.038,349.647 787.065,349.69 787.132,349.799 C787.199,349.908 787.199,349.908 787.268,350.018 C787.382,350.201 787.466,350.337 787.549,350.475 C789.765,354.066 789.841,357.177 788.971,361.115 C790.246,360.855 789.659,360.92 790.727,360.866 C791.847,360.923 791.207,360.855 792.639,361.147 C793.611,357.208 793.518,354.945 791.486,351.281 C791.406,351.15 791.325,351.017 791.214,350.839 C791.297,350.972 791.006,350.505 790.942,350.401 C790.722,350.045 790.565,349.781 790.42,349.518 C789.501,347.849 789.268,346.429 789.845,344.623 C790.041,344.009 790.248,343.466 790.59,342.64 C790.628,342.548 790.67,342.446 790.75,342.255 C790.814,342.1 790.86,341.987 790.906,341.876 C791.63,340.102 791.92,338.968 791.92,337.435 C791.92,337.005 792.268,336.657 792.698,336.657 C793.127,336.657 793.475,337.005 793.475,337.435 C793.475,339.206 793.14,340.52 792.346,342.464 C792.299,342.578 792.251,342.694 792.186,342.85 C792.107,343.042 792.065,343.144 792.027,343.234 C791.701,344.024 791.506,344.533 791.326,345.096 C790.892,346.455 791.055,347.446 791.783,348.768 C791.913,349.004 792.058,349.248 792.265,349.584 C792.304,349.647 792.331,349.69 792.399,349.799 C792.466,349.908 792.466,349.908 792.535,350.018 C792.649,350.201 792.733,350.337 792.816,350.475 C795.055,354.174 795.222,357.684 794.093,361.735 C796.369,363.062 797.574,365.245 797.705,367.845 C797.705,371.7 794.581,374.824 790.727,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M790.727,297.184 C794.581,297.184 797.706,300.308 797.706,304.163 C797.704,306.734 796.341,308.755 794.276,310.149 C793.097,314.341 793.05,316.788 795.234,320.727 C795.314,320.858 795.395,320.991 795.506,321.169 C795.423,321.036 795.714,321.503 795.778,321.607 C795.998,321.963 796.155,322.227 796.3,322.49 C797.219,324.159 797.452,325.579 796.875,327.385 C796.679,327.999 796.472,328.542 796.13,329.368 C796.092,329.46 796.05,329.562 795.97,329.753 C795.906,329.908 795.86,330.021 795.814,330.132 C795.09,331.906 794.8,333.04 794.8,334.573 C794.8,335.003 794.452,335.351 794.022,335.351 C793.593,335.351 793.245,335.003 793.245,334.573 C793.245,332.802 793.58,331.488 794.374,329.544 C794.421,329.43 794.469,329.314 794.534,329.158 C794.613,328.966 794.655,328.864 794.693,328.774 C795.019,327.984 795.214,327.475 795.394,326.912 C795.828,325.553 795.665,324.562 794.937,323.24 C794.807,323.004 794.662,322.76 794.455,322.424 C794.416,322.361 794.389,322.318 794.321,322.209 C794.254,322.1 794.254,322.1 794.185,321.99 C794.071,321.807 793.987,321.671 793.904,321.533 C791.688,317.942 791.612,314.831 792.482,310.893 C791.207,311.153 791.794,311.088 790.727,311.142 C789.606,311.085 790.246,311.153 788.814,310.861 C787.842,314.8 787.936,317.063 789.967,320.727 C790.047,320.858 790.128,320.991 790.239,321.169 C790.157,321.036 790.447,321.503 790.511,321.607 C790.731,321.963 790.888,322.227 791.033,322.49 C791.952,324.159 792.185,325.579 791.608,327.385 C791.412,327.999 791.205,328.542 790.863,329.368 C790.825,329.46 790.783,329.562 790.703,329.753 C790.639,329.908 790.593,330.021 790.547,330.132 C789.823,331.906 789.533,333.04 789.533,334.573 C789.533,335.003 789.185,335.351 788.755,335.351 C788.326,335.351 787.978,335.003 787.978,334.573 C787.978,332.802 788.314,331.488 789.108,329.544 C789.154,329.43 789.202,329.314 789.267,329.158 C789.346,328.966 789.389,328.864 789.426,328.774 C789.752,327.984 789.947,327.475 790.127,326.912 C790.561,325.553 790.399,324.562 789.67,323.24 C789.54,323.004 789.395,322.76 789.188,322.424 C789.149,322.361 789.122,322.318 789.055,322.209 C788.987,322.1 788.987,322.1 788.918,321.99 C788.805,321.807 788.72,321.671 788.637,321.533 C786.398,317.834 786.231,314.324 787.36,310.273 C785.084,308.946 783.879,306.763 783.748,304.163 C783.748,300.308 786.872,297.184 790.727,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M804.684,374.824 C800.83,374.824 797.706,371.7 797.706,367.845 C797.707,365.274 799.07,363.253 801.136,361.859 C802.314,357.667 802.361,355.22 800.177,351.281 C800.098,351.15 800.016,351.017 799.905,350.839 C799.988,350.972 799.697,350.505 799.633,350.401 C799.414,350.045 799.257,349.781 799.112,349.518 C798.192,347.849 797.959,346.429 798.536,344.623 C798.732,344.009 798.94,343.466 799.281,342.64 C799.319,342.548 799.361,342.446 799.441,342.255 C799.505,342.1 799.552,341.987 799.597,341.876 C800.321,340.102 800.611,338.968 800.611,337.435 C800.611,337.005 800.959,336.657 801.389,336.657 C801.818,336.657 802.166,337.005 802.166,337.435 C802.166,339.206 801.831,340.52 801.037,342.464 C800.99,342.578 800.942,342.694 800.878,342.85 C800.798,343.042 800.756,343.144 800.718,343.234 C800.392,344.024 800.197,344.533 800.017,345.096 C799.583,346.455 799.746,347.446 800.474,348.768 C800.604,349.004 800.749,349.248 800.957,349.584 C800.995,349.647 801.022,349.69 801.09,349.799 C801.157,349.908 801.157,349.908 801.226,350.018 C801.34,350.201 801.424,350.337 801.507,350.475 C803.723,354.066 803.799,357.177 802.929,361.115 C804.204,360.855 803.617,360.92 804.684,360.866 C805.805,360.923 805.165,360.855 806.597,361.147 C807.569,357.208 807.475,354.945 805.444,351.281 C805.364,351.15 805.283,351.017 805.172,350.839 C805.254,350.972 804.964,350.505 804.9,350.401 C804.68,350.045 804.523,349.781 804.378,349.518 C803.459,347.849 803.226,346.429 803.803,344.623 C803.999,344.009 804.206,343.466 804.548,342.64 C804.586,342.548 804.628,342.446 804.708,342.255 C804.772,342.1 804.818,341.987 804.864,341.876 C805.588,340.102 805.878,338.968 805.878,337.435 C805.878,337.005 806.226,336.657 806.656,336.657 C807.085,336.657 807.433,337.005 807.433,337.435 C807.433,339.206 807.097,340.52 806.303,342.464 C806.257,342.578 806.209,342.694 806.144,342.85 C806.065,343.042 806.022,343.144 805.985,343.234 C805.659,344.024 805.464,344.533 805.284,345.096 C804.85,346.455 805.013,347.446 805.741,348.768 C805.871,349.004 806.016,349.248 806.223,349.584 C806.262,349.647 806.289,349.69 806.356,349.799 C806.424,349.908 806.424,349.908 806.493,350.018 C806.607,350.201 806.691,350.337 806.774,350.475 C809.013,354.174 809.18,357.684 808.051,361.735 C810.327,363.062 811.532,365.245 811.663,367.845 C811.663,371.7 808.539,374.824 804.684,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M804.685,297.184 C808.539,297.184 811.663,300.308 811.663,304.163 C811.662,306.734 810.299,308.755 808.233,310.149 C807.055,314.341 807.008,316.788 809.192,320.727 C809.272,320.858 809.353,320.991 809.464,321.169 C809.381,321.036 809.672,321.503 809.736,321.607 C809.956,321.963 810.113,322.227 810.258,322.49 C811.177,324.159 811.41,325.579 810.833,327.385 C810.637,327.999 810.43,328.542 810.088,329.368 C810.05,329.46 810.008,329.562 809.928,329.753 C809.864,329.908 809.818,330.021 809.772,330.132 C809.048,331.906 808.758,333.04 808.758,334.573 C808.758,335.003 808.41,335.351 807.98,335.351 C807.551,335.351 807.203,335.003 807.203,334.573 C807.203,332.802 807.538,331.488 808.332,329.544 C808.379,329.43 808.427,329.314 808.492,329.158 C808.571,328.966 808.613,328.864 808.651,328.774 C808.977,327.984 809.172,327.475 809.352,326.912 C809.786,325.553 809.623,324.562 808.895,323.24 C808.765,323.004 808.62,322.76 808.412,322.424 C808.374,322.361 808.347,322.318 808.279,322.209 C808.212,322.1 808.212,322.1 808.143,321.99 C808.029,321.807 807.945,321.671 807.862,321.533 C805.646,317.942 805.57,314.831 806.44,310.893 C805.165,311.153 805.752,311.088 804.685,311.142 C803.564,311.085 804.204,311.153 802.772,310.861 C801.8,314.8 801.893,317.063 803.925,320.727 C804.005,320.858 804.086,320.991 804.197,321.169 C804.115,321.036 804.405,321.503 804.469,321.607 C804.689,321.963 804.846,322.227 804.991,322.49 C805.91,324.159 806.143,325.579 805.566,327.385 C805.37,327.999 805.163,328.542 804.821,329.368 C804.783,329.46 804.741,329.562 804.661,329.753 C804.597,329.908 804.551,330.021 804.505,330.132 C803.781,331.906 803.491,333.04 803.491,334.573 C803.491,335.003 803.143,335.351 802.713,335.351 C802.284,335.351 801.936,335.003 801.936,334.573 C801.936,332.802 802.271,331.488 803.065,329.544 C803.112,329.43 803.16,329.314 803.225,329.158 C803.304,328.966 803.346,328.864 803.384,328.774 C803.71,327.984 803.905,327.475 804.085,326.912 C804.519,325.553 804.356,324.562 803.628,323.24 C803.498,323.004 803.353,322.76 803.146,322.424 C803.107,322.361 803.08,322.318 803.013,322.209 C802.945,322.1 802.945,322.1 802.876,321.99 C802.762,321.807 802.678,321.671 802.595,321.533 C800.356,317.834 800.189,314.324 801.318,310.273 C799.042,308.946 797.837,306.763 797.706,304.163 C797.706,300.308 800.83,297.184 804.685,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M818.642,374.824 C814.788,374.824 811.664,371.7 811.664,367.845 C811.665,365.274 813.028,363.253 815.093,361.859 C816.272,357.667 816.319,355.22 814.135,351.281 C814.055,351.15 813.974,351.017 813.863,350.839 C813.945,350.972 813.655,350.505 813.591,350.401 C813.371,350.045 813.214,349.781 813.069,349.518 C812.15,347.849 811.917,346.429 812.494,344.623 C812.69,344.009 812.897,343.466 813.239,342.64 C813.277,342.548 813.319,342.446 813.399,342.255 C813.463,342.1 813.509,341.987 813.555,341.876 C814.279,340.102 814.569,338.968 814.569,337.435 C814.569,337.005 814.917,336.657 815.347,336.657 C815.776,336.657 816.124,337.005 816.124,337.435 C816.124,339.206 815.789,340.52 814.995,342.464 C814.948,342.578 814.9,342.694 814.835,342.85 C814.756,343.042 814.714,343.144 814.676,343.234 C814.35,344.024 814.155,344.533 813.975,345.096 C813.541,346.455 813.704,347.446 814.432,348.768 C814.562,349.004 814.707,349.248 814.914,349.584 C814.953,349.647 814.98,349.69 815.048,349.799 C815.115,349.908 815.115,349.908 815.184,350.018 C815.298,350.201 815.382,350.337 815.465,350.475 C817.681,354.066 817.757,357.177 816.887,361.115 C818.162,360.855 817.575,360.92 818.642,360.866 C819.763,360.923 819.123,360.855 820.555,361.147 C821.527,357.208 821.433,354.945 819.402,351.281 C819.322,351.15 819.241,351.017 819.13,350.839 C819.212,350.972 818.922,350.505 818.858,350.401 C818.638,350.045 818.481,349.781 818.336,349.518 C817.417,347.849 817.184,346.429 817.761,344.623 C817.956,344.009 818.164,343.466 818.506,342.64 C818.544,342.548 818.586,342.446 818.666,342.255 C818.729,342.1 818.776,341.987 818.822,341.876 C819.546,340.102 819.836,338.968 819.836,337.435 C819.836,337.005 820.184,336.657 820.614,336.657 C821.043,336.657 821.391,337.005 821.391,337.435 C821.391,339.206 821.055,340.52 820.261,342.464 C820.215,342.578 820.167,342.694 820.102,342.85 C820.022,343.042 819.98,343.144 819.943,343.234 C819.617,344.024 819.422,344.533 819.242,345.096 C818.808,346.455 818.97,347.446 819.698,348.768 C819.829,349.004 819.974,349.248 820.181,349.584 C820.22,349.647 820.247,349.69 820.314,349.799 C820.382,349.908 820.382,349.908 820.451,350.018 C820.564,350.201 820.649,350.337 820.732,350.475 C822.971,354.174 823.138,357.684 822.009,361.735 C824.285,363.062 825.49,365.245 825.621,367.845 C825.621,371.7 822.497,374.824 818.642,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M818.642,297.184 C822.497,297.184 825.621,300.308 825.621,304.163 C825.62,306.734 824.257,308.755 822.191,310.149 C821.012,314.341 820.965,316.788 823.15,320.727 C823.229,320.858 823.311,320.991 823.422,321.169 C823.339,321.036 823.63,321.503 823.693,321.607 C823.913,321.963 824.07,322.227 824.215,322.49 C825.135,324.159 825.368,325.579 824.791,327.385 C824.595,327.999 824.387,328.542 824.046,329.368 C824.008,329.46 823.966,329.562 823.886,329.753 C823.822,329.908 823.775,330.021 823.73,330.132 C823.006,331.906 822.716,333.04 822.716,334.573 C822.716,335.003 822.368,335.351 821.938,335.351 C821.509,335.351 821.16,335.003 821.16,334.573 C821.16,332.802 821.496,331.488 822.29,329.544 C822.337,329.43 822.385,329.314 822.449,329.158 C822.529,328.966 822.571,328.864 822.609,328.774 C822.935,327.984 823.13,327.475 823.31,326.912 C823.744,325.553 823.581,324.562 822.853,323.24 C822.723,323.004 822.578,322.76 822.37,322.424 C822.331,322.361 822.305,322.318 822.237,322.209 C822.169,322.1 822.169,322.1 822.101,321.99 C821.987,321.807 821.903,321.671 821.82,321.533 C819.604,317.942 819.528,314.831 820.398,310.893 C819.123,311.153 819.71,311.088 818.642,311.142 C817.522,311.085 818.162,311.153 816.73,310.861 C815.758,314.8 815.851,317.063 817.883,320.727 C817.963,320.858 818.044,320.991 818.155,321.169 C818.072,321.036 818.363,321.503 818.427,321.607 C818.647,321.963 818.804,322.227 818.948,322.49 C819.868,324.159 820.101,325.579 819.524,327.385 C819.328,327.999 819.121,328.542 818.779,329.368 C818.741,329.46 818.699,329.562 818.619,329.753 C818.555,329.908 818.509,330.021 818.463,330.132 C817.739,331.906 817.449,333.04 817.449,334.573 C817.449,335.003 817.101,335.351 816.671,335.351 C816.242,335.351 815.894,335.003 815.894,334.573 C815.894,332.802 816.229,331.488 817.023,329.544 C817.07,329.43 817.118,329.314 817.183,329.158 C817.262,328.966 817.304,328.864 817.342,328.774 C817.668,327.984 817.863,327.475 818.043,326.912 C818.477,325.553 818.314,324.562 817.586,323.24 C817.456,323.004 817.311,322.76 817.104,322.424 C817.065,322.361 817.038,322.318 816.97,322.209 C816.903,322.1 816.903,322.1 816.834,321.99 C816.72,321.807 816.636,321.671 816.553,321.533 C814.314,317.834 814.147,314.324 815.276,310.273 C812.999,308.946 811.795,306.763 811.663,304.163 C811.663,300.308 814.788,297.184 818.642,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M832.6,374.824 C828.746,374.824 825.621,371.7 825.621,367.845 C825.623,365.274 826.986,363.253 829.051,361.859 C830.23,357.667 830.277,355.22 828.093,351.281 C828.013,351.15 827.932,351.017 827.821,350.839 C827.903,350.972 827.613,350.505 827.549,350.401 C827.329,350.045 827.172,349.781 827.027,349.518 C826.108,347.849 825.875,346.429 826.452,344.623 C826.648,344.009 826.855,343.466 827.197,342.64 C827.235,342.548 827.277,342.446 827.357,342.255 C827.421,342.1 827.467,341.987 827.513,341.876 C828.237,340.102 828.527,338.968 828.527,337.435 C828.527,337.005 828.875,336.657 829.305,336.657 C829.734,336.657 830.082,337.005 830.082,337.435 C830.082,339.206 829.746,340.52 828.952,342.464 C828.906,342.578 828.858,342.694 828.793,342.85 C828.714,343.042 828.671,343.144 828.634,343.234 C828.308,344.024 828.113,344.533 827.933,345.096 C827.499,346.455 827.661,347.446 828.39,348.768 C828.52,349.004 828.665,349.248 828.872,349.584 C828.911,349.647 828.938,349.69 829.005,349.799 C829.073,349.908 829.073,349.908 829.142,350.018 C829.255,350.201 829.34,350.337 829.423,350.475 C831.639,354.066 831.715,357.177 830.845,361.115 C832.12,360.855 831.533,360.92 832.6,360.866 C833.721,360.923 833.081,360.855 834.513,361.147 C835.485,357.208 835.391,354.945 833.36,351.281 C833.28,351.15 833.199,351.017 833.088,350.839 C833.17,350.972 832.88,350.505 832.816,350.401 C832.596,350.045 832.439,349.781 832.294,349.518 C831.375,347.849 831.141,346.429 831.718,344.623 C831.914,344.009 832.122,343.466 832.464,342.64 C832.501,342.548 832.544,342.446 832.623,342.255 C832.687,342.1 832.734,341.987 832.78,341.876 C833.504,340.102 833.794,338.968 833.794,337.435 C833.794,337.005 834.142,336.657 834.571,336.657 C835.001,336.657 835.349,337.005 835.349,337.435 C835.349,339.206 835.013,340.52 834.219,342.464 C834.173,342.578 834.125,342.694 834.06,342.85 C833.98,343.042 833.938,343.144 833.901,343.234 C833.575,344.024 833.38,344.533 833.2,345.096 C832.766,346.455 832.928,347.446 833.656,348.768 C833.786,349.004 833.932,349.248 834.139,349.584 C834.178,349.647 834.205,349.69 834.272,349.799 C834.34,349.908 834.34,349.908 834.409,350.018 C834.522,350.201 834.607,350.337 834.69,350.475 C836.929,354.174 837.096,357.684 835.966,361.735 C838.243,363.062 839.448,365.245 839.579,367.845 C839.579,371.7 836.455,374.824 832.6,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M832.6,297.184 C836.455,297.184 839.579,300.308 839.579,304.163 C839.578,306.734 838.214,308.755 836.149,310.149 C834.97,314.341 834.923,316.788 837.107,320.727 C837.187,320.858 837.269,320.991 837.38,321.169 C837.297,321.036 837.588,321.503 837.651,321.607 C837.871,321.963 838.028,322.227 838.173,322.49 C839.093,324.159 839.326,325.579 838.749,327.385 C838.553,327.999 838.345,328.542 838.004,329.368 C837.966,329.46 837.924,329.562 837.844,329.753 C837.78,329.908 837.733,330.021 837.688,330.132 C836.964,331.906 836.674,333.04 836.674,334.573 C836.674,335.003 836.326,335.351 835.896,335.351 C835.467,335.351 835.118,335.003 835.118,334.573 C835.118,332.802 835.454,331.488 836.248,329.544 C836.295,329.43 836.342,329.314 836.407,329.158 C836.487,328.966 836.529,328.864 836.567,328.774 C836.893,327.984 837.088,327.475 837.268,326.912 C837.702,325.553 837.539,324.562 836.811,323.24 C836.681,323.004 836.536,322.76 836.328,322.424 C836.289,322.361 836.262,322.318 836.195,322.209 C836.127,322.1 836.127,322.1 836.059,321.99 C835.945,321.807 835.861,321.671 835.778,321.533 C833.562,317.942 833.486,314.831 834.356,310.893 C833.081,311.153 833.668,311.088 832.6,311.142 C831.479,311.085 832.12,311.153 830.688,310.861 C829.716,314.8 829.809,317.063 831.841,320.727 C831.92,320.858 832.002,320.991 832.113,321.169 C832.03,321.036 832.321,321.503 832.385,321.607 C832.604,321.963 832.761,322.227 832.906,322.49 C833.826,324.159 834.059,325.579 833.482,327.385 C833.286,327.999 833.078,328.542 832.737,329.368 C832.699,329.46 832.657,329.562 832.577,329.753 C832.513,329.908 832.466,330.021 832.421,330.132 C831.697,331.906 831.407,333.04 831.407,334.573 C831.407,335.003 831.059,335.351 830.629,335.351 C830.2,335.351 829.852,335.003 829.852,334.573 C829.852,332.802 830.187,331.488 830.981,329.544 C831.028,329.43 831.076,329.314 831.141,329.158 C831.22,328.966 831.262,328.864 831.3,328.774 C831.626,327.984 831.821,327.475 832.001,326.912 C832.435,325.553 832.272,324.562 831.544,323.24 C831.414,323.004 831.269,322.76 831.061,322.424 C831.023,322.361 830.996,322.318 830.928,322.209 C830.861,322.1 830.861,322.1 830.792,321.99 C830.678,321.807 830.594,321.671 830.511,321.533 C828.271,317.834 828.104,314.324 829.234,310.273 C826.957,308.946 825.753,306.763 825.621,304.163 C825.621,300.308 828.746,297.184 832.6,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M846.558,374.824 C842.704,374.824 839.579,371.7 839.579,367.845 C839.581,365.274 840.944,363.253 843.009,361.859 C844.188,357.667 844.235,355.22 842.051,351.281 C841.971,351.15 841.89,351.017 841.779,350.839 C841.861,350.972 841.571,350.505 841.507,350.401 C841.287,350.045 841.13,349.781 840.985,349.518 C840.066,347.849 839.833,346.429 840.41,344.623 C840.606,344.009 840.813,343.466 841.155,342.64 C841.193,342.548 841.235,342.446 841.315,342.255 C841.378,342.1 841.425,341.987 841.471,341.876 C842.195,340.102 842.485,338.968 842.485,337.435 C842.485,337.005 842.833,336.657 843.263,336.657 C843.692,336.657 844.04,337.005 844.04,337.435 C844.04,339.206 843.704,340.52 842.91,342.464 C842.864,342.578 842.816,342.694 842.751,342.85 C842.671,343.042 842.629,343.144 842.592,343.234 C842.266,344.024 842.071,344.533 841.891,345.096 C841.457,346.455 841.619,347.446 842.348,348.768 C842.478,349.004 842.623,349.248 842.83,349.584 C842.869,349.647 842.896,349.69 842.963,349.799 C843.031,349.908 843.031,349.908 843.1,350.018 C843.213,350.201 843.298,350.337 843.381,350.475 C845.597,354.066 845.673,357.177 844.803,361.115 C846.078,360.855 845.491,360.92 846.558,360.866 C847.679,360.923 847.038,360.855 848.471,361.147 C849.443,357.208 849.349,354.945 847.318,351.281 C847.238,351.15 847.157,351.017 847.046,350.839 C847.128,350.972 846.838,350.505 846.774,350.401 C846.554,350.045 846.397,349.781 846.252,349.518 C845.333,347.849 845.099,346.429 845.676,344.623 C845.872,344.009 846.08,343.466 846.422,342.64 C846.459,342.548 846.502,342.446 846.581,342.255 C846.645,342.1 846.692,341.987 846.737,341.876 C847.462,340.102 847.752,338.968 847.752,337.435 C847.752,337.005 848.1,336.657 848.529,336.657 C848.959,336.657 849.307,337.005 849.307,337.435 C849.307,339.206 848.971,340.52 848.177,342.464 C848.131,342.578 848.083,342.694 848.018,342.85 C847.938,343.042 847.896,343.144 847.859,343.234 C847.532,344.024 847.338,344.533 847.158,345.096 C846.724,346.455 846.886,347.446 847.614,348.768 C847.744,349.004 847.89,349.248 848.097,349.584 C848.136,349.647 848.163,349.69 848.23,349.799 C848.298,349.908 848.298,349.908 848.367,350.018 C848.48,350.201 848.564,350.337 848.648,350.475 C850.887,354.174 851.054,357.684 849.924,361.735 C852.201,363.062 853.406,365.245 853.537,367.845 C853.537,371.7 850.413,374.824 846.558,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M846.558,297.184 C850.413,297.184 853.537,300.308 853.537,304.163 C853.535,306.734 852.172,308.755 850.107,310.149 C848.928,314.341 848.881,316.788 851.065,320.727 C851.145,320.858 851.227,320.991 851.337,321.169 C851.255,321.036 851.545,321.503 851.609,321.607 C851.829,321.963 851.986,322.227 852.131,322.49 C853.051,324.159 853.284,325.579 852.707,327.385 C852.511,327.999 852.303,328.542 851.962,329.368 C851.924,329.46 851.881,329.562 851.802,329.753 C851.738,329.908 851.691,330.021 851.646,330.132 C850.921,331.906 850.632,333.04 850.632,334.573 C850.632,335.003 850.283,335.351 849.854,335.351 C849.424,335.351 849.076,335.003 849.076,334.573 C849.076,332.802 849.412,331.488 850.206,329.544 C850.253,329.43 850.3,329.314 850.365,329.158 C850.445,328.966 850.487,328.864 850.524,328.774 C850.851,327.984 851.046,327.475 851.226,326.912 C851.66,325.553 851.497,324.562 850.769,323.24 C850.639,323.004 850.494,322.76 850.286,322.424 C850.247,322.361 850.22,322.318 850.153,322.209 C850.085,322.1 850.085,322.1 850.016,321.99 C849.903,321.807 849.819,321.671 849.736,321.533 C847.52,317.942 847.444,314.831 848.313,310.893 C847.038,311.153 847.626,311.088 846.558,311.142 C845.437,311.085 846.078,311.153 844.646,310.861 C843.674,314.8 843.767,317.063 845.799,320.727 C845.878,320.858 845.96,320.991 846.071,321.169 C845.988,321.036 846.279,321.503 846.342,321.607 C846.562,321.963 846.719,322.227 846.864,322.49 C847.784,324.159 848.017,325.579 847.44,327.385 C847.244,327.999 847.036,328.542 846.695,329.368 C846.657,329.46 846.615,329.562 846.535,329.753 C846.471,329.908 846.424,330.021 846.379,330.132 C845.655,331.906 845.365,333.04 845.365,334.573 C845.365,335.003 845.017,335.351 844.587,335.351 C844.158,335.351 843.809,335.003 843.809,334.573 C843.809,332.802 844.145,331.488 844.939,329.544 C844.986,329.43 845.034,329.314 845.098,329.158 C845.178,328.966 845.22,328.864 845.258,328.774 C845.584,327.984 845.779,327.475 845.959,326.912 C846.393,325.553 846.23,324.562 845.502,323.24 C845.372,323.004 845.227,322.76 845.019,322.424 C844.98,322.361 844.953,322.318 844.886,322.209 C844.818,322.1 844.818,322.1 844.75,321.99 C844.636,321.807 844.552,321.671 844.469,321.533 C842.229,317.834 842.062,314.324 843.192,310.273 C840.915,308.946 839.711,306.763 839.579,304.163 C839.579,300.308 842.704,297.184 846.558,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M860.516,374.824 C856.662,374.824 853.537,371.7 853.537,367.845 C853.539,365.274 854.902,363.253 856.967,361.859 C858.146,357.667 858.193,355.22 856.009,351.281 C855.929,351.15 855.848,351.017 855.737,350.839 C855.819,350.972 855.529,350.505 855.465,350.401 C855.245,350.045 855.088,349.781 854.943,349.518 C854.024,347.849 853.791,346.429 854.367,344.623 C854.563,344.009 854.771,343.466 855.113,342.64 C855.15,342.548 855.193,342.446 855.273,342.255 C855.336,342.1 855.383,341.987 855.429,341.876 C856.153,340.102 856.443,338.968 856.443,337.435 C856.443,337.005 856.791,336.657 857.221,336.657 C857.65,336.657 857.998,337.005 857.998,337.435 C857.998,339.206 857.662,340.52 856.868,342.464 C856.822,342.578 856.774,342.694 856.709,342.85 C856.629,343.042 856.587,343.144 856.55,343.234 C856.224,344.024 856.029,344.533 855.849,345.096 C855.415,346.455 855.577,347.446 856.305,348.768 C856.435,349.004 856.581,349.248 856.788,349.584 C856.827,349.647 856.854,349.69 856.921,349.799 C856.989,349.908 856.989,349.908 857.058,350.018 C857.171,350.201 857.256,350.337 857.339,350.475 C859.555,354.066 859.631,357.177 858.761,361.115 C860.036,360.855 859.449,360.92 860.516,360.866 C861.637,360.923 860.996,360.855 862.428,361.147 C863.401,357.208 863.307,354.945 861.276,351.281 C861.196,351.15 861.114,351.017 861.004,350.839 C861.086,350.972 860.796,350.505 860.732,350.401 C860.512,350.045 860.355,349.781 860.21,349.518 C859.29,347.849 859.057,346.429 859.634,344.623 C859.83,344.009 860.038,343.466 860.379,342.64 C860.417,342.548 860.46,342.446 860.539,342.255 C860.603,342.1 860.65,341.987 860.695,341.876 C861.42,340.102 861.71,338.968 861.71,337.435 C861.71,337.005 862.058,336.657 862.487,336.657 C862.917,336.657 863.265,337.005 863.265,337.435 C863.265,339.206 862.929,340.52 862.135,342.464 C862.089,342.578 862.041,342.694 861.976,342.85 C861.896,343.042 861.854,343.144 861.817,343.234 C861.49,344.024 861.296,344.533 861.116,345.096 C860.682,346.455 860.844,347.446 861.572,348.768 C861.702,349.004 861.848,349.248 862.055,349.584 C862.094,349.647 862.121,349.69 862.188,349.799 C862.256,349.908 862.256,349.908 862.325,350.018 C862.438,350.201 862.522,350.337 862.606,350.475 C864.845,354.174 865.012,357.684 863.882,361.735 C866.159,363.062 867.364,365.245 867.495,367.845 C867.495,371.7 864.37,374.824 860.516,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M860.516,297.184 C864.371,297.184 867.495,300.308 867.495,304.163 C867.493,306.734 866.13,308.755 864.065,310.149 C862.886,314.341 862.839,316.788 865.023,320.727 C865.103,320.858 865.185,320.991 865.295,321.169 C865.213,321.036 865.503,321.503 865.567,321.607 C865.787,321.963 865.944,322.227 866.089,322.49 C867.009,324.159 867.242,325.579 866.665,327.385 C866.469,327.999 866.261,328.542 865.92,329.368 C865.882,329.46 865.839,329.562 865.76,329.753 C865.696,329.908 865.649,330.021 865.604,330.132 C864.879,331.906 864.589,333.04 864.589,334.573 C864.589,335.003 864.241,335.351 863.812,335.351 C863.382,335.351 863.034,335.003 863.034,334.573 C863.034,332.802 863.37,331.488 864.164,329.544 C864.211,329.43 864.258,329.314 864.323,329.158 C864.403,328.966 864.445,328.864 864.482,328.774 C864.809,327.984 865.003,327.475 865.183,326.912 C865.618,325.553 865.455,324.562 864.727,323.24 C864.597,323.004 864.452,322.76 864.244,322.424 C864.205,322.361 864.178,322.318 864.111,322.209 C864.043,322.1 864.043,322.1 863.974,321.99 C863.861,321.807 863.777,321.671 863.694,321.533 C861.477,317.942 861.401,314.831 862.271,310.893 C860.996,311.153 861.584,311.088 860.516,311.142 C859.395,311.085 860.036,311.153 858.604,310.861 C857.632,314.8 857.725,317.063 859.756,320.727 C859.836,320.858 859.918,320.991 860.029,321.169 C859.946,321.036 860.237,321.503 860.3,321.607 C860.52,321.963 860.677,322.227 860.822,322.49 C861.742,324.159 861.975,325.579 861.398,327.385 C861.202,327.999 860.994,328.542 860.653,329.368 C860.615,329.46 860.572,329.562 860.493,329.753 C860.429,329.908 860.382,330.021 860.337,330.132 C859.612,331.906 859.323,333.04 859.323,334.573 C859.323,335.003 858.974,335.351 858.545,335.351 C858.116,335.351 857.767,335.003 857.767,334.573 C857.767,332.802 858.103,331.488 858.897,329.544 C858.944,329.43 858.991,329.314 859.056,329.158 C859.136,328.966 859.178,328.864 859.216,328.774 C859.542,327.984 859.737,327.475 859.917,326.912 C860.351,325.553 860.188,324.562 859.46,323.24 C859.33,323.004 859.185,322.76 858.977,322.424 C858.938,322.361 858.911,322.318 858.844,322.209 C858.776,322.1 858.776,322.1 858.708,321.99 C858.594,321.807 858.51,321.671 858.427,321.533 C856.187,317.834 856.02,314.324 857.15,310.273 C854.873,308.946 853.669,306.763 853.537,304.163 C853.537,300.308 856.662,297.184 860.516,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M874.474,374.824 C870.62,374.824 867.495,371.7 867.495,367.845 C867.497,365.274 868.86,363.253 870.925,361.859 C872.104,357.667 872.151,355.22 869.967,351.281 C869.887,351.15 869.806,351.017 869.695,350.839 C869.777,350.972 869.487,350.505 869.423,350.401 C869.203,350.045 869.046,349.781 868.901,349.518 C867.982,347.849 867.748,346.429 868.325,344.623 C868.521,344.009 868.729,343.466 869.071,342.64 C869.108,342.548 869.151,342.446 869.23,342.255 C869.294,342.1 869.341,341.987 869.386,341.876 C870.111,340.102 870.401,338.968 870.401,337.435 C870.401,337.005 870.749,336.657 871.178,336.657 C871.608,336.657 871.956,337.005 871.956,337.435 C871.956,339.206 871.62,340.52 870.826,342.464 C870.78,342.578 870.732,342.694 870.667,342.85 C870.587,343.042 870.545,343.144 870.508,343.234 C870.181,344.024 869.987,344.533 869.807,345.096 C869.373,346.455 869.535,347.446 870.263,348.768 C870.393,349.004 870.539,349.248 870.746,349.584 C870.785,349.647 870.812,349.69 870.879,349.799 C870.947,349.908 870.947,349.908 871.016,350.018 C871.129,350.201 871.213,350.337 871.297,350.475 C873.513,354.066 873.589,357.177 872.719,361.115 C873.994,360.855 873.407,360.92 874.474,360.866 C875.595,360.923 874.954,360.855 876.386,361.147 C877.359,357.208 877.265,354.945 875.234,351.281 C875.154,351.15 875.072,351.017 874.962,350.839 C875.044,350.972 874.754,350.505 874.69,350.401 C874.47,350.045 874.313,349.781 874.168,349.518 C873.248,347.849 873.015,346.429 873.592,344.623 C873.788,344.009 873.996,343.466 874.337,342.64 C874.375,342.548 874.418,342.446 874.497,342.255 C874.561,342.1 874.608,341.987 874.653,341.876 C875.378,340.102 875.668,338.968 875.668,337.435 C875.668,337.005 876.016,336.657 876.445,336.657 C876.875,336.657 877.223,337.005 877.223,337.435 C877.223,339.206 876.887,340.52 876.093,342.464 C876.046,342.578 875.999,342.694 875.934,342.85 C875.854,343.042 875.812,343.144 875.775,343.234 C875.448,344.024 875.254,344.533 875.074,345.096 C874.639,346.455 874.802,347.446 875.53,348.768 C875.66,349.004 875.805,349.248 876.013,349.584 C876.052,349.647 876.079,349.69 876.146,349.799 C876.214,349.908 876.214,349.908 876.283,350.018 C876.396,350.201 876.48,350.337 876.564,350.475 C878.803,354.174 878.97,357.684 877.84,361.735 C880.117,363.062 881.322,365.245 881.453,367.845 C881.453,371.7 878.328,374.824 874.474,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M874.474,297.184 C878.328,297.184 881.453,300.308 881.453,304.163 C881.451,306.734 880.088,308.755 878.023,310.149 C876.844,314.341 876.797,316.788 878.981,320.727 C879.061,320.858 879.143,320.991 879.253,321.169 C879.171,321.036 879.461,321.503 879.525,321.607 C879.745,321.963 879.902,322.227 880.047,322.49 C880.967,324.159 881.2,325.579 880.623,327.385 C880.427,327.999 880.219,328.542 879.878,329.368 C879.84,329.46 879.797,329.562 879.718,329.753 C879.654,329.908 879.607,330.021 879.562,330.132 C878.837,331.906 878.547,333.04 878.547,334.573 C878.547,335.003 878.199,335.351 877.77,335.351 C877.34,335.351 876.992,335.003 876.992,334.573 C876.992,332.802 877.328,331.488 878.122,329.544 C878.169,329.43 878.216,329.314 878.281,329.158 C878.361,328.966 878.403,328.864 878.44,328.774 C878.767,327.984 878.961,327.475 879.141,326.912 C879.576,325.553 879.413,324.562 878.685,323.24 C878.555,323.004 878.41,322.76 878.202,322.424 C878.163,322.361 878.136,322.318 878.069,322.209 C878.001,322.1 878.001,322.1 877.932,321.99 C877.819,321.807 877.735,321.671 877.651,321.533 C875.435,317.942 875.359,314.831 876.229,310.893 C874.954,311.153 875.542,311.088 874.474,311.142 C873.353,311.085 873.994,311.153 872.562,310.861 C871.589,314.8 871.683,317.063 873.714,320.727 C873.794,320.858 873.876,320.991 873.986,321.169 C873.904,321.036 874.194,321.503 874.258,321.607 C874.478,321.963 874.635,322.227 874.78,322.49 C875.7,324.159 875.933,325.579 875.356,327.385 C875.16,327.999 874.952,328.542 874.611,329.368 C874.573,329.46 874.53,329.562 874.451,329.753 C874.387,329.908 874.34,330.021 874.295,330.132 C873.57,331.906 873.281,333.04 873.281,334.573 C873.281,335.003 872.932,335.351 872.503,335.351 C872.073,335.351 871.725,335.003 871.725,334.573 C871.725,332.802 872.061,331.488 872.855,329.544 C872.902,329.43 872.949,329.314 873.014,329.158 C873.094,328.966 873.136,328.864 873.173,328.774 C873.5,327.984 873.695,327.475 873.874,326.912 C874.309,325.553 874.146,324.562 873.418,323.24 C873.288,323.004 873.143,322.76 872.935,322.424 C872.896,322.361 872.869,322.318 872.802,322.209 C872.734,322.1 872.734,322.1 872.665,321.99 C872.552,321.807 872.468,321.671 872.385,321.533 C870.145,317.834 869.978,314.324 871.108,310.273 C868.831,308.946 867.626,306.763 867.495,304.163 C867.495,300.308 870.62,297.184 874.474,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M888.432,374.824 C884.578,374.824 881.453,371.7 881.453,367.845 C881.455,365.274 882.818,363.253 884.883,361.859 C886.062,357.667 886.109,355.22 883.925,351.281 C883.845,351.15 883.763,351.017 883.653,350.839 C883.735,350.972 883.445,350.505 883.381,350.401 C883.161,350.045 883.004,349.781 882.859,349.518 C881.939,347.849 881.706,346.429 882.283,344.623 C882.479,344.009 882.687,343.466 883.029,342.64 C883.066,342.548 883.109,342.446 883.188,342.255 C883.252,342.1 883.299,341.987 883.344,341.876 C884.069,340.102 884.359,338.968 884.359,337.435 C884.359,337.005 884.707,336.657 885.136,336.657 C885.566,336.657 885.914,337.005 885.914,337.435 C885.914,339.206 885.578,340.52 884.784,342.464 C884.738,342.578 884.69,342.694 884.625,342.85 C884.545,343.042 884.503,343.144 884.466,343.234 C884.139,344.024 883.945,344.533 883.765,345.096 C883.331,346.455 883.493,347.446 884.221,348.768 C884.351,349.004 884.497,349.248 884.704,349.584 C884.743,349.647 884.77,349.69 884.837,349.799 C884.905,349.908 884.905,349.908 884.974,350.018 C885.087,350.201 885.171,350.337 885.255,350.475 C887.471,354.066 887.547,357.177 886.677,361.115 C887.952,360.855 887.365,360.92 888.432,360.866 C889.553,360.923 888.912,360.855 890.344,361.147 C891.317,357.208 891.223,354.945 889.192,351.281 C889.112,351.15 889.03,351.017 888.92,350.839 C889.002,350.972 888.712,350.505 888.648,350.401 C888.428,350.045 888.271,349.781 888.126,349.518 C887.206,347.849 886.973,346.429 887.55,344.623 C887.746,344.009 887.954,343.466 888.295,342.64 C888.333,342.548 888.376,342.446 888.455,342.255 C888.519,342.1 888.566,341.987 888.611,341.876 C889.336,340.102 889.626,338.968 889.626,337.435 C889.626,337.005 889.974,336.657 890.403,336.657 C890.833,336.657 891.181,337.005 891.181,337.435 C891.181,339.206 890.845,340.52 890.051,342.464 C890.004,342.578 889.957,342.694 889.892,342.85 C889.812,343.042 889.77,343.144 889.733,343.234 C889.406,344.024 889.212,344.533 889.032,345.096 C888.597,346.455 888.76,347.446 889.488,348.768 C889.618,349.004 889.763,349.248 889.971,349.584 C890.01,349.647 890.037,349.69 890.104,349.799 C890.172,349.908 890.172,349.908 890.241,350.018 C890.354,350.201 890.438,350.337 890.521,350.475 C892.761,354.174 892.928,357.684 891.798,361.735 C894.075,363.062 895.28,365.245 895.411,367.845 C895.411,371.7 892.286,374.824 888.432,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M888.432,297.184 C892.286,297.184 895.411,300.308 895.411,304.163 C895.409,306.734 894.046,308.755 891.981,310.149 C890.802,314.341 890.755,316.788 892.939,320.727 C893.019,320.858 893.101,320.991 893.211,321.169 C893.129,321.036 893.419,321.503 893.483,321.607 C893.703,321.963 893.86,322.227 894.005,322.49 C894.925,324.159 895.158,325.579 894.581,327.385 C894.385,327.999 894.177,328.542 893.836,329.368 C893.798,329.46 893.755,329.562 893.676,329.753 C893.612,329.908 893.565,330.021 893.52,330.132 C892.795,331.906 892.505,333.04 892.505,334.573 C892.505,335.003 892.157,335.351 891.728,335.351 C891.298,335.351 890.95,335.003 890.95,334.573 C890.95,332.802 891.286,331.488 892.08,329.544 C892.126,329.43 892.174,329.314 892.239,329.158 C892.319,328.966 892.361,328.864 892.398,328.774 C892.725,327.984 892.919,327.475 893.099,326.912 C893.534,325.553 893.371,324.562 892.643,323.24 C892.513,323.004 892.367,322.76 892.16,322.424 C892.121,322.361 892.094,322.318 892.027,322.209 C891.959,322.1 891.959,322.1 891.89,321.99 C891.777,321.807 891.693,321.671 891.609,321.533 C889.393,317.942 889.317,314.831 890.187,310.893 C888.912,311.153 889.499,311.088 888.432,311.142 C887.311,311.085 887.952,311.153 886.52,310.861 C885.547,314.8 885.641,317.063 887.672,320.727 C887.752,320.858 887.834,320.991 887.944,321.169 C887.862,321.036 888.152,321.503 888.216,321.607 C888.436,321.963 888.593,322.227 888.738,322.49 C889.658,324.159 889.891,325.579 889.314,327.385 C889.118,327.999 888.91,328.542 888.569,329.368 C888.531,329.46 888.488,329.562 888.409,329.753 C888.345,329.908 888.298,330.021 888.253,330.132 C887.528,331.906 887.238,333.04 887.238,334.573 C887.238,335.003 886.89,335.351 886.461,335.351 C886.031,335.351 885.683,335.003 885.683,334.573 C885.683,332.802 886.019,331.488 886.813,329.544 C886.86,329.43 886.907,329.314 886.972,329.158 C887.052,328.966 887.094,328.864 887.131,328.774 C887.458,327.984 887.652,327.475 887.832,326.912 C888.267,325.553 888.104,324.562 887.376,323.24 C887.246,323.004 887.101,322.76 886.893,322.424 C886.854,322.361 886.827,322.318 886.76,322.209 C886.692,322.1 886.692,322.1 886.623,321.99 C886.51,321.807 886.426,321.671 886.342,321.533 C884.103,317.834 883.936,314.324 885.066,310.273 C882.789,308.946 881.584,306.763 881.453,304.163 C881.453,300.308 884.578,297.184 888.432,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M902.39,374.824 C898.536,374.824 895.411,371.7 895.411,367.845 C895.413,365.274 896.776,363.253 898.841,361.859 C900.02,357.667 900.067,355.22 897.883,351.281 C897.803,351.15 897.721,351.017 897.611,350.839 C897.693,350.972 897.403,350.505 897.339,350.401 C897.119,350.045 896.962,349.781 896.817,349.518 C895.897,347.849 895.664,346.429 896.241,344.623 C896.437,344.009 896.645,343.466 896.986,342.64 C897.024,342.548 897.067,342.446 897.146,342.255 C897.21,342.1 897.257,341.987 897.302,341.876 C898.027,340.102 898.317,338.968 898.317,337.435 C898.317,337.005 898.665,336.657 899.094,336.657 C899.524,336.657 899.872,337.005 899.872,337.435 C899.872,339.206 899.536,340.52 898.742,342.464 C898.695,342.578 898.648,342.694 898.583,342.85 C898.503,343.042 898.461,343.144 898.424,343.234 C898.097,344.024 897.903,344.533 897.723,345.096 C897.289,346.455 897.451,347.446 898.179,348.768 C898.309,349.004 898.455,349.248 898.662,349.584 C898.701,349.647 898.728,349.69 898.795,349.799 C898.863,349.908 898.863,349.908 898.932,350.018 C899.045,350.201 899.129,350.337 899.213,350.475 C901.429,354.066 901.505,357.177 900.635,361.115 C901.91,360.855 901.322,360.92 902.39,360.866 C903.511,360.923 902.87,360.855 904.302,361.147 C905.275,357.208 905.181,354.945 903.15,351.281 C903.07,351.15 902.988,351.017 902.878,350.839 C902.96,350.972 902.67,350.505 902.606,350.401 C902.386,350.045 902.229,349.781 902.084,349.518 C901.164,347.849 900.931,346.429 901.508,344.623 C901.704,344.009 901.912,343.466 902.253,342.64 C902.291,342.548 902.334,342.446 902.413,342.255 C902.477,342.1 902.524,341.987 902.569,341.876 C903.294,340.102 903.583,338.968 903.583,337.435 C903.583,337.005 903.932,336.657 904.361,336.657 C904.791,336.657 905.139,337.005 905.139,337.435 C905.139,339.206 904.803,340.52 904.009,342.464 C903.962,342.578 903.915,342.694 903.85,342.85 C903.77,343.042 903.728,343.144 903.691,343.234 C903.364,344.024 903.169,344.533 902.99,345.096 C902.555,346.455 902.718,347.446 903.446,348.768 C903.576,349.004 903.721,349.248 903.929,349.584 C903.968,349.647 903.995,349.69 904.062,349.799 C904.13,349.908 904.13,349.908 904.199,350.018 C904.312,350.201 904.396,350.337 904.479,350.475 C906.719,354.174 906.886,357.684 905.756,361.735 C908.033,363.062 909.237,365.245 909.369,367.845 C909.369,371.7 906.244,374.824 902.39,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M902.39,297.184 C906.244,297.184 909.369,300.308 909.369,304.163 C909.367,306.734 908.004,308.755 905.939,310.149 C904.76,314.341 904.713,316.788 906.897,320.727 C906.977,320.858 907.059,320.991 907.169,321.169 C907.087,321.036 907.377,321.503 907.441,321.607 C907.661,321.963 907.818,322.227 907.963,322.49 C908.883,324.159 909.116,325.579 908.539,327.385 C908.343,327.999 908.135,328.542 907.793,329.368 C907.756,329.46 907.713,329.562 907.634,329.753 C907.57,329.908 907.523,330.021 907.478,330.132 C906.753,331.906 906.463,333.04 906.463,334.573 C906.463,335.003 906.115,335.351 905.686,335.351 C905.256,335.351 904.908,335.003 904.908,334.573 C904.908,332.802 905.244,331.488 906.038,329.544 C906.084,329.43 906.132,329.314 906.197,329.158 C906.277,328.966 906.319,328.864 906.356,328.774 C906.683,327.984 906.877,327.475 907.057,326.912 C907.491,325.553 907.329,324.562 906.601,323.24 C906.471,323.004 906.325,322.76 906.118,322.424 C906.079,322.361 906.052,322.318 905.985,322.209 C905.917,322.1 905.917,322.1 905.848,321.99 C905.735,321.807 905.651,321.671 905.567,321.533 C903.351,317.942 903.275,314.831 904.145,310.893 C902.87,311.153 903.457,311.088 902.39,311.142 C901.269,311.085 901.91,311.153 900.478,310.861 C899.505,314.8 899.599,317.063 901.63,320.727 C901.71,320.858 901.792,320.991 901.902,321.169 C901.82,321.036 902.11,321.503 902.174,321.607 C902.394,321.963 902.551,322.227 902.696,322.49 C903.616,324.159 903.849,325.579 903.272,327.385 C903.076,327.999 902.868,328.542 902.527,329.368 C902.489,329.46 902.446,329.562 902.367,329.753 C902.303,329.908 902.256,330.021 902.211,330.132 C901.486,331.906 901.196,333.04 901.196,334.573 C901.196,335.003 900.848,335.351 900.419,335.351 C899.989,335.351 899.641,335.003 899.641,334.573 C899.641,332.802 899.977,331.488 900.771,329.544 C900.818,329.43 900.865,329.314 900.93,329.158 C901.01,328.966 901.052,328.864 901.089,328.774 C901.416,327.984 901.61,327.475 901.79,326.912 C902.225,325.553 902.062,324.562 901.334,323.24 C901.204,323.004 901.059,322.76 900.851,322.424 C900.812,322.361 900.785,322.318 900.718,322.209 C900.65,322.1 900.65,322.1 900.581,321.99 C900.468,321.807 900.384,321.671 900.3,321.533 C898.061,317.834 897.894,314.324 899.024,310.273 C896.747,308.946 895.542,306.763 895.411,304.163 C895.411,300.308 898.536,297.184 902.39,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M916.348,374.824 C912.494,374.824 909.369,371.7 909.369,367.845 C909.371,365.274 910.734,363.253 912.799,361.859 C913.978,357.667 914.025,355.22 911.841,351.281 C911.761,351.15 911.679,351.017 911.569,350.839 C911.651,350.972 911.361,350.505 911.297,350.401 C911.077,350.045 910.92,349.781 910.775,349.518 C909.855,347.849 909.622,346.429 910.199,344.623 C910.395,344.009 910.603,343.466 910.944,342.64 C910.982,342.548 911.025,342.446 911.104,342.255 C911.168,342.1 911.215,341.987 911.26,341.876 C911.985,340.102 912.275,338.968 912.275,337.435 C912.275,337.005 912.623,336.657 913.052,336.657 C913.482,336.657 913.83,337.005 913.83,337.435 C913.83,339.206 913.494,340.52 912.7,342.464 C912.653,342.578 912.606,342.694 912.541,342.85 C912.461,343.042 912.419,343.144 912.382,343.234 C912.055,344.024 911.861,344.533 911.681,345.096 C911.246,346.455 911.409,347.446 912.137,348.768 C912.267,349.004 912.412,349.248 912.62,349.584 C912.659,349.647 912.686,349.69 912.753,349.799 C912.821,349.908 912.821,349.908 912.89,350.018 C913.003,350.201 913.087,350.337 913.171,350.475 C915.387,354.066 915.463,357.177 914.593,361.115 C915.868,360.855 915.28,360.92 916.348,360.866 C917.469,360.923 916.828,360.855 918.26,361.147 C919.232,357.208 919.139,354.945 917.108,351.281 C917.028,351.15 916.946,351.017 916.836,350.839 C916.918,350.972 916.628,350.505 916.564,350.401 C916.344,350.045 916.187,349.781 916.042,349.518 C915.122,347.849 914.889,346.429 915.466,344.623 C915.662,344.009 915.87,343.466 916.211,342.64 C916.249,342.548 916.292,342.446 916.371,342.255 C916.435,342.1 916.482,341.987 916.527,341.876 C917.252,340.102 917.541,338.968 917.541,337.435 C917.541,337.005 917.89,336.657 918.319,336.657 C918.748,336.657 919.097,337.005 919.097,337.435 C919.097,339.206 918.761,340.52 917.967,342.464 C917.92,342.578 917.873,342.694 917.808,342.85 C917.728,343.042 917.686,343.144 917.648,343.234 C917.322,344.024 917.127,344.533 916.947,345.096 C916.513,346.455 916.676,347.446 917.404,348.768 C917.534,349.004 917.679,349.248 917.887,349.584 C917.926,349.647 917.953,349.69 918.02,349.799 C918.088,349.908 918.088,349.908 918.156,350.018 C918.27,350.201 918.354,350.337 918.437,350.475 C920.677,354.174 920.844,357.684 919.714,361.735 C921.991,363.062 923.195,365.245 923.327,367.845 C923.327,371.7 920.202,374.824 916.348,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M916.348,297.184 C920.202,297.184 923.327,300.308 923.327,304.163 C923.325,306.734 921.962,308.755 919.897,310.149 C918.718,314.341 918.671,316.788 920.855,320.727 C920.935,320.858 921.016,320.991 921.127,321.169 C921.045,321.036 921.335,321.503 921.399,321.607 C921.619,321.963 921.776,322.227 921.921,322.49 C922.84,324.159 923.074,325.579 922.497,327.385 C922.301,327.999 922.093,328.542 921.751,329.368 C921.714,329.46 921.671,329.562 921.592,329.753 C921.528,329.908 921.481,330.021 921.435,330.132 C920.711,331.906 920.421,333.04 920.421,334.573 C920.421,335.003 920.073,335.351 919.644,335.351 C919.214,335.351 918.866,335.003 918.866,334.573 C918.866,332.802 919.202,331.488 919.996,329.544 C920.042,329.43 920.09,329.314 920.155,329.158 C920.235,328.966 920.277,328.864 920.314,328.774 C920.641,327.984 920.835,327.475 921.015,326.912 C921.449,325.553 921.287,324.562 920.559,323.24 C920.429,323.004 920.283,322.76 920.076,322.424 C920.037,322.361 920.01,322.318 919.943,322.209 C919.875,322.1 919.875,322.1 919.806,321.99 C919.693,321.807 919.609,321.671 919.525,321.533 C917.309,317.942 917.233,314.831 918.103,310.893 C916.828,311.153 917.415,311.088 916.348,311.142 C915.227,311.085 915.868,311.153 914.436,310.861 C913.463,314.8 913.557,317.063 915.588,320.727 C915.668,320.858 915.75,320.991 915.86,321.169 C915.778,321.036 916.068,321.503 916.132,321.607 C916.352,321.963 916.509,322.227 916.654,322.49 C917.574,324.159 917.807,325.579 917.23,327.385 C917.034,327.999 916.826,328.542 916.485,329.368 C916.447,329.46 916.404,329.562 916.325,329.753 C916.261,329.908 916.214,330.021 916.169,330.132 C915.444,331.906 915.154,333.04 915.154,334.573 C915.154,335.003 914.806,335.351 914.377,335.351 C913.947,335.351 913.599,335.003 913.599,334.573 C913.599,332.802 913.935,331.488 914.729,329.544 C914.775,329.43 914.823,329.314 914.888,329.158 C914.968,328.966 915.01,328.864 915.047,328.774 C915.374,327.984 915.568,327.475 915.748,326.912 C916.182,325.553 916.02,324.562 915.292,323.24 C915.162,323.004 915.016,322.76 914.809,322.424 C914.77,322.361 914.743,322.318 914.676,322.209 C914.608,322.1 914.608,322.1 914.539,321.99 C914.426,321.807 914.342,321.671 914.258,321.533 C912.019,317.834 911.852,314.324 912.982,310.273 C910.705,308.946 909.5,306.763 909.369,304.163 C909.369,300.308 912.494,297.184 916.348,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M930.306,374.824 C926.451,374.824 923.327,371.7 923.327,367.845 C923.329,365.274 924.692,363.253 926.757,361.859 C927.936,357.667 927.983,355.22 925.799,351.281 C925.719,351.15 925.637,351.017 925.527,350.839 C925.609,350.972 925.319,350.505 925.255,350.401 C925.035,350.045 924.878,349.781 924.733,349.518 C923.813,347.849 923.58,346.429 924.157,344.623 C924.353,344.009 924.561,343.466 924.902,342.64 C924.94,342.548 924.983,342.446 925.062,342.255 C925.126,342.1 925.173,341.987 925.218,341.876 C925.943,340.102 926.232,338.968 926.233,337.435 C926.232,337.005 926.581,336.657 927.01,336.657 C927.44,336.657 927.788,337.005 927.788,337.435 C927.788,339.206 927.452,340.52 926.658,342.464 C926.611,342.578 926.564,342.694 926.499,342.85 C926.419,343.042 926.377,343.144 926.34,343.234 C926.013,344.024 925.819,344.533 925.639,345.096 C925.204,346.455 925.367,347.446 926.095,348.768 C926.225,349.004 926.37,349.248 926.578,349.584 C926.617,349.647 926.644,349.69 926.711,349.799 C926.779,349.908 926.779,349.908 926.848,350.018 C926.961,350.201 927.045,350.337 927.128,350.475 C929.345,354.066 929.42,357.177 928.551,361.115 C929.826,360.855 929.238,360.92 930.306,360.866 C931.427,360.923 930.786,360.855 932.218,361.147 C933.19,357.208 933.097,354.945 931.065,351.281 C930.986,351.15 930.904,351.017 930.793,350.839 C930.876,350.972 930.585,350.505 930.522,350.401 C930.302,350.045 930.145,349.781 930,349.518 C929.08,347.849 928.847,346.429 929.424,344.623 C929.62,344.009 929.828,343.466 930.169,342.64 C930.207,342.548 930.249,342.446 930.329,342.255 C930.393,342.1 930.44,341.987 930.485,341.876 C931.209,340.102 931.499,338.968 931.499,337.435 C931.499,337.005 931.847,336.657 932.277,336.657 C932.706,336.657 933.055,337.005 933.055,337.435 C933.055,339.206 932.719,340.52 931.925,342.464 C931.878,342.578 931.831,342.694 931.766,342.85 C931.686,343.042 931.644,343.144 931.606,343.234 C931.28,344.024 931.085,344.533 930.905,345.096 C930.471,346.455 930.634,347.446 931.362,348.768 C931.492,349.004 931.637,349.248 931.845,349.584 C931.884,349.647 931.911,349.69 931.978,349.799 C932.046,349.908 932.046,349.908 932.114,350.018 C932.228,350.201 932.312,350.337 932.395,350.475 C934.635,354.174 934.802,357.684 933.672,361.735 C935.949,363.062 937.153,365.245 937.285,367.845 C937.285,371.7 934.16,374.824 930.306,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M930.306,297.184 C934.16,297.184 937.285,300.308 937.285,304.163 C937.283,306.734 935.92,308.755 933.855,310.149 C932.676,314.341 932.629,316.788 934.813,320.727 C934.893,320.858 934.974,320.991 935.085,321.169 C935.003,321.036 935.293,321.503 935.357,321.607 C935.577,321.963 935.734,322.227 935.879,322.49 C936.798,324.159 937.031,325.579 936.455,327.385 C936.259,327.999 936.051,328.542 935.709,329.368 C935.672,329.46 935.629,329.562 935.549,329.753 C935.486,329.908 935.439,330.021 935.393,330.132 C934.669,331.906 934.379,333.04 934.379,334.573 C934.379,335.003 934.031,335.351 933.601,335.351 C933.172,335.351 932.824,335.003 932.824,334.573 C932.824,332.802 933.16,331.488 933.954,329.544 C934,329.43 934.048,329.314 934.113,329.158 C934.193,328.966 934.235,328.864 934.272,328.774 C934.598,327.984 934.793,327.475 934.973,326.912 C935.407,325.553 935.245,324.562 934.517,323.24 C934.386,323.004 934.241,322.76 934.034,322.424 C933.995,322.361 933.968,322.318 933.901,322.209 C933.833,322.1 933.833,322.1 933.764,321.99 C933.651,321.807 933.566,321.671 933.483,321.533 C931.267,317.942 931.191,314.831 932.061,310.893 C930.786,311.153 931.373,311.088 930.306,311.142 C929.185,311.085 929.826,311.153 928.393,310.861 C927.421,314.8 927.515,317.063 929.546,320.727 C929.626,320.858 929.708,320.991 929.818,321.169 C929.736,321.036 930.026,321.503 930.09,321.607 C930.31,321.963 930.467,322.227 930.612,322.49 C931.532,324.159 931.765,325.579 931.188,327.385 C930.992,327.999 930.784,328.542 930.443,329.368 C930.405,329.46 930.362,329.562 930.283,329.753 C930.219,329.908 930.172,330.021 930.127,330.132 C929.402,331.906 929.112,333.04 929.112,334.573 C929.112,335.003 928.764,335.351 928.335,335.351 C927.905,335.351 927.557,335.003 927.557,334.573 C927.557,332.802 927.893,331.488 928.687,329.544 C928.733,329.43 928.781,329.314 928.846,329.158 C928.926,328.966 928.968,328.864 929.005,328.774 C929.332,327.984 929.526,327.475 929.706,326.912 C930.14,325.553 929.978,324.562 929.25,323.24 C929.12,323.004 928.974,322.76 928.767,322.424 C928.728,322.361 928.701,322.318 928.634,322.209 C928.566,322.1 928.566,322.1 928.497,321.99 C928.384,321.807 928.3,321.671 928.216,321.533 C925.977,317.834 925.81,314.324 926.94,310.273 C924.663,308.946 923.458,306.763 923.327,304.163 C923.327,300.308 926.451,297.184 930.306,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M944.264,374.824 C940.409,374.824 937.285,371.7 937.285,367.845 C937.287,365.274 938.65,363.253 940.715,361.859 C941.894,357.667 941.941,355.22 939.757,351.281 C939.677,351.15 939.595,351.017 939.484,350.839 C939.567,350.972 939.276,350.505 939.213,350.401 C938.993,350.045 938.836,349.781 938.691,349.518 C937.771,347.849 937.538,346.429 938.115,344.623 C938.311,344.009 938.519,343.466 938.86,342.64 C938.898,342.548 938.941,342.446 939.02,342.255 C939.084,342.1 939.131,341.987 939.176,341.876 C939.901,340.102 940.19,338.968 940.19,337.435 C940.19,337.005 940.539,336.657 940.968,336.657 C941.397,336.657 941.746,337.005 941.746,337.435 C941.746,339.206 941.41,340.52 940.616,342.464 C940.569,342.578 940.522,342.694 940.457,342.85 C940.377,343.042 940.335,343.144 940.297,343.234 C939.971,344.024 939.776,344.533 939.596,345.096 C939.162,346.455 939.325,347.446 940.053,348.768 C940.183,349.004 940.328,349.248 940.536,349.584 C940.575,349.647 940.602,349.69 940.669,349.799 C940.737,349.908 940.737,349.908 940.805,350.018 C940.919,350.201 941.003,350.337 941.086,350.475 C943.302,354.066 943.378,357.177 942.508,361.115 C943.783,360.855 943.196,360.92 944.264,360.866 C945.385,360.923 944.744,360.855 946.176,361.147 C947.148,357.208 947.055,354.945 945.023,351.281 C944.944,351.15 944.862,351.017 944.751,350.839 C944.834,350.972 944.543,350.505 944.479,350.401 C944.26,350.045 944.103,349.781 943.958,349.518 C943.038,347.849 942.805,346.429 943.382,344.623 C943.578,344.009 943.786,343.466 944.127,342.64 C944.165,342.548 944.207,342.446 944.287,342.255 C944.351,342.1 944.398,341.987 944.443,341.876 C945.167,340.102 945.457,338.968 945.457,337.435 C945.457,337.005 945.805,336.657 946.235,336.657 C946.664,336.657 947.012,337.005 947.012,337.435 C947.012,339.206 946.677,340.52 945.883,342.464 C945.836,342.578 945.788,342.694 945.724,342.85 C945.644,343.042 945.602,343.144 945.564,343.234 C945.238,344.024 945.043,344.533 944.863,345.096 C944.429,346.455 944.592,347.446 945.32,348.768 C945.45,349.004 945.595,349.248 945.803,349.584 C945.841,349.647 945.868,349.69 945.936,349.799 C946.003,349.908 946.003,349.908 946.072,350.018 C946.186,350.201 946.27,350.337 946.353,350.475 C948.592,354.174 948.76,357.684 947.63,361.735 C949.907,363.062 951.111,365.245 951.243,367.845 C951.243,371.7 948.118,374.824 944.264,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M944.264,297.184 C948.118,297.184 951.243,300.308 951.243,304.163 C951.241,306.734 949.878,308.755 947.813,310.149 C946.634,314.341 946.587,316.788 948.771,320.727 C948.851,320.858 948.932,320.991 949.043,321.169 C948.961,321.036 949.251,321.503 949.315,321.607 C949.535,321.963 949.692,322.227 949.837,322.49 C950.756,324.159 950.989,325.579 950.412,327.385 C950.216,327.999 950.009,328.542 949.667,329.368 C949.629,329.46 949.587,329.562 949.507,329.753 C949.443,329.908 949.397,330.021 949.351,330.132 C948.627,331.906 948.337,333.04 948.337,334.573 C948.337,335.003 947.989,335.351 947.559,335.351 C947.13,335.351 946.782,335.003 946.782,334.573 C946.782,332.802 947.118,331.488 947.912,329.544 C947.958,329.43 948.006,329.314 948.071,329.158 C948.151,328.966 948.193,328.864 948.23,328.774 C948.556,327.984 948.751,327.475 948.931,326.912 C949.365,325.553 949.203,324.562 948.474,323.24 C948.344,323.004 948.199,322.76 947.992,322.424 C947.953,322.361 947.926,322.318 947.859,322.209 C947.791,322.1 947.791,322.1 947.722,321.99 C947.609,321.807 947.524,321.671 947.441,321.533 C945.225,317.942 945.149,314.831 946.019,310.893 C944.744,311.153 945.331,311.088 944.264,311.142 C943.143,311.085 943.783,311.153 942.351,310.861 C941.379,314.8 941.473,317.063 943.504,320.727 C943.584,320.858 943.665,320.991 943.776,321.169 C943.694,321.036 943.984,321.503 944.048,321.607 C944.268,321.963 944.425,322.227 944.57,322.49 C945.489,324.159 945.723,325.579 945.146,327.385 C944.95,327.999 944.742,328.542 944.4,329.368 C944.363,329.46 944.32,329.562 944.241,329.753 C944.177,329.908 944.13,330.021 944.084,330.132 C943.36,331.906 943.07,333.04 943.07,334.573 C943.07,335.003 942.722,335.351 942.293,335.351 C941.863,335.351 941.515,335.003 941.515,334.573 C941.515,332.802 941.851,331.488 942.645,329.544 C942.691,329.43 942.739,329.314 942.804,329.158 C942.884,328.966 942.926,328.864 942.963,328.774 C943.289,327.984 943.484,327.475 943.664,326.912 C944.098,325.553 943.936,324.562 943.208,323.24 C943.078,323.004 942.932,322.76 942.725,322.424 C942.686,322.361 942.659,322.318 942.592,322.209 C942.524,322.1 942.524,322.1 942.455,321.99 C942.342,321.807 942.257,321.671 942.174,321.533 C939.935,317.834 939.768,314.324 940.897,310.273 C938.621,308.946 937.416,306.763 937.285,304.163 C937.285,300.308 940.409,297.184 944.264,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M958.222,374.824 C954.367,374.824 951.243,371.7 951.243,367.845 C951.245,365.274 952.607,363.253 954.673,361.859 C955.852,357.667 955.899,355.22 953.714,351.281 C953.635,351.15 953.553,351.017 953.442,350.839 C953.525,350.972 953.234,350.505 953.171,350.401 C952.951,350.045 952.794,349.781 952.649,349.518 C951.729,347.849 951.496,346.429 952.073,344.623 C952.269,344.009 952.477,343.466 952.818,342.64 C952.856,342.548 952.898,342.446 952.978,342.255 C953.042,342.1 953.089,341.987 953.134,341.876 C953.858,340.102 954.148,338.968 954.148,337.435 C954.148,337.005 954.496,336.657 954.926,336.657 C955.355,336.657 955.704,337.005 955.704,337.435 C955.704,339.206 955.368,340.52 954.574,342.464 C954.527,342.578 954.479,342.694 954.415,342.85 C954.335,343.042 954.293,343.144 954.255,343.234 C953.929,344.024 953.734,344.533 953.554,345.096 C953.12,346.455 953.283,347.446 954.011,348.768 C954.141,349.004 954.286,349.248 954.494,349.584 C954.533,349.647 954.56,349.69 954.627,349.799 C954.695,349.908 954.695,349.908 954.763,350.018 C954.877,350.201 954.961,350.337 955.044,350.475 C957.26,354.066 957.336,357.177 956.466,361.115 C957.741,360.855 957.154,360.92 958.222,360.866 C959.342,360.923 958.702,360.855 960.134,361.147 C961.106,357.208 961.013,354.945 958.981,351.281 C958.901,351.15 958.82,351.017 958.709,350.839 C958.792,350.972 958.501,350.505 958.437,350.401 C958.217,350.045 958.06,349.781 957.916,349.518 C956.996,347.849 956.763,346.429 957.34,344.623 C957.536,344.009 957.743,343.466 958.085,342.64 C958.123,342.548 958.165,342.446 958.245,342.255 C958.309,342.1 958.355,341.987 958.401,341.876 C959.125,340.102 959.415,338.968 959.415,337.435 C959.415,337.005 959.763,336.657 960.193,336.657 C960.622,336.657 960.97,337.005 960.97,337.435 C960.97,339.206 960.635,340.52 959.841,342.464 C959.794,342.578 959.746,342.694 959.681,342.85 C959.602,343.042 959.56,343.144 959.522,343.234 C959.196,344.024 959.001,344.533 958.821,345.096 C958.387,346.455 958.55,347.446 959.278,348.768 C959.408,349.004 959.553,349.248 959.76,349.584 C959.799,349.647 959.826,349.69 959.894,349.799 C959.961,349.908 959.961,349.908 960.03,350.018 C960.144,350.201 960.228,350.337 960.311,350.475 C962.55,354.174 962.717,357.684 961.588,361.735 C963.864,363.062 965.069,365.245 965.201,367.845 C965.2,371.7 962.076,374.824 958.222,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M958.222,297.184 C962.076,297.184 965.201,300.308 965.201,304.163 C965.199,306.734 963.836,308.755 961.771,310.149 C960.592,314.341 960.545,316.788 962.729,320.727 C962.809,320.858 962.89,320.991 963.001,321.169 C962.919,321.036 963.209,321.503 963.273,321.607 C963.493,321.963 963.65,322.227 963.795,322.49 C964.714,324.159 964.947,325.579 964.37,327.385 C964.174,327.999 963.967,328.542 963.625,329.368 C963.587,329.46 963.545,329.562 963.465,329.753 C963.401,329.908 963.355,330.021 963.309,330.132 C962.585,331.906 962.295,333.04 962.295,334.573 C962.295,335.003 961.947,335.351 961.517,335.351 C961.088,335.351 960.74,335.003 960.74,334.573 C960.74,332.802 961.076,331.488 961.87,329.544 C961.916,329.43 961.964,329.314 962.029,329.158 C962.108,328.966 962.151,328.864 962.188,328.774 C962.514,327.984 962.709,327.475 962.889,326.912 C963.323,325.553 963.16,324.562 962.432,323.24 C962.302,323.004 962.157,322.76 961.95,322.424 C961.911,322.361 961.884,322.318 961.817,322.209 C961.749,322.1 961.749,322.1 961.68,321.99 C961.566,321.807 961.482,321.671 961.399,321.533 C959.183,317.942 959.107,314.831 959.977,310.893 C958.702,311.153 959.289,311.088 958.222,311.142 C957.101,311.085 957.741,311.153 956.309,310.861 C955.337,314.8 955.431,317.063 957.462,320.727 C957.542,320.858 957.623,320.991 957.734,321.169 C957.652,321.036 957.942,321.503 958.006,321.607 C958.226,321.963 958.383,322.227 958.528,322.49 C959.447,324.159 959.68,325.579 959.103,327.385 C958.908,327.999 958.7,328.542 958.358,329.368 C958.32,329.46 958.278,329.562 958.198,329.753 C958.135,329.908 958.088,330.021 958.042,330.132 C957.318,331.906 957.028,333.04 957.028,334.573 C957.028,335.003 956.68,335.351 956.25,335.351 C955.821,335.351 955.473,335.003 955.473,334.573 C955.473,332.802 955.809,331.488 956.603,329.544 C956.649,329.43 956.697,329.314 956.762,329.158 C956.842,328.966 956.884,328.864 956.921,328.774 C957.247,327.984 957.442,327.475 957.622,326.912 C958.056,325.553 957.894,324.562 957.165,323.24 C957.035,323.004 956.89,322.76 956.683,322.424 C956.644,322.361 956.617,322.318 956.55,322.209 C956.482,322.1 956.482,322.1 956.413,321.99 C956.3,321.807 956.215,321.671 956.132,321.533 C953.893,317.834 953.726,314.324 954.855,310.273 C952.579,308.946 951.374,306.763 951.243,304.163 C951.243,300.308 954.367,297.184 958.222,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M972.18,374.824 C968.325,374.824 965.201,371.7 965.201,367.845 C965.202,365.274 966.565,363.253 968.631,361.859 C969.81,357.667 969.857,355.22 967.672,351.281 C967.593,351.15 967.511,351.017 967.4,350.839 C967.483,350.972 967.192,350.505 967.128,350.401 C966.909,350.045 966.752,349.781 966.607,349.518 C965.687,347.849 965.454,346.429 966.031,344.623 C966.227,344.009 966.435,343.466 966.776,342.64 C966.814,342.548 966.856,342.446 966.936,342.255 C967,342.1 967.047,341.987 967.092,341.876 C967.816,340.102 968.106,338.968 968.106,337.435 C968.106,337.005 968.454,336.657 968.884,336.657 C969.313,336.657 969.661,337.005 969.661,337.435 C969.661,339.206 969.326,340.52 968.532,342.464 C968.485,342.578 968.437,342.694 968.373,342.85 C968.293,343.042 968.251,343.144 968.213,343.234 C967.887,344.024 967.692,344.533 967.512,345.096 C967.078,346.455 967.241,347.446 967.969,348.768 C968.099,349.004 968.244,349.248 968.452,349.584 C968.49,349.647 968.517,349.69 968.585,349.799 C968.652,349.908 968.652,349.908 968.721,350.018 C968.835,350.201 968.919,350.337 969.002,350.475 C971.218,354.066 971.294,357.177 970.424,361.115 C971.699,360.855 971.112,360.92 972.18,360.866 C973.3,360.923 972.66,360.855 974.092,361.147 C975.064,357.208 974.971,354.945 972.939,351.281 C972.859,351.15 972.778,351.017 972.667,350.839 C972.75,350.972 972.459,350.505 972.395,350.401 C972.175,350.045 972.018,349.781 971.873,349.518 C970.954,347.849 970.721,346.429 971.298,344.623 C971.494,344.009 971.701,343.466 972.043,342.64 C972.081,342.548 972.123,342.446 972.203,342.255 C972.267,342.1 972.313,341.987 972.359,341.876 C973.083,340.102 973.373,338.968 973.373,337.435 C973.373,337.005 973.721,336.657 974.151,336.657 C974.58,336.657 974.928,337.005 974.928,337.435 C974.928,339.206 974.593,340.52 973.799,342.464 C973.752,342.578 973.704,342.694 973.639,342.85 C973.56,343.042 973.518,343.144 973.48,343.234 C973.154,344.024 972.959,344.533 972.779,345.096 C972.345,346.455 972.508,347.446 973.236,348.768 C973.366,349.004 973.511,349.248 973.718,349.584 C973.757,349.647 973.784,349.69 973.852,349.799 C973.919,349.908 973.919,349.908 973.988,350.018 C974.102,350.201 974.186,350.337 974.269,350.475 C976.508,354.174 976.675,357.684 975.546,361.735 C977.822,363.062 979.027,365.245 979.158,367.845 C979.158,371.7 976.034,374.824 972.18,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M972.18,297.184 C976.034,297.184 979.159,300.308 979.159,304.163 C979.157,306.734 977.794,308.755 975.729,310.149 C974.55,314.341 974.503,316.788 976.687,320.727 C976.767,320.858 976.848,320.991 976.959,321.169 C976.876,321.036 977.167,321.503 977.231,321.607 C977.451,321.963 977.608,322.227 977.753,322.49 C978.672,324.159 978.905,325.579 978.328,327.385 C978.132,327.999 977.925,328.542 977.583,329.368 C977.545,329.46 977.503,329.562 977.423,329.753 C977.359,329.908 977.313,330.021 977.267,330.132 C976.543,331.906 976.253,333.04 976.253,334.573 C976.253,335.003 975.905,335.351 975.475,335.351 C975.046,335.351 974.698,335.003 974.698,334.573 C974.698,332.802 975.033,331.488 975.827,329.544 C975.874,329.43 975.922,329.314 975.987,329.158 C976.066,328.966 976.108,328.864 976.146,328.774 C976.472,327.984 976.667,327.475 976.847,326.912 C977.281,325.553 977.118,324.562 976.39,323.24 C976.26,323.004 976.115,322.76 975.908,322.424 C975.869,322.361 975.842,322.318 975.774,322.209 C975.707,322.1 975.707,322.1 975.638,321.99 C975.524,321.807 975.44,321.671 975.357,321.533 C973.141,317.942 973.065,314.831 973.935,310.893 C972.66,311.153 973.247,311.088 972.18,311.142 C971.059,311.085 971.699,311.153 970.267,310.861 C969.295,314.8 969.389,317.063 971.42,320.727 C971.5,320.858 971.581,320.991 971.692,321.169 C971.61,321.036 971.9,321.503 971.964,321.607 C972.184,321.963 972.341,322.227 972.486,322.49 C973.405,324.159 973.638,325.579 973.061,327.385 C972.865,327.999 972.658,328.542 972.316,329.368 C972.278,329.46 972.236,329.562 972.156,329.753 C972.092,329.908 972.046,330.021 972,330.132 C971.276,331.906 970.986,333.04 970.986,334.573 C970.986,335.003 970.638,335.351 970.208,335.351 C969.779,335.351 969.431,335.003 969.431,334.573 C969.431,332.802 969.767,331.488 970.561,329.544 C970.607,329.43 970.655,329.314 970.72,329.158 C970.799,328.966 970.842,328.864 970.879,328.774 C971.205,327.984 971.4,327.475 971.58,326.912 C972.014,325.553 971.852,324.562 971.123,323.24 C970.993,323.004 970.848,322.76 970.641,322.424 C970.602,322.361 970.575,322.318 970.508,322.209 C970.44,322.1 970.44,322.1 970.371,321.99 C970.258,321.807 970.173,321.671 970.09,321.533 C967.851,317.834 967.684,314.324 968.813,310.273 C966.537,308.946 965.332,306.763 965.201,304.163 C965.201,300.308 968.325,297.184 972.18,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M986.137,374.824 C982.283,374.824 979.159,371.7 979.159,367.845 C979.16,365.274 980.523,363.253 982.589,361.859 C983.767,357.667 983.814,355.22 981.63,351.281 C981.55,351.15 981.469,351.017 981.358,350.839 C981.441,350.972 981.15,350.505 981.086,350.401 C980.866,350.045 980.709,349.781 980.565,349.518 C979.645,347.849 979.412,346.429 979.989,344.623 C980.185,344.009 980.392,343.466 980.734,342.64 C980.772,342.548 980.814,342.446 980.894,342.255 C980.958,342.1 981.004,341.987 981.05,341.876 C981.774,340.102 982.064,338.968 982.064,337.435 C982.064,337.005 982.412,336.657 982.842,336.657 C983.271,336.657 983.619,337.005 983.619,337.435 C983.619,339.206 983.284,340.52 982.49,342.464 C982.443,342.578 982.395,342.694 982.33,342.85 C982.251,343.042 982.209,343.144 982.171,343.234 C981.845,344.024 981.65,344.533 981.47,345.096 C981.036,346.455 981.199,347.446 981.927,348.768 C982.057,349.004 982.202,349.248 982.41,349.584 C982.448,349.647 982.475,349.69 982.543,349.799 C982.61,349.908 982.61,349.908 982.679,350.018 C982.793,350.201 982.877,350.337 982.96,350.475 C985.176,354.066 985.252,357.177 984.382,361.115 C985.657,360.855 985.07,360.92 986.137,360.866 C987.258,360.923 986.618,360.855 988.05,361.147 C989.022,357.208 988.928,354.945 986.897,351.281 C986.817,351.15 986.736,351.017 986.625,350.839 C986.707,350.972 986.417,350.505 986.353,350.401 C986.133,350.045 985.976,349.781 985.831,349.518 C984.912,347.849 984.679,346.429 985.256,344.623 C985.452,344.009 985.659,343.466 986.001,342.64 C986.039,342.548 986.081,342.446 986.161,342.255 C986.225,342.1 986.271,341.987 986.317,341.876 C987.041,340.102 987.331,338.968 987.331,337.435 C987.331,337.005 987.679,336.657 988.109,336.657 C988.538,336.657 988.886,337.005 988.886,337.435 C988.886,339.206 988.55,340.52 987.756,342.464 C987.71,342.578 987.662,342.694 987.597,342.85 C987.518,343.042 987.475,343.144 987.438,343.234 C987.112,344.024 986.917,344.533 986.737,345.096 C986.303,346.455 986.465,347.446 987.194,348.768 C987.324,349.004 987.469,349.248 987.676,349.584 C987.715,349.647 987.742,349.69 987.809,349.799 C987.877,349.908 987.877,349.908 987.946,350.018 C988.059,350.201 988.144,350.337 988.227,350.475 C990.466,354.174 990.633,357.684 989.504,361.735 C991.78,363.062 992.985,365.245 993.116,367.845 C993.116,371.7 989.992,374.824 986.137,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M986.137,297.184 C989.992,297.184 993.116,300.308 993.116,304.163 C993.115,306.734 991.752,308.755 989.686,310.149 C988.508,314.341 988.461,316.788 990.645,320.727 C990.724,320.858 990.806,320.991 990.917,321.169 C990.834,321.036 991.125,321.503 991.189,321.607 C991.409,321.963 991.565,322.227 991.71,322.49 C992.63,324.159 992.863,325.579 992.286,327.385 C992.09,327.999 991.883,328.542 991.541,329.368 C991.503,329.46 991.461,329.562 991.381,329.753 C991.317,329.908 991.271,330.021 991.225,330.132 C990.501,331.906 990.211,333.04 990.211,334.573 C990.211,335.003 989.863,335.351 989.433,335.351 C989.004,335.351 988.656,335.003 988.656,334.573 C988.656,332.802 988.991,331.488 989.785,329.544 C989.832,329.43 989.88,329.314 989.945,329.158 C990.024,328.966 990.066,328.864 990.104,328.774 C990.43,327.984 990.625,327.475 990.805,326.912 C991.239,325.553 991.076,324.562 990.348,323.24 C990.218,323.004 990.073,322.76 989.865,322.424 C989.827,322.361 989.8,322.318 989.732,322.209 C989.665,322.1 989.665,322.1 989.596,321.99 C989.482,321.807 989.398,321.671 989.315,321.533 C987.099,317.942 987.023,314.831 987.893,310.893 C986.618,311.153 987.205,311.088 986.137,311.142 C985.017,311.085 985.657,311.153 984.225,310.861 C983.253,314.8 983.346,317.063 985.378,320.727 C985.458,320.858 985.539,320.991 985.65,321.169 C985.568,321.036 985.858,321.503 985.922,321.607 C986.142,321.963 986.299,322.227 986.444,322.49 C987.363,324.159 987.596,325.579 987.019,327.385 C986.823,327.999 986.616,328.542 986.274,329.368 C986.236,329.46 986.194,329.562 986.114,329.753 C986.05,329.908 986.004,330.021 985.958,330.132 C985.234,331.906 984.944,333.04 984.944,334.573 C984.944,335.003 984.596,335.351 984.166,335.351 C983.737,335.351 983.389,335.003 983.389,334.573 C983.389,332.802 983.724,331.488 984.518,329.544 C984.565,329.43 984.613,329.314 984.678,329.158 C984.757,328.966 984.799,328.864 984.837,328.774 C985.163,327.984 985.358,327.475 985.538,326.912 C985.972,325.553 985.809,324.562 985.081,323.24 C984.951,323.004 984.806,322.76 984.599,322.424 C984.56,322.361 984.533,322.318 984.465,322.209 C984.398,322.1 984.398,322.1 984.329,321.99 C984.215,321.807 984.131,321.671 984.048,321.533 C981.809,317.834 981.642,314.324 982.771,310.273 C980.495,308.946 979.29,306.763 979.159,304.163 C979.159,300.308 982.283,297.184 986.137,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1000.095,374.824 C996.241,374.824 993.117,371.7 993.117,367.845 C993.118,365.274 994.481,363.253 996.546,361.859 C997.725,357.667 997.772,355.22 995.588,351.281 C995.508,351.15 995.427,351.017 995.316,350.839 C995.398,350.972 995.108,350.505 995.044,350.401 C994.824,350.045 994.667,349.781 994.522,349.518 C993.603,347.849 993.37,346.429 993.947,344.623 C994.143,344.009 994.35,343.466 994.692,342.64 C994.73,342.548 994.772,342.446 994.852,342.255 C994.916,342.1 994.962,341.987 995.008,341.876 C995.732,340.102 996.022,338.968 996.022,337.435 C996.022,337.005 996.37,336.657 996.8,336.657 C997.229,336.657 997.577,337.005 997.577,337.435 C997.577,339.206 997.242,340.52 996.448,342.464 C996.401,342.578 996.353,342.694 996.288,342.85 C996.209,343.042 996.167,343.144 996.129,343.234 C995.803,344.024 995.608,344.533 995.428,345.096 C994.994,346.455 995.157,347.446 995.885,348.768 C996.015,349.004 996.16,349.248 996.367,349.584 C996.406,349.647 996.433,349.69 996.5,349.799 C996.568,349.908 996.568,349.908 996.637,350.018 C996.751,350.201 996.835,350.337 996.918,350.475 C999.134,354.066 999.21,357.177 998.34,361.115 C999.615,360.855 999.028,360.92 1000.095,360.866 C1001.216,360.923 1000.576,360.855 1002.008,361.147 C1002.98,357.208 1002.886,354.945 1000.855,351.281 C1000.775,351.15 1000.694,351.017 1000.583,350.839 C1000.665,350.972 1000.375,350.505 1000.311,350.401 C1000.091,350.045 999.934,349.781 999.789,349.518 C998.87,347.849 998.637,346.429 999.214,344.623 C999.409,344.009 999.617,343.466 999.959,342.64 C999.997,342.548 1000.039,342.446 1000.119,342.255 C1000.182,342.1 1000.229,341.987 1000.275,341.876 C1000.999,340.102 1001.289,338.968 1001.289,337.435 C1001.289,337.005 1001.637,336.657 1002.067,336.657 C1002.496,336.657 1002.844,337.005 1002.844,337.435 C1002.844,339.206 1002.508,340.52 1001.714,342.464 C1001.668,342.578 1001.62,342.694 1001.555,342.85 C1001.475,343.042 1001.433,343.144 1001.396,343.234 C1001.07,344.024 1000.875,344.533 1000.695,345.096 C1000.261,346.455 1000.423,347.446 1001.151,348.768 C1001.282,349.004 1001.427,349.248 1001.634,349.584 C1001.673,349.647 1001.7,349.69 1001.767,349.799 C1001.835,349.908 1001.835,349.908 1001.904,350.018 C1002.017,350.201 1002.102,350.337 1002.185,350.475 C1004.424,354.174 1004.591,357.684 1003.462,361.735 C1005.738,363.062 1006.943,365.245 1007.074,367.845 C1007.074,371.7 1003.95,374.824 1000.095,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1000.095,297.184 C1003.95,297.184 1007.074,300.308 1007.074,304.163 C1007.073,306.734 1005.71,308.755 1003.644,310.149 C1002.465,314.341 1002.418,316.788 1004.603,320.727 C1004.682,320.858 1004.764,320.991 1004.875,321.169 C1004.792,321.036 1005.083,321.503 1005.146,321.607 C1005.366,321.963 1005.523,322.227 1005.668,322.49 C1006.588,324.159 1006.821,325.579 1006.244,327.385 C1006.048,327.999 1005.84,328.542 1005.499,329.368 C1005.461,329.46 1005.419,329.562 1005.339,329.753 C1005.275,329.908 1005.228,330.021 1005.183,330.132 C1004.459,331.906 1004.169,333.04 1004.169,334.573 C1004.169,335.003 1003.821,335.351 1003.391,335.351 C1002.962,335.351 1002.613,335.003 1002.613,334.573 C1002.613,332.802 1002.949,331.488 1003.743,329.544 C1003.79,329.43 1003.838,329.314 1003.902,329.158 C1003.982,328.966 1004.024,328.864 1004.062,328.774 C1004.388,327.984 1004.583,327.475 1004.763,326.912 C1005.197,325.553 1005.034,324.562 1004.306,323.24 C1004.176,323.004 1004.031,322.76 1003.823,322.424 C1003.784,322.361 1003.758,322.318 1003.69,322.209 C1003.622,322.1 1003.622,322.1 1003.554,321.99 C1003.44,321.807 1003.356,321.671 1003.273,321.533 C1001.057,317.942 1000.981,314.831 1001.851,310.893 C1000.576,311.153 1001.163,311.088 1000.095,311.142 C998.974,311.085 999.615,311.153 998.183,310.861 C997.211,314.8 997.304,317.063 999.336,320.727 C999.416,320.858 999.497,320.991 999.608,321.169 C999.525,321.036 999.816,321.503 999.88,321.607 C1000.1,321.963 1000.257,322.227 1000.401,322.49 C1001.321,324.159 1001.554,325.579 1000.977,327.385 C1000.781,327.999 1000.574,328.542 1000.232,329.368 C1000.194,329.46 1000.152,329.562 1000.072,329.753 C1000.008,329.908 999.962,330.021 999.916,330.132 C999.192,331.906 998.902,333.04 998.902,334.573 C998.902,335.003 998.554,335.351 998.124,335.351 C997.695,335.351 997.347,335.003 997.347,334.573 C997.347,332.802 997.682,331.488 998.476,329.544 C998.523,329.43 998.571,329.314 998.636,329.158 C998.715,328.966 998.757,328.864 998.795,328.774 C999.121,327.984 999.316,327.475 999.496,326.912 C999.93,325.553 999.767,324.562 999.039,323.24 C998.909,323.004 998.764,322.76 998.557,322.424 C998.518,322.361 998.491,322.318 998.423,322.209 C998.356,322.1 998.356,322.1 998.287,321.99 C998.173,321.807 998.089,321.671 998.006,321.533 C995.767,317.834 995.599,314.324 996.729,310.273 C994.452,308.946 993.248,306.763 993.116,304.163 C993.116,300.308 996.241,297.184 1000.095,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1014.053,374.824 C1010.199,374.824 1007.074,371.7 1007.074,367.845 C1007.076,365.274 1008.439,363.253 1010.504,361.859 C1011.683,357.667 1011.73,355.22 1009.546,351.281 C1009.466,351.15 1009.385,351.017 1009.274,350.839 C1009.356,350.972 1009.066,350.505 1009.002,350.401 C1008.782,350.045 1008.625,349.781 1008.48,349.518 C1007.561,347.849 1007.328,346.429 1007.905,344.623 C1008.101,344.009 1008.308,343.466 1008.65,342.64 C1008.688,342.548 1008.73,342.446 1008.81,342.255 C1008.874,342.1 1008.92,341.987 1008.966,341.876 C1009.69,340.102 1009.98,338.968 1009.98,337.435 C1009.98,337.005 1010.328,336.657 1010.758,336.657 C1011.187,336.657 1011.535,337.005 1011.535,337.435 C1011.535,339.206 1011.199,340.52 1010.405,342.464 C1010.359,342.578 1010.311,342.694 1010.246,342.85 C1010.167,343.042 1010.124,343.144 1010.087,343.234 C1009.761,344.024 1009.566,344.533 1009.386,345.096 C1008.952,346.455 1009.115,347.446 1009.843,348.768 C1009.973,349.004 1010.118,349.248 1010.325,349.584 C1010.364,349.647 1010.391,349.69 1010.458,349.799 C1010.526,349.908 1010.526,349.908 1010.595,350.018 C1010.708,350.201 1010.793,350.337 1010.876,350.475 C1013.092,354.066 1013.168,357.177 1012.298,361.115 C1013.573,360.855 1012.986,360.92 1014.053,360.866 C1015.174,360.923 1014.534,360.855 1015.966,361.147 C1016.938,357.208 1016.844,354.945 1014.813,351.281 C1014.733,351.15 1014.652,351.017 1014.541,350.839 C1014.623,350.972 1014.333,350.505 1014.269,350.401 C1014.049,350.045 1013.892,349.781 1013.747,349.518 C1012.828,347.849 1012.594,346.429 1013.171,344.623 C1013.367,344.009 1013.575,343.466 1013.917,342.64 C1013.954,342.548 1013.997,342.446 1014.076,342.255 C1014.14,342.1 1014.187,341.987 1014.233,341.876 C1014.957,340.102 1015.247,338.968 1015.247,337.435 C1015.247,337.005 1015.595,336.657 1016.024,336.657 C1016.454,336.657 1016.802,337.005 1016.802,337.435 C1016.802,339.206 1016.466,340.52 1015.672,342.464 C1015.626,342.578 1015.578,342.694 1015.513,342.85 C1015.433,343.042 1015.391,343.144 1015.354,343.234 C1015.027,344.024 1014.833,344.533 1014.653,345.096 C1014.219,346.455 1014.381,347.446 1015.109,348.768 C1015.239,349.004 1015.385,349.248 1015.592,349.584 C1015.631,349.647 1015.658,349.69 1015.725,349.799 C1015.793,349.908 1015.793,349.908 1015.862,350.018 C1015.975,350.201 1016.06,350.337 1016.143,350.475 C1018.382,354.174 1018.549,357.684 1017.419,361.735 C1019.696,363.062 1020.901,365.245 1021.032,367.845 C1021.032,371.7 1017.908,374.824 1014.053,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1014.053,297.184 C1017.908,297.184 1021.032,300.308 1021.032,304.163 C1021.031,306.734 1019.667,308.755 1017.602,310.149 C1016.423,314.341 1016.376,316.788 1018.56,320.727 C1018.64,320.858 1018.722,320.991 1018.833,321.169 C1018.75,321.036 1019.041,321.503 1019.104,321.607 C1019.324,321.963 1019.481,322.227 1019.626,322.49 C1020.546,324.159 1020.779,325.579 1020.202,327.385 C1020.006,327.999 1019.798,328.542 1019.457,329.368 C1019.419,329.46 1019.377,329.562 1019.297,329.753 C1019.233,329.908 1019.186,330.021 1019.141,330.132 C1018.416,331.906 1018.127,333.04 1018.127,334.573 C1018.127,335.003 1017.779,335.351 1017.349,335.351 C1016.92,335.351 1016.571,335.003 1016.571,334.573 C1016.571,332.802 1016.907,331.488 1017.701,329.544 C1017.748,329.43 1017.795,329.314 1017.86,329.158 C1017.94,328.966 1017.982,328.864 1018.02,328.774 C1018.346,327.984 1018.541,327.475 1018.721,326.912 C1019.155,325.553 1018.992,324.562 1018.264,323.24 C1018.134,323.004 1017.989,322.76 1017.781,322.424 C1017.742,322.361 1017.715,322.318 1017.648,322.209 C1017.58,322.1 1017.58,322.1 1017.512,321.99 C1017.398,321.807 1017.314,321.671 1017.231,321.533 C1015.015,317.942 1014.939,314.831 1015.809,310.893 C1014.534,311.153 1015.121,311.088 1014.053,311.142 C1012.932,311.085 1013.573,311.153 1012.141,310.861 C1011.169,314.8 1011.262,317.063 1013.294,320.727 C1013.373,320.858 1013.455,320.991 1013.566,321.169 C1013.483,321.036 1013.774,321.503 1013.838,321.607 C1014.057,321.963 1014.214,322.227 1014.359,322.49 C1015.279,324.159 1015.512,325.579 1014.935,327.385 C1014.739,327.999 1014.531,328.542 1014.19,329.368 C1014.152,329.46 1014.11,329.562 1014.03,329.753 C1013.966,329.908 1013.919,330.021 1013.874,330.132 C1013.15,331.906 1012.86,333.04 1012.86,334.573 C1012.86,335.003 1012.512,335.351 1012.082,335.351 C1011.653,335.351 1011.305,335.003 1011.305,334.573 C1011.305,332.802 1011.64,331.488 1012.434,329.544 C1012.481,329.43 1012.529,329.314 1012.594,329.158 C1012.673,328.966 1012.715,328.864 1012.753,328.774 C1013.079,327.984 1013.274,327.475 1013.454,326.912 C1013.888,325.553 1013.725,324.562 1012.997,323.24 C1012.867,323.004 1012.722,322.76 1012.514,322.424 C1012.476,322.361 1012.449,322.318 1012.381,322.209 C1012.314,322.1 1012.314,322.1 1012.245,321.99 C1012.131,321.807 1012.047,321.671 1011.964,321.533 C1009.724,317.834 1009.557,314.324 1010.687,310.273 C1008.41,308.946 1007.206,306.763 1007.074,304.163 C1007.074,300.308 1010.199,297.184 1014.053,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1028.011,374.824 C1024.157,374.824 1021.032,371.7 1021.032,367.845 C1021.034,365.274 1022.397,363.253 1024.462,361.859 C1025.641,357.667 1025.688,355.22 1023.504,351.281 C1023.424,351.15 1023.343,351.017 1023.232,350.839 C1023.314,350.972 1023.024,350.505 1022.96,350.401 C1022.74,350.045 1022.583,349.781 1022.438,349.518 C1021.519,347.849 1021.286,346.429 1021.863,344.623 C1022.058,344.009 1022.266,343.466 1022.608,342.64 C1022.646,342.548 1022.688,342.446 1022.768,342.255 C1022.831,342.1 1022.878,341.987 1022.924,341.876 C1023.648,340.102 1023.938,338.968 1023.938,337.435 C1023.938,337.005 1024.286,336.657 1024.716,336.657 C1025.145,336.657 1025.493,337.005 1025.493,337.435 C1025.493,339.206 1025.157,340.52 1024.363,342.464 C1024.317,342.578 1024.269,342.694 1024.204,342.85 C1024.124,343.042 1024.082,343.144 1024.045,343.234 C1023.719,344.024 1023.524,344.533 1023.344,345.096 C1022.91,346.455 1023.072,347.446 1023.8,348.768 C1023.931,349.004 1024.076,349.248 1024.283,349.584 C1024.322,349.647 1024.349,349.69 1024.416,349.799 C1024.484,349.908 1024.484,349.908 1024.553,350.018 C1024.666,350.201 1024.751,350.337 1024.834,350.475 C1027.05,354.066 1027.126,357.177 1026.256,361.115 C1027.531,360.855 1026.944,360.92 1028.011,360.866 C1029.132,360.923 1028.491,360.855 1029.923,361.147 C1030.896,357.208 1030.802,354.945 1028.771,351.281 C1028.691,351.15 1028.609,351.017 1028.499,350.839 C1028.581,350.972 1028.291,350.505 1028.227,350.401 C1028.007,350.045 1027.85,349.781 1027.705,349.518 C1026.786,347.849 1026.552,346.429 1027.129,344.623 C1027.325,344.009 1027.533,343.466 1027.875,342.64 C1027.912,342.548 1027.955,342.446 1028.034,342.255 C1028.098,342.1 1028.145,341.987 1028.19,341.876 C1028.915,340.102 1029.205,338.968 1029.205,337.435 C1029.205,337.005 1029.553,336.657 1029.982,336.657 C1030.412,336.657 1030.76,337.005 1030.76,337.435 C1030.76,339.206 1030.424,340.52 1029.63,342.464 C1029.584,342.578 1029.536,342.694 1029.471,342.85 C1029.391,343.042 1029.349,343.144 1029.312,343.234 C1028.985,344.024 1028.791,344.533 1028.611,345.096 C1028.177,346.455 1028.339,347.446 1029.067,348.768 C1029.197,349.004 1029.343,349.248 1029.55,349.584 C1029.589,349.647 1029.616,349.69 1029.683,349.799 C1029.751,349.908 1029.751,349.908 1029.82,350.018 C1029.933,350.201 1030.017,350.337 1030.101,350.475 C1032.34,354.174 1032.507,357.684 1031.377,361.735 C1033.654,363.062 1034.859,365.245 1034.99,367.845 C1034.99,371.7 1031.865,374.824 1028.011,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1028.011,297.184 C1031.866,297.184 1034.99,300.308 1034.99,304.163 C1034.988,306.734 1033.625,308.755 1031.56,310.149 C1030.381,314.341 1030.334,316.788 1032.518,320.727 C1032.598,320.858 1032.68,320.991 1032.79,321.169 C1032.708,321.036 1032.999,321.503 1033.062,321.607 C1033.282,321.963 1033.439,322.227 1033.584,322.49 C1034.504,324.159 1034.737,325.579 1034.16,327.385 C1033.964,327.999 1033.756,328.542 1033.415,329.368 C1033.377,329.46 1033.334,329.562 1033.255,329.753 C1033.191,329.908 1033.144,330.021 1033.099,330.132 C1032.374,331.906 1032.085,333.04 1032.084,334.573 C1032.085,335.003 1031.736,335.351 1031.307,335.351 C1030.877,335.351 1030.529,335.003 1030.529,334.573 C1030.529,332.802 1030.865,331.488 1031.659,329.544 C1031.706,329.43 1031.753,329.314 1031.818,329.158 C1031.898,328.966 1031.94,328.864 1031.977,328.774 C1032.304,327.984 1032.499,327.475 1032.678,326.912 C1033.113,325.553 1032.95,324.562 1032.222,323.24 C1032.092,323.004 1031.947,322.76 1031.739,322.424 C1031.7,322.361 1031.673,322.318 1031.606,322.209 C1031.538,322.1 1031.538,322.1 1031.469,321.99 C1031.356,321.807 1031.272,321.671 1031.189,321.533 C1028.973,317.942 1028.896,314.831 1029.766,310.893 C1028.491,311.153 1029.079,311.088 1028.011,311.142 C1026.89,311.085 1027.531,311.153 1026.099,310.861 C1025.127,314.8 1025.22,317.063 1027.251,320.727 C1027.331,320.858 1027.413,320.991 1027.524,321.169 C1027.441,321.036 1027.732,321.503 1027.795,321.607 C1028.015,321.963 1028.172,322.227 1028.317,322.49 C1029.237,324.159 1029.47,325.579 1028.893,327.385 C1028.697,327.999 1028.489,328.542 1028.148,329.368 C1028.11,329.46 1028.068,329.562 1027.988,329.753 C1027.924,329.908 1027.877,330.021 1027.832,330.132 C1027.108,331.906 1026.818,333.04 1026.818,334.573 C1026.818,335.003 1026.469,335.351 1026.04,335.351 C1025.611,335.351 1025.262,335.003 1025.262,334.573 C1025.262,332.802 1025.598,331.488 1026.392,329.544 C1026.439,329.43 1026.487,329.314 1026.551,329.158 C1026.631,328.966 1026.673,328.864 1026.711,328.774 C1027.037,327.984 1027.232,327.475 1027.412,326.912 C1027.846,325.553 1027.683,324.562 1026.955,323.24 C1026.825,323.004 1026.68,322.76 1026.472,322.424 C1026.433,322.361 1026.406,322.318 1026.339,322.209 C1026.271,322.1 1026.271,322.1 1026.203,321.99 C1026.089,321.807 1026.005,321.671 1025.922,321.533 C1023.682,317.834 1023.515,314.324 1024.645,310.273 C1022.368,308.946 1021.164,306.763 1021.032,304.163 C1021.032,300.308 1024.157,297.184 1028.011,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1041.969,374.824 C1038.115,374.824 1034.99,371.7 1034.99,367.845 C1034.992,365.274 1036.355,363.253 1038.42,361.859 C1039.599,357.667 1039.646,355.22 1037.462,351.281 C1037.382,351.15 1037.301,351.017 1037.19,350.839 C1037.272,350.972 1036.982,350.505 1036.918,350.401 C1036.698,350.045 1036.541,349.781 1036.396,349.518 C1035.477,347.849 1035.244,346.429 1035.82,344.623 C1036.016,344.009 1036.224,343.466 1036.566,342.64 C1036.604,342.548 1036.646,342.446 1036.725,342.255 C1036.789,342.1 1036.836,341.987 1036.882,341.876 C1037.606,340.102 1037.896,338.968 1037.896,337.435 C1037.896,337.005 1038.244,336.657 1038.673,336.657 C1039.103,336.657 1039.451,337.005 1039.451,337.435 C1039.451,339.206 1039.115,340.52 1038.321,342.464 C1038.275,342.578 1038.227,342.694 1038.162,342.85 C1038.082,343.042 1038.04,343.144 1038.003,343.234 C1037.677,344.024 1037.482,344.533 1037.302,345.096 C1036.868,346.455 1037.03,347.446 1037.758,348.768 C1037.889,349.004 1038.034,349.248 1038.241,349.584 C1038.28,349.647 1038.307,349.69 1038.374,349.799 C1038.442,349.908 1038.442,349.908 1038.511,350.018 C1038.624,350.201 1038.708,350.337 1038.792,350.475 C1041.008,354.066 1041.084,357.177 1040.214,361.115 C1041.489,360.855 1040.902,360.92 1041.969,360.866 C1043.09,360.923 1042.449,360.855 1043.881,361.147 C1044.854,357.208 1044.76,354.945 1042.729,351.281 C1042.649,351.15 1042.568,351.017 1042.457,350.839 C1042.539,350.972 1042.249,350.505 1042.185,350.401 C1041.965,350.045 1041.808,349.781 1041.663,349.518 C1040.743,347.849 1040.51,346.429 1041.087,344.623 C1041.283,344.009 1041.491,343.466 1041.833,342.64 C1041.87,342.548 1041.913,342.446 1041.992,342.255 C1042.056,342.1 1042.103,341.987 1042.148,341.876 C1042.873,340.102 1043.163,338.968 1043.163,337.435 C1043.163,337.005 1043.511,336.657 1043.94,336.657 C1044.37,336.657 1044.718,337.005 1044.718,337.435 C1044.718,339.206 1044.382,340.52 1043.588,342.464 C1043.542,342.578 1043.494,342.694 1043.429,342.85 C1043.349,343.042 1043.307,343.144 1043.27,343.234 C1042.943,344.024 1042.749,344.533 1042.569,345.096 C1042.135,346.455 1042.297,347.446 1043.025,348.768 C1043.155,349.004 1043.301,349.248 1043.508,349.584 C1043.547,349.647 1043.574,349.69 1043.641,349.799 C1043.709,349.908 1043.709,349.908 1043.778,350.018 C1043.891,350.201 1043.975,350.337 1044.059,350.475 C1046.298,354.174 1046.465,357.684 1045.335,361.735 C1047.612,363.062 1048.817,365.245 1048.948,367.845 C1048.948,371.7 1045.823,374.824 1041.969,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1041.969,297.184 C1045.823,297.184 1048.948,300.308 1048.948,304.163 C1048.946,306.734 1047.583,308.755 1045.518,310.149 C1044.339,314.341 1044.292,316.788 1046.476,320.727 C1046.556,320.858 1046.638,320.991 1046.748,321.169 C1046.666,321.036 1046.956,321.503 1047.02,321.607 C1047.24,321.963 1047.397,322.227 1047.542,322.49 C1048.462,324.159 1048.695,325.579 1048.118,327.385 C1047.922,327.999 1047.714,328.542 1047.373,329.368 C1047.335,329.46 1047.292,329.562 1047.213,329.753 C1047.149,329.908 1047.102,330.021 1047.057,330.132 C1046.332,331.906 1046.042,333.04 1046.042,334.573 C1046.042,335.003 1045.694,335.351 1045.265,335.351 C1044.835,335.351 1044.487,335.003 1044.487,334.573 C1044.487,332.802 1044.823,331.488 1045.617,329.544 C1045.664,329.43 1045.711,329.314 1045.776,329.158 C1045.856,328.966 1045.898,328.864 1045.935,328.774 C1046.262,327.984 1046.456,327.475 1046.636,326.912 C1047.071,325.553 1046.908,324.562 1046.18,323.24 C1046.05,323.004 1045.905,322.76 1045.697,322.424 C1045.658,322.361 1045.631,322.318 1045.564,322.209 C1045.496,322.1 1045.496,322.1 1045.427,321.99 C1045.314,321.807 1045.23,321.671 1045.146,321.533 C1042.93,317.942 1042.854,314.831 1043.724,310.893 C1042.449,311.153 1043.037,311.088 1041.969,311.142 C1040.848,311.085 1041.489,311.153 1040.057,310.861 C1039.084,314.8 1039.178,317.063 1041.209,320.727 C1041.289,320.858 1041.371,320.991 1041.482,321.169 C1041.399,321.036 1041.69,321.503 1041.753,321.607 C1041.973,321.963 1042.13,322.227 1042.275,322.49 C1043.195,324.159 1043.428,325.579 1042.851,327.385 C1042.655,327.999 1042.447,328.542 1042.106,329.368 C1042.068,329.46 1042.026,329.562 1041.946,329.753 C1041.882,329.908 1041.835,330.021 1041.79,330.132 C1041.065,331.906 1040.776,333.04 1040.776,334.573 C1040.776,335.003 1040.427,335.351 1039.998,335.351 C1039.568,335.351 1039.22,335.003 1039.22,334.573 C1039.22,332.802 1039.556,331.488 1040.35,329.544 C1040.397,329.43 1040.444,329.314 1040.509,329.158 C1040.589,328.966 1040.631,328.864 1040.669,328.774 C1040.995,327.984 1041.19,327.475 1041.37,326.912 C1041.804,325.553 1041.641,324.562 1040.913,323.24 C1040.783,323.004 1040.638,322.76 1040.43,322.424 C1040.391,322.361 1040.364,322.318 1040.297,322.209 C1040.229,322.1 1040.229,322.1 1040.161,321.99 C1040.047,321.807 1039.963,321.671 1039.88,321.533 C1037.64,317.834 1037.473,314.324 1038.603,310.273 C1036.326,308.946 1035.121,306.763 1034.99,304.163 C1034.99,300.308 1038.115,297.184 1041.969,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1055.927,374.824 C1052.073,374.824 1048.948,371.7 1048.948,367.845 C1048.95,365.274 1050.313,363.253 1052.378,361.859 C1053.557,357.667 1053.604,355.22 1051.42,351.281 C1051.34,351.15 1051.259,351.017 1051.148,350.839 C1051.23,350.972 1050.94,350.505 1050.876,350.401 C1050.656,350.045 1050.499,349.781 1050.354,349.518 C1049.435,347.849 1049.201,346.429 1049.778,344.623 C1049.974,344.009 1050.182,343.466 1050.524,342.64 C1050.561,342.548 1050.604,342.446 1050.683,342.255 C1050.747,342.1 1050.794,341.987 1050.839,341.876 C1051.564,340.102 1051.854,338.968 1051.854,337.435 C1051.854,337.005 1052.202,336.657 1052.631,336.657 C1053.061,336.657 1053.409,337.005 1053.409,337.435 C1053.409,339.206 1053.073,340.52 1052.279,342.464 C1052.233,342.578 1052.185,342.694 1052.12,342.85 C1052.04,343.042 1051.998,343.144 1051.961,343.234 C1051.635,344.024 1051.44,344.533 1051.26,345.096 C1050.826,346.455 1050.988,347.446 1051.716,348.768 C1051.846,349.004 1051.992,349.248 1052.199,349.584 C1052.238,349.647 1052.265,349.69 1052.332,349.799 C1052.4,349.908 1052.4,349.908 1052.469,350.018 C1052.582,350.201 1052.667,350.337 1052.75,350.475 C1054.966,354.066 1055.042,357.177 1054.172,361.115 C1055.447,360.855 1054.86,360.92 1055.927,360.866 C1057.048,360.923 1056.407,360.855 1057.839,361.147 C1058.812,357.208 1058.718,354.945 1056.687,351.281 C1056.607,351.15 1056.525,351.017 1056.415,350.839 C1056.497,350.972 1056.207,350.505 1056.143,350.401 C1055.923,350.045 1055.766,349.781 1055.621,349.518 C1054.701,347.849 1054.468,346.429 1055.045,344.623 C1055.241,344.009 1055.449,343.466 1055.79,342.64 C1055.828,342.548 1055.871,342.446 1055.95,342.255 C1056.014,342.1 1056.061,341.987 1056.106,341.876 C1056.831,340.102 1057.121,338.968 1057.121,337.435 C1057.121,337.005 1057.469,336.657 1057.898,336.657 C1058.328,336.657 1058.676,337.005 1058.676,337.435 C1058.676,339.206 1058.34,340.52 1057.546,342.464 C1057.5,342.578 1057.452,342.694 1057.387,342.85 C1057.307,343.042 1057.265,343.144 1057.228,343.234 C1056.901,344.024 1056.707,344.533 1056.527,345.096 C1056.093,346.455 1056.255,347.446 1056.983,348.768 C1057.113,349.004 1057.258,349.248 1057.466,349.584 C1057.505,349.647 1057.532,349.69 1057.599,349.799 C1057.667,349.908 1057.667,349.908 1057.736,350.018 C1057.849,350.201 1057.933,350.337 1058.017,350.475 C1060.256,354.174 1060.423,357.684 1059.293,361.735 C1061.57,363.062 1062.775,365.245 1062.906,367.845 C1062.906,371.7 1059.781,374.824 1055.927,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1055.927,297.184 C1059.781,297.184 1062.906,300.308 1062.906,304.163 C1062.904,306.734 1061.541,308.755 1059.476,310.149 C1058.297,314.341 1058.25,316.788 1060.434,320.727 C1060.514,320.858 1060.596,320.991 1060.706,321.169 C1060.624,321.036 1060.914,321.503 1060.978,321.607 C1061.198,321.963 1061.355,322.227 1061.5,322.49 C1062.42,324.159 1062.653,325.579 1062.076,327.385 C1061.88,327.999 1061.672,328.542 1061.331,329.368 C1061.293,329.46 1061.25,329.562 1061.171,329.753 C1061.107,329.908 1061.06,330.021 1061.015,330.132 C1060.29,331.906 1060,333.04 1060,334.573 C1060,335.003 1059.652,335.351 1059.223,335.351 C1058.793,335.351 1058.445,335.003 1058.445,334.573 C1058.445,332.802 1058.781,331.488 1059.575,329.544 C1059.622,329.43 1059.669,329.314 1059.734,329.158 C1059.814,328.966 1059.856,328.864 1059.893,328.774 C1060.22,327.984 1060.414,327.475 1060.594,326.912 C1061.029,325.553 1060.866,324.562 1060.138,323.24 C1060.008,323.004 1059.863,322.76 1059.655,322.424 C1059.616,322.361 1059.589,322.318 1059.522,322.209 C1059.454,322.1 1059.454,322.1 1059.385,321.99 C1059.272,321.807 1059.188,321.671 1059.104,321.533 C1056.888,317.942 1056.812,314.831 1057.682,310.893 C1056.407,311.153 1056.995,311.088 1055.927,311.142 C1054.806,311.085 1055.447,311.153 1054.015,310.861 C1053.042,314.8 1053.136,317.063 1055.167,320.727 C1055.247,320.858 1055.329,320.991 1055.439,321.169 C1055.357,321.036 1055.647,321.503 1055.711,321.607 C1055.931,321.963 1056.088,322.227 1056.233,322.49 C1057.153,324.159 1057.386,325.579 1056.809,327.385 C1056.613,327.999 1056.405,328.542 1056.064,329.368 C1056.026,329.46 1055.983,329.562 1055.904,329.753 C1055.84,329.908 1055.793,330.021 1055.748,330.132 C1055.023,331.906 1054.734,333.04 1054.734,334.573 C1054.734,335.003 1054.385,335.351 1053.956,335.351 C1053.526,335.351 1053.178,335.003 1053.178,334.573 C1053.178,332.802 1053.514,331.488 1054.308,329.544 C1054.355,329.43 1054.402,329.314 1054.467,329.158 C1054.547,328.966 1054.589,328.864 1054.626,328.774 C1054.953,327.984 1055.147,327.475 1055.328,326.912 C1055.762,325.553 1055.599,324.562 1054.871,323.24 C1054.741,323.004 1054.596,322.76 1054.388,322.424 C1054.349,322.361 1054.322,322.318 1054.255,322.209 C1054.187,322.1 1054.187,322.1 1054.118,321.99 C1054.005,321.807 1053.921,321.671 1053.838,321.533 C1051.598,317.834 1051.431,314.324 1052.561,310.273 C1050.284,308.946 1049.079,306.763 1048.948,304.163 C1048.948,300.308 1052.073,297.184 1055.927,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1069.885,374.824 C1066.031,374.824 1062.906,371.7 1062.906,367.845 C1062.908,365.274 1064.271,363.253 1066.336,361.859 C1067.515,357.667 1067.562,355.22 1065.378,351.281 C1065.298,351.15 1065.216,351.017 1065.106,350.839 C1065.188,350.972 1064.898,350.505 1064.834,350.401 C1064.614,350.045 1064.457,349.781 1064.312,349.518 C1063.392,347.849 1063.159,346.429 1063.736,344.623 C1063.932,344.009 1064.14,343.466 1064.481,342.64 C1064.519,342.548 1064.562,342.446 1064.641,342.255 C1064.705,342.1 1064.752,341.987 1064.797,341.876 C1065.522,340.102 1065.812,338.968 1065.812,337.435 C1065.812,337.005 1066.16,336.657 1066.589,336.657 C1067.019,336.657 1067.367,337.005 1067.367,337.435 C1067.367,339.206 1067.031,340.52 1066.237,342.464 C1066.191,342.578 1066.143,342.694 1066.078,342.85 C1065.998,343.042 1065.956,343.144 1065.919,343.234 C1065.592,344.024 1065.398,344.533 1065.218,345.096 C1064.784,346.455 1064.946,347.446 1065.674,348.768 C1065.804,349.004 1065.95,349.248 1066.157,349.584 C1066.196,349.647 1066.223,349.69 1066.29,349.799 C1066.358,349.908 1066.358,349.908 1066.427,350.018 C1066.54,350.201 1066.624,350.337 1066.708,350.475 C1068.924,354.066 1069,357.177 1068.13,361.115 C1069.405,360.855 1068.818,360.92 1069.885,360.866 C1071.006,360.923 1070.365,360.855 1071.797,361.147 C1072.77,357.208 1072.676,354.945 1070.645,351.281 C1070.565,351.15 1070.483,351.017 1070.373,350.839 C1070.455,350.972 1070.165,350.505 1070.101,350.401 C1069.881,350.045 1069.724,349.781 1069.579,349.518 C1068.659,347.849 1068.426,346.429 1069.003,344.623 C1069.199,344.009 1069.407,343.466 1069.748,342.64 C1069.786,342.548 1069.829,342.446 1069.908,342.255 C1069.972,342.1 1070.019,341.987 1070.064,341.876 C1070.789,340.102 1071.078,338.968 1071.078,337.435 C1071.078,337.005 1071.427,336.657 1071.856,336.657 C1072.286,336.657 1072.634,337.005 1072.634,337.435 C1072.634,339.206 1072.298,340.52 1071.504,342.464 C1071.457,342.578 1071.41,342.694 1071.345,342.85 C1071.265,343.042 1071.223,343.144 1071.186,343.234 C1070.859,344.024 1070.665,344.533 1070.485,345.096 C1070.05,346.455 1070.213,347.446 1070.941,348.768 C1071.071,349.004 1071.216,349.248 1071.424,349.584 C1071.463,349.647 1071.49,349.69 1071.557,349.799 C1071.625,349.908 1071.625,349.908 1071.694,350.018 C1071.807,350.201 1071.891,350.337 1071.974,350.475 C1074.214,354.174 1074.381,357.684 1073.251,361.735 C1075.528,363.062 1076.733,365.245 1076.864,367.845 C1076.864,371.7 1073.739,374.824 1069.885,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1069.885,297.184 C1073.739,297.184 1076.864,300.308 1076.864,304.163 C1076.862,306.734 1075.499,308.755 1073.434,310.149 C1072.255,314.341 1072.208,316.788 1074.392,320.727 C1074.472,320.858 1074.554,320.991 1074.664,321.169 C1074.582,321.036 1074.872,321.503 1074.936,321.607 C1075.156,321.963 1075.313,322.227 1075.458,322.49 C1076.378,324.159 1076.611,325.579 1076.034,327.385 C1075.838,327.999 1075.63,328.542 1075.289,329.368 C1075.251,329.46 1075.208,329.562 1075.129,329.753 C1075.065,329.908 1075.018,330.021 1074.973,330.132 C1074.248,331.906 1073.958,333.04 1073.958,334.573 C1073.958,335.003 1073.61,335.351 1073.181,335.351 C1072.751,335.351 1072.403,335.003 1072.403,334.573 C1072.403,332.802 1072.739,331.488 1073.533,329.544 C1073.579,329.43 1073.627,329.314 1073.692,329.158 C1073.772,328.966 1073.814,328.864 1073.851,328.774 C1074.178,327.984 1074.372,327.475 1074.552,326.912 C1074.986,325.553 1074.824,324.562 1074.096,323.24 C1073.966,323.004 1073.82,322.76 1073.613,322.424 C1073.574,322.361 1073.547,322.318 1073.48,322.209 C1073.412,322.1 1073.412,322.1 1073.343,321.99 C1073.23,321.807 1073.146,321.671 1073.062,321.533 C1070.846,317.942 1070.77,314.831 1071.64,310.893 C1070.365,311.153 1070.952,311.088 1069.885,311.142 C1068.764,311.085 1069.405,311.153 1067.973,310.861 C1067,314.8 1067.094,317.063 1069.125,320.727 C1069.205,320.858 1069.287,320.991 1069.397,321.169 C1069.315,321.036 1069.605,321.503 1069.669,321.607 C1069.889,321.963 1070.046,322.227 1070.191,322.49 C1071.111,324.159 1071.344,325.579 1070.767,327.385 C1070.571,327.999 1070.363,328.542 1070.022,329.368 C1069.984,329.46 1069.941,329.562 1069.862,329.753 C1069.798,329.908 1069.751,330.021 1069.706,330.132 C1068.981,331.906 1068.691,333.04 1068.691,334.573 C1068.691,335.003 1068.343,335.351 1067.914,335.351 C1067.484,335.351 1067.136,335.003 1067.136,334.573 C1067.136,332.802 1067.472,331.488 1068.266,329.544 C1068.313,329.43 1068.36,329.314 1068.425,329.158 C1068.505,328.966 1068.547,328.864 1068.584,328.774 C1068.911,327.984 1069.105,327.475 1069.285,326.912 C1069.72,325.553 1069.557,324.562 1068.829,323.24 C1068.699,323.004 1068.554,322.76 1068.346,322.424 C1068.307,322.361 1068.28,322.318 1068.213,322.209 C1068.145,322.1 1068.145,322.1 1068.076,321.99 C1067.963,321.807 1067.879,321.671 1067.795,321.533 C1065.556,317.834 1065.389,314.324 1066.519,310.273 C1064.242,308.946 1063.037,306.763 1062.906,304.163 C1062.906,300.308 1066.031,297.184 1069.885,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1083.843,374.824 C1079.989,374.824 1076.864,371.7 1076.864,367.845 C1076.866,365.274 1078.229,363.253 1080.294,361.859 C1081.473,357.667 1081.52,355.22 1079.336,351.281 C1079.256,351.15 1079.174,351.017 1079.064,350.839 C1079.146,350.972 1078.856,350.505 1078.792,350.401 C1078.572,350.045 1078.415,349.781 1078.27,349.518 C1077.35,347.849 1077.117,346.429 1077.694,344.623 C1077.89,344.009 1078.098,343.466 1078.439,342.64 C1078.477,342.548 1078.52,342.446 1078.599,342.255 C1078.663,342.1 1078.71,341.987 1078.755,341.876 C1079.48,340.102 1079.77,338.968 1079.77,337.435 C1079.77,337.005 1080.118,336.657 1080.547,336.657 C1080.977,336.657 1081.325,337.005 1081.325,337.435 C1081.325,339.206 1080.989,340.52 1080.195,342.464 C1080.148,342.578 1080.101,342.694 1080.036,342.85 C1079.956,343.042 1079.914,343.144 1079.877,343.234 C1079.55,344.024 1079.356,344.533 1079.176,345.096 C1078.741,346.455 1078.904,347.446 1079.632,348.768 C1079.762,349.004 1079.907,349.248 1080.115,349.584 C1080.154,349.647 1080.181,349.69 1080.248,349.799 C1080.316,349.908 1080.316,349.908 1080.385,350.018 C1080.498,350.201 1080.582,350.337 1080.666,350.475 C1082.882,354.066 1082.958,357.177 1082.088,361.115 C1083.363,360.855 1082.775,360.92 1083.843,360.866 C1084.964,360.923 1084.323,360.855 1085.755,361.147 C1086.728,357.208 1086.634,354.945 1084.603,351.281 C1084.523,351.15 1084.441,351.017 1084.331,350.839 C1084.413,350.972 1084.123,350.505 1084.059,350.401 C1083.839,350.045 1083.682,349.781 1083.537,349.518 C1082.617,347.849 1082.384,346.429 1082.961,344.623 C1083.157,344.009 1083.365,343.466 1083.706,342.64 C1083.744,342.548 1083.787,342.446 1083.866,342.255 C1083.93,342.1 1083.977,341.987 1084.022,341.876 C1084.747,340.102 1085.036,338.968 1085.036,337.435 C1085.036,337.005 1085.385,336.657 1085.814,336.657 C1086.244,336.657 1086.592,337.005 1086.592,337.435 C1086.592,339.206 1086.256,340.52 1085.462,342.464 C1085.415,342.578 1085.368,342.694 1085.303,342.85 C1085.223,343.042 1085.181,343.144 1085.144,343.234 C1084.817,344.024 1084.622,344.533 1084.443,345.096 C1084.008,346.455 1084.171,347.446 1084.899,348.768 C1085.029,349.004 1085.174,349.248 1085.382,349.584 C1085.421,349.647 1085.448,349.69 1085.515,349.799 C1085.583,349.908 1085.583,349.908 1085.651,350.018 C1085.765,350.201 1085.849,350.337 1085.932,350.475 C1088.172,354.174 1088.339,357.684 1087.209,361.735 C1089.486,363.062 1090.69,365.245 1090.822,367.845 C1090.822,371.7 1087.697,374.824 1083.843,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1083.843,297.184 C1087.697,297.184 1090.822,300.308 1090.822,304.163 C1090.82,306.734 1089.457,308.755 1087.392,310.149 C1086.213,314.341 1086.166,316.788 1088.35,320.727 C1088.43,320.858 1088.511,320.991 1088.622,321.169 C1088.54,321.036 1088.83,321.503 1088.894,321.607 C1089.114,321.963 1089.271,322.227 1089.416,322.49 C1090.336,324.159 1090.569,325.579 1089.992,327.385 C1089.796,327.999 1089.588,328.542 1089.246,329.368 C1089.209,329.46 1089.166,329.562 1089.087,329.753 C1089.023,329.908 1088.976,330.021 1088.931,330.132 C1088.206,331.906 1087.916,333.04 1087.916,334.573 C1087.916,335.003 1087.568,335.351 1087.139,335.351 C1086.709,335.351 1086.361,335.003 1086.361,334.573 C1086.361,332.802 1086.697,331.488 1087.491,329.544 C1087.537,329.43 1087.585,329.314 1087.65,329.158 C1087.73,328.966 1087.772,328.864 1087.809,328.774 C1088.136,327.984 1088.33,327.475 1088.51,326.912 C1088.944,325.553 1088.782,324.562 1088.054,323.24 C1087.924,323.004 1087.778,322.76 1087.571,322.424 C1087.532,322.361 1087.505,322.318 1087.438,322.209 C1087.37,322.1 1087.37,322.1 1087.301,321.99 C1087.188,321.807 1087.104,321.671 1087.02,321.533 C1084.804,317.942 1084.728,314.831 1085.598,310.893 C1084.323,311.153 1084.91,311.088 1083.843,311.142 C1082.722,311.085 1083.363,311.153 1081.931,310.861 C1080.958,314.8 1081.052,317.063 1083.083,320.727 C1083.163,320.858 1083.245,320.991 1083.355,321.169 C1083.273,321.036 1083.563,321.503 1083.627,321.607 C1083.847,321.963 1084.004,322.227 1084.149,322.49 C1085.069,324.159 1085.302,325.579 1084.725,327.385 C1084.529,327.999 1084.321,328.542 1083.98,329.368 C1083.942,329.46 1083.899,329.562 1083.82,329.753 C1083.756,329.908 1083.709,330.021 1083.664,330.132 C1082.939,331.906 1082.649,333.04 1082.649,334.573 C1082.649,335.003 1082.301,335.351 1081.872,335.351 C1081.442,335.351 1081.094,335.003 1081.094,334.573 C1081.094,332.802 1081.43,331.488 1082.224,329.544 C1082.271,329.43 1082.318,329.314 1082.383,329.158 C1082.463,328.966 1082.505,328.864 1082.542,328.774 C1082.869,327.984 1083.063,327.475 1083.243,326.912 C1083.677,325.553 1083.515,324.562 1082.787,323.24 C1082.657,323.004 1082.511,322.76 1082.304,322.424 C1082.265,322.361 1082.238,322.318 1082.171,322.209 C1082.103,322.1 1082.103,322.1 1082.034,321.99 C1081.921,321.807 1081.837,321.671 1081.753,321.533 C1079.514,317.834 1079.347,314.324 1080.477,310.273 C1078.2,308.946 1076.995,306.763 1076.864,304.163 C1076.864,300.308 1079.989,297.184 1083.843,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1097.801,374.824 C1093.947,374.824 1090.822,371.7 1090.822,367.845 C1090.824,365.274 1092.187,363.253 1094.252,361.859 C1095.431,357.667 1095.478,355.22 1093.294,351.281 C1093.214,351.15 1093.132,351.017 1093.022,350.839 C1093.104,350.972 1092.814,350.505 1092.75,350.401 C1092.53,350.045 1092.373,349.781 1092.228,349.518 C1091.308,347.849 1091.075,346.429 1091.652,344.623 C1091.848,344.009 1092.056,343.466 1092.397,342.64 C1092.435,342.548 1092.478,342.446 1092.557,342.255 C1092.621,342.1 1092.668,341.987 1092.713,341.876 C1093.438,340.102 1093.728,338.968 1093.728,337.435 C1093.728,337.005 1094.076,336.657 1094.505,336.657 C1094.935,336.657 1095.283,337.005 1095.283,337.435 C1095.283,339.206 1094.947,340.52 1094.153,342.464 C1094.106,342.578 1094.059,342.694 1093.994,342.85 C1093.914,343.042 1093.872,343.144 1093.835,343.234 C1093.508,344.024 1093.314,344.533 1093.134,345.096 C1092.699,346.455 1092.862,347.446 1093.59,348.768 C1093.72,349.004 1093.865,349.248 1094.073,349.584 C1094.112,349.647 1094.139,349.69 1094.206,349.799 C1094.274,349.908 1094.274,349.908 1094.343,350.018 C1094.456,350.201 1094.54,350.337 1094.624,350.475 C1096.84,354.066 1096.916,357.177 1096.046,361.115 C1097.321,360.855 1096.733,360.92 1097.801,360.866 C1098.922,360.923 1098.281,360.855 1099.713,361.147 C1100.685,357.208 1100.592,354.945 1098.561,351.281 C1098.481,351.15 1098.399,351.017 1098.288,350.839 C1098.371,350.972 1098.08,350.505 1098.017,350.401 C1097.797,350.045 1097.64,349.781 1097.495,349.518 C1096.575,347.849 1096.342,346.429 1096.919,344.623 C1097.115,344.009 1097.323,343.466 1097.664,342.64 C1097.702,342.548 1097.745,342.446 1097.824,342.255 C1097.888,342.1 1097.935,341.987 1097.98,341.876 C1098.705,340.102 1098.994,338.968 1098.994,337.435 C1098.994,337.005 1099.343,336.657 1099.772,336.657 C1100.201,336.657 1100.55,337.005 1100.55,337.435 C1100.55,339.206 1100.214,340.52 1099.42,342.464 C1099.373,342.578 1099.326,342.694 1099.261,342.85 C1099.181,343.042 1099.139,343.144 1099.101,343.234 C1098.775,344.024 1098.58,344.533 1098.4,345.096 C1097.966,346.455 1098.129,347.446 1098.857,348.768 C1098.987,349.004 1099.132,349.248 1099.34,349.584 C1099.379,349.647 1099.406,349.69 1099.473,349.799 C1099.541,349.908 1099.541,349.908 1099.609,350.018 C1099.723,350.201 1099.807,350.337 1099.89,350.475 C1102.13,354.174 1102.297,357.684 1101.167,361.735 C1103.444,363.062 1104.648,365.245 1104.78,367.845 C1104.78,371.7 1101.655,374.824 1097.801,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1097.801,297.184 C1101.655,297.184 1104.78,300.308 1104.78,304.163 C1104.778,306.734 1103.415,308.755 1101.35,310.149 C1100.171,314.341 1100.124,316.788 1102.308,320.727 C1102.388,320.858 1102.469,320.991 1102.58,321.169 C1102.498,321.036 1102.788,321.503 1102.852,321.607 C1103.072,321.963 1103.229,322.227 1103.374,322.49 C1104.293,324.159 1104.526,325.579 1103.95,327.385 C1103.754,327.999 1103.546,328.542 1103.204,329.368 C1103.167,329.46 1103.124,329.562 1103.045,329.753 C1102.981,329.908 1102.934,330.021 1102.888,330.132 C1102.164,331.906 1101.874,333.04 1101.874,334.573 C1101.874,335.003 1101.526,335.351 1101.097,335.351 C1100.667,335.351 1100.319,335.003 1100.319,334.573 C1100.319,332.802 1100.655,331.488 1101.449,329.544 C1101.495,329.43 1101.543,329.314 1101.608,329.158 C1101.688,328.966 1101.73,328.864 1101.767,328.774 C1102.094,327.984 1102.288,327.475 1102.468,326.912 C1102.902,325.553 1102.74,324.562 1102.012,323.24 C1101.881,323.004 1101.736,322.76 1101.529,322.424 C1101.49,322.361 1101.463,322.318 1101.396,322.209 C1101.328,322.1 1101.328,322.1 1101.259,321.99 C1101.146,321.807 1101.062,321.671 1100.978,321.533 C1098.762,317.942 1098.686,314.831 1099.556,310.893 C1098.281,311.153 1098.868,311.088 1097.801,311.142 C1096.68,311.085 1097.321,311.153 1095.889,310.861 C1094.916,314.8 1095.01,317.063 1097.041,320.727 C1097.121,320.858 1097.203,320.991 1097.313,321.169 C1097.231,321.036 1097.521,321.503 1097.585,321.607 C1097.805,321.963 1097.962,322.227 1098.107,322.49 C1099.027,324.159 1099.26,325.579 1098.683,327.385 C1098.487,327.999 1098.279,328.542 1097.938,329.368 C1097.9,329.46 1097.857,329.562 1097.778,329.753 C1097.714,329.908 1097.667,330.021 1097.622,330.132 C1096.897,331.906 1096.607,333.04 1096.607,334.573 C1096.607,335.003 1096.259,335.351 1095.83,335.351 C1095.4,335.351 1095.052,335.003 1095.052,334.573 C1095.052,332.802 1095.388,331.488 1096.182,329.544 C1096.228,329.43 1096.276,329.314 1096.341,329.158 C1096.421,328.966 1096.463,328.864 1096.5,328.774 C1096.827,327.984 1097.021,327.475 1097.201,326.912 C1097.635,325.553 1097.473,324.562 1096.745,323.24 C1096.615,323.004 1096.469,322.76 1096.262,322.424 C1096.223,322.361 1096.196,322.318 1096.129,322.209 C1096.061,322.1 1096.061,322.1 1095.992,321.99 C1095.879,321.807 1095.795,321.671 1095.711,321.533 C1093.472,317.834 1093.305,314.324 1094.435,310.273 C1092.158,308.946 1090.953,306.763 1090.822,304.163 C1090.822,300.308 1093.947,297.184 1097.801,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1111.759,374.824 C1107.904,374.824 1104.78,371.7 1104.78,367.845 C1104.782,365.274 1106.145,363.253 1108.21,361.859 C1109.389,357.667 1109.436,355.22 1107.252,351.281 C1107.172,351.15 1107.09,351.017 1106.98,350.839 C1107.062,350.972 1106.771,350.505 1106.708,350.401 C1106.488,350.045 1106.331,349.781 1106.186,349.518 C1105.266,347.849 1105.033,346.429 1105.61,344.623 C1105.806,344.009 1106.014,343.466 1106.355,342.64 C1106.393,342.548 1106.436,342.446 1106.515,342.255 C1106.579,342.1 1106.626,341.987 1106.671,341.876 C1107.396,340.102 1107.685,338.968 1107.686,337.435 C1107.685,337.005 1108.034,336.657 1108.463,336.657 C1108.893,336.657 1109.241,337.005 1109.241,337.435 C1109.241,339.206 1108.905,340.52 1108.111,342.464 C1108.064,342.578 1108.017,342.694 1107.952,342.85 C1107.872,343.042 1107.83,343.144 1107.793,343.234 C1107.466,344.024 1107.271,344.533 1107.092,345.096 C1106.657,346.455 1106.82,347.446 1107.548,348.768 C1107.678,349.004 1107.823,349.248 1108.031,349.584 C1108.07,349.647 1108.097,349.69 1108.164,349.799 C1108.232,349.908 1108.232,349.908 1108.301,350.018 C1108.414,350.201 1108.498,350.337 1108.581,350.475 C1110.797,354.066 1110.873,357.177 1110.004,361.115 C1111.279,360.855 1110.691,360.92 1111.759,360.866 C1112.88,360.923 1112.239,360.855 1113.671,361.147 C1114.643,357.208 1114.55,354.945 1112.518,351.281 C1112.439,351.15 1112.357,351.017 1112.246,350.839 C1112.329,350.972 1112.038,350.505 1111.974,350.401 C1111.755,350.045 1111.598,349.781 1111.453,349.518 C1110.533,347.849 1110.3,346.429 1110.877,344.623 C1111.073,344.009 1111.281,343.466 1111.622,342.64 C1111.66,342.548 1111.702,342.446 1111.782,342.255 C1111.846,342.1 1111.893,341.987 1111.938,341.876 C1112.662,340.102 1112.952,338.968 1112.952,337.435 C1112.952,337.005 1113.3,336.657 1113.73,336.657 C1114.159,336.657 1114.507,337.005 1114.508,337.435 C1114.507,339.206 1114.172,340.52 1113.378,342.464 C1113.331,342.578 1113.283,342.694 1113.219,342.85 C1113.139,343.042 1113.097,343.144 1113.059,343.234 C1112.733,344.024 1112.538,344.533 1112.358,345.096 C1111.924,346.455 1112.087,347.446 1112.815,348.768 C1112.945,349.004 1113.09,349.248 1113.298,349.584 C1113.337,349.647 1113.364,349.69 1113.431,349.799 C1113.499,349.908 1113.499,349.908 1113.567,350.018 C1113.681,350.201 1113.765,350.337 1113.848,350.475 C1116.088,354.174 1116.255,357.684 1115.125,361.735 C1117.402,363.062 1118.606,365.245 1118.738,367.845 C1118.738,371.7 1115.613,374.824 1111.759,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1111.759,297.184 C1115.613,297.184 1118.738,300.308 1118.738,304.163 C1118.736,306.734 1117.373,308.755 1115.308,310.149 C1114.129,314.341 1114.082,316.788 1116.266,320.727 C1116.346,320.858 1116.427,320.991 1116.538,321.169 C1116.456,321.036 1116.746,321.503 1116.81,321.607 C1117.03,321.963 1117.187,322.227 1117.332,322.49 C1118.251,324.159 1118.484,325.579 1117.907,327.385 C1117.712,327.999 1117.504,328.542 1117.162,329.368 C1117.125,329.46 1117.082,329.562 1117.002,329.753 C1116.939,329.908 1116.892,330.021 1116.846,330.132 C1116.122,331.906 1115.832,333.04 1115.832,334.573 C1115.832,335.003 1115.484,335.351 1115.054,335.351 C1114.625,335.351 1114.277,335.003 1114.277,334.573 C1114.277,332.802 1114.613,331.488 1115.407,329.544 C1115.453,329.43 1115.501,329.314 1115.566,329.158 C1115.646,328.966 1115.688,328.864 1115.725,328.774 C1116.051,327.984 1116.246,327.475 1116.426,326.912 C1116.86,325.553 1116.698,324.562 1115.969,323.24 C1115.839,323.004 1115.694,322.76 1115.487,322.424 C1115.448,322.361 1115.421,322.318 1115.354,322.209 C1115.286,322.1 1115.286,322.1 1115.217,321.99 C1115.104,321.807 1115.019,321.671 1114.936,321.533 C1112.72,317.942 1112.644,314.831 1113.514,310.893 C1112.239,311.153 1112.826,311.088 1111.759,311.142 C1110.638,311.085 1111.279,311.153 1109.846,310.861 C1108.874,314.8 1108.968,317.063 1110.999,320.727 C1111.079,320.858 1111.16,320.991 1111.271,321.169 C1111.189,321.036 1111.479,321.503 1111.543,321.607 C1111.763,321.963 1111.92,322.227 1112.065,322.49 C1112.984,324.159 1113.218,325.579 1112.641,327.385 C1112.445,327.999 1112.237,328.542 1111.895,329.368 C1111.858,329.46 1111.815,329.562 1111.736,329.753 C1111.672,329.908 1111.625,330.021 1111.579,330.132 C1110.855,331.906 1110.565,333.04 1110.565,334.573 C1110.565,335.003 1110.217,335.351 1109.788,335.351 C1109.358,335.351 1109.01,335.003 1109.01,334.573 C1109.01,332.802 1109.346,331.488 1110.14,329.544 C1110.186,329.43 1110.234,329.314 1110.299,329.158 C1110.379,328.966 1110.421,328.864 1110.458,328.774 C1110.785,327.984 1110.979,327.475 1111.159,326.912 C1111.593,325.553 1111.431,324.562 1110.703,323.24 C1110.573,323.004 1110.427,322.76 1110.22,322.424 C1110.181,322.361 1110.154,322.318 1110.087,322.209 C1110.019,322.1 1110.019,322.1 1109.95,321.99 C1109.837,321.807 1109.753,321.671 1109.669,321.533 C1107.43,317.834 1107.263,314.324 1108.392,310.273 C1106.116,308.946 1104.911,306.763 1104.78,304.163 C1104.78,300.308 1107.904,297.184 1111.759,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1125.717,374.824 C1121.862,374.824 1118.738,371.7 1118.738,367.845 C1118.74,365.274 1120.103,363.253 1122.168,361.859 C1123.347,357.667 1123.394,355.22 1121.209,351.281 C1121.13,351.15 1121.048,351.017 1120.938,350.839 C1121.02,350.972 1120.729,350.505 1120.666,350.401 C1120.446,350.045 1120.289,349.781 1120.144,349.518 C1119.224,347.849 1118.991,346.429 1119.568,344.623 C1119.764,344.009 1119.972,343.466 1120.313,342.64 C1120.351,342.548 1120.394,342.446 1120.473,342.255 C1120.537,342.1 1120.584,341.987 1120.629,341.876 C1121.354,340.102 1121.643,338.968 1121.643,337.435 C1121.643,337.005 1121.991,336.657 1122.421,336.657 C1122.85,336.657 1123.199,337.005 1123.199,337.435 C1123.199,339.206 1122.863,340.52 1122.069,342.464 C1122.022,342.578 1121.974,342.694 1121.91,342.85 C1121.83,343.042 1121.788,343.144 1121.75,343.234 C1121.424,344.024 1121.229,344.533 1121.049,345.096 C1120.615,346.455 1120.778,347.446 1121.506,348.768 C1121.636,349.004 1121.781,349.248 1121.989,349.584 C1122.028,349.647 1122.055,349.69 1122.122,349.799 C1122.19,349.908 1122.19,349.908 1122.258,350.018 C1122.372,350.201 1122.456,350.337 1122.539,350.475 C1124.755,354.066 1124.831,357.177 1123.961,361.115 C1125.236,360.855 1124.649,360.92 1125.717,360.866 C1126.838,360.923 1126.197,360.855 1127.629,361.147 C1128.601,357.208 1128.508,354.945 1126.476,351.281 C1126.396,351.15 1126.315,351.017 1126.204,350.839 C1126.287,350.972 1125.996,350.505 1125.932,350.401 C1125.713,350.045 1125.556,349.781 1125.411,349.518 C1124.491,347.849 1124.258,346.429 1124.835,344.623 C1125.031,344.009 1125.239,343.466 1125.58,342.64 C1125.618,342.548 1125.66,342.446 1125.74,342.255 C1125.804,342.1 1125.85,341.987 1125.896,341.876 C1126.62,340.102 1126.91,338.968 1126.91,337.435 C1126.91,337.005 1127.258,336.657 1127.688,336.657 C1128.117,336.657 1128.465,337.005 1128.465,337.435 C1128.465,339.206 1128.13,340.52 1127.336,342.464 C1127.289,342.578 1127.241,342.694 1127.177,342.85 C1127.097,343.042 1127.055,343.144 1127.017,343.234 C1126.691,344.024 1126.496,344.533 1126.316,345.096 C1125.882,346.455 1126.045,347.446 1126.773,348.768 C1126.903,349.004 1127.048,349.248 1127.255,349.584 C1127.294,349.647 1127.321,349.69 1127.389,349.799 C1127.456,349.908 1127.456,349.908 1127.525,350.018 C1127.639,350.201 1127.723,350.337 1127.806,350.475 C1130.045,354.174 1130.213,357.684 1129.083,361.735 C1131.359,363.062 1132.564,365.245 1132.696,367.845 C1132.696,371.7 1129.571,374.824 1125.717,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M1125.717,297.184 C1129.571,297.184 1132.696,300.308 1132.696,304.163 C1132.694,306.734 1131.331,308.755 1129.266,310.149 C1128.087,314.341 1128.04,316.788 1130.224,320.727 C1130.304,320.858 1130.385,320.991 1130.496,321.169 C1130.414,321.036 1130.704,321.503 1130.768,321.607 C1130.988,321.963 1131.145,322.227 1131.29,322.49 C1132.209,324.159 1132.442,325.579 1131.865,327.385 C1131.669,327.999 1131.462,328.542 1131.12,329.368 C1131.082,329.46 1131.04,329.562 1130.96,329.753 C1130.896,329.908 1130.85,330.021 1130.804,330.132 C1130.08,331.906 1129.79,333.04 1129.79,334.573 C1129.79,335.003 1129.442,335.351 1129.012,335.351 C1128.583,335.351 1128.235,335.003 1128.235,334.573 C1128.235,332.802 1128.571,331.488 1129.365,329.544 C1129.411,329.43 1129.459,329.314 1129.524,329.158 C1129.604,328.966 1129.646,328.864 1129.683,328.774 C1130.009,327.984 1130.204,327.475 1130.384,326.912 C1130.818,325.553 1130.656,324.562 1129.927,323.24 C1129.797,323.004 1129.652,322.76 1129.445,322.424 C1129.406,322.361 1129.379,322.318 1129.312,322.209 C1129.244,322.1 1129.244,322.1 1129.175,321.99 C1129.062,321.807 1128.977,321.671 1128.894,321.533 C1126.678,317.942 1126.602,314.831 1127.472,310.893 C1126.197,311.153 1126.784,311.088 1125.717,311.142 C1124.596,311.085 1125.236,311.153 1123.804,310.861 C1122.832,314.8 1122.926,317.063 1124.957,320.727 C1125.037,320.858 1125.118,320.991 1125.229,321.169 C1125.147,321.036 1125.437,321.503 1125.501,321.607 C1125.721,321.963 1125.878,322.227 1126.023,322.49 C1126.942,324.159 1127.176,325.579 1126.599,327.385 C1126.403,327.999 1126.195,328.542 1125.853,329.368 C1125.816,329.46 1125.773,329.562 1125.693,329.753 C1125.63,329.908 1125.583,330.021 1125.537,330.132 C1124.813,331.906 1124.523,333.04 1124.523,334.573 C1124.523,335.003 1124.175,335.351 1123.745,335.351 C1123.316,335.351 1122.968,335.003 1122.968,334.573 C1122.968,332.802 1123.304,331.488 1124.098,329.544 C1124.144,329.43 1124.192,329.314 1124.257,329.158 C1124.337,328.966 1124.379,328.864 1124.416,328.774 C1124.742,327.984 1124.937,327.475 1125.117,326.912 C1125.551,325.553 1125.389,324.562 1124.661,323.24 C1124.531,323.004 1124.385,322.76 1124.178,322.424 C1124.139,322.361 1124.112,322.318 1124.045,322.209 C1123.977,322.1 1123.977,322.1 1123.908,321.99 C1123.795,321.807 1123.71,321.671 1123.627,321.533 C1121.388,317.834 1121.221,314.324 1122.35,310.273 C1120.074,308.946 1118.869,306.763 1118.738,304.163 C1118.738,300.308 1121.862,297.184 1125.717,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M385.947,374.824 C382.092,374.824 378.968,371.7 378.968,367.845 C378.97,365.274 380.333,363.253 382.398,361.859 C383.577,357.667 383.624,355.22 381.44,351.281 C381.36,351.15 381.278,351.017 381.168,350.839 C381.25,350.972 380.96,350.505 380.896,350.401 C380.676,350.045 380.519,349.781 380.374,349.518 C379.454,347.849 379.221,346.429 379.798,344.623 C379.994,344.009 380.202,343.466 380.543,342.64 C380.581,342.548 380.624,342.446 380.703,342.255 C380.767,342.1 380.814,341.987 380.859,341.876 C381.584,340.102 381.874,338.968 381.874,337.435 C381.874,337.005 382.222,336.657 382.651,336.657 C383.081,336.657 383.429,337.005 383.429,337.435 C383.429,339.206 383.093,340.52 382.299,342.464 C382.252,342.578 382.205,342.694 382.14,342.85 C382.06,343.042 382.018,343.144 381.981,343.234 C381.654,344.024 381.46,344.533 381.28,345.096 C380.845,346.455 381.008,347.446 381.736,348.768 C381.866,349.004 382.011,349.248 382.219,349.584 C382.258,349.647 382.285,349.69 382.352,349.799 C382.42,349.908 382.42,349.908 382.489,350.018 C382.602,350.201 382.686,350.337 382.769,350.475 C384.986,354.066 385.062,357.177 384.192,361.115 C385.467,360.855 384.879,360.92 385.947,360.866 C387.068,360.923 386.427,360.855 387.859,361.147 C388.831,357.208 388.738,354.945 386.707,351.281 C386.627,351.15 386.545,351.017 386.434,350.839 C386.517,350.972 386.226,350.505 386.163,350.401 C385.943,350.045 385.786,349.781 385.641,349.518 C384.721,347.849 384.488,346.429 385.065,344.623 C385.261,344.009 385.469,343.466 385.81,342.64 C385.848,342.548 385.891,342.446 385.97,342.255 C386.034,342.1 386.081,341.987 386.126,341.876 C386.851,340.102 387.14,338.968 387.14,337.435 C387.14,337.005 387.488,336.657 387.918,336.657 C388.347,336.657 388.696,337.005 388.696,337.435 C388.696,339.206 388.36,340.52 387.566,342.464 C387.519,342.578 387.471,342.694 387.407,342.85 C387.327,343.042 387.285,343.144 387.247,343.234 C386.921,344.024 386.726,344.533 386.546,345.096 C386.112,346.455 386.275,347.446 387.003,348.768 C387.133,349.004 387.278,349.248 387.486,349.584 C387.525,349.647 387.552,349.69 387.619,349.799 C387.687,349.908 387.687,349.908 387.755,350.018 C387.869,350.201 387.953,350.337 388.036,350.475 C390.276,354.174 390.443,357.684 389.313,361.735 C391.59,363.062 392.794,365.245 392.926,367.845 C392.926,371.7 389.801,374.824 385.947,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M385.947,297.184 C389.801,297.184 392.926,300.308 392.926,304.163 C392.924,306.734 391.561,308.755 389.496,310.149 C388.317,314.341 388.27,316.788 390.454,320.727 C390.534,320.858 390.615,320.991 390.726,321.169 C390.644,321.036 390.934,321.503 390.998,321.607 C391.218,321.963 391.375,322.227 391.52,322.49 C392.439,324.159 392.673,325.579 392.096,327.385 C391.9,327.999 391.692,328.542 391.35,329.368 C391.313,329.46 391.27,329.562 391.191,329.753 C391.127,329.908 391.08,330.021 391.034,330.132 C390.31,331.906 390.02,333.04 390.02,334.573 C390.02,335.003 389.672,335.351 389.242,335.351 C388.813,335.351 388.465,335.003 388.465,334.573 C388.465,332.802 388.801,331.488 389.595,329.544 C389.641,329.43 389.689,329.314 389.754,329.158 C389.834,328.966 389.876,328.864 389.913,328.774 C390.239,327.984 390.434,327.475 390.614,326.912 C391.048,325.553 390.886,324.562 390.158,323.24 C390.027,323.004 389.882,322.76 389.675,322.424 C389.636,322.361 389.609,322.318 389.542,322.209 C389.474,322.1 389.474,322.1 389.405,321.99 C389.292,321.807 389.207,321.671 389.124,321.533 C386.908,317.942 386.832,314.831 387.702,310.893 C386.427,311.153 387.014,311.088 385.947,311.142 C384.826,311.085 385.467,311.153 384.035,310.861 C383.062,314.8 383.156,317.063 385.187,320.727 C385.267,320.858 385.349,320.991 385.459,321.169 C385.377,321.036 385.667,321.503 385.731,321.607 C385.951,321.963 386.108,322.227 386.253,322.49 C387.173,324.159 387.406,325.579 386.829,327.385 C386.633,327.999 386.425,328.542 386.083,329.368 C386.046,329.46 386.003,329.562 385.924,329.753 C385.86,329.908 385.813,330.021 385.768,330.132 C385.043,331.906 384.753,333.04 384.753,334.573 C384.753,335.003 384.405,335.351 383.976,335.351 C383.546,335.351 383.198,335.003 383.198,334.573 C383.198,332.802 383.534,331.488 384.328,329.544 C384.374,329.43 384.422,329.314 384.487,329.158 C384.567,328.966 384.609,328.864 384.646,328.774 C384.973,327.984 385.167,327.475 385.347,326.912 C385.781,325.553 385.619,324.562 384.891,323.24 C384.761,323.004 384.615,322.76 384.408,322.424 C384.369,322.361 384.342,322.318 384.275,322.209 C384.207,322.1 384.207,322.1 384.138,321.99 C384.025,321.807 383.941,321.671 383.857,321.533 C381.618,317.834 381.451,314.324 382.581,310.273 C380.304,308.946 379.099,306.763 378.968,304.163 C378.968,300.308 382.092,297.184 385.947,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M399.905,374.824 C396.05,374.824 392.926,371.7 392.926,367.845 C392.928,365.274 394.291,363.253 396.356,361.859 C397.535,357.667 397.582,355.22 395.398,351.281 C395.318,351.15 395.236,351.017 395.126,350.839 C395.208,350.972 394.918,350.505 394.854,350.401 C394.634,350.045 394.477,349.781 394.332,349.518 C393.412,347.849 393.179,346.429 393.756,344.623 C393.952,344.009 394.16,343.466 394.501,342.64 C394.539,342.548 394.582,342.446 394.661,342.255 C394.725,342.1 394.772,341.987 394.817,341.876 C395.542,340.102 395.831,338.968 395.831,337.435 C395.831,337.005 396.18,336.657 396.609,336.657 C397.039,336.657 397.387,337.005 397.387,337.435 C397.387,339.206 397.051,340.52 396.257,342.464 C396.21,342.578 396.163,342.694 396.098,342.85 C396.018,343.042 395.976,343.144 395.939,343.234 C395.612,344.024 395.417,344.533 395.237,345.096 C394.803,346.455 394.966,347.446 395.694,348.768 C395.824,349.004 395.969,349.248 396.177,349.584 C396.216,349.647 396.243,349.69 396.31,349.799 C396.378,349.908 396.378,349.908 396.447,350.018 C396.56,350.201 396.644,350.337 396.727,350.475 C398.943,354.066 399.019,357.177 398.15,361.115 C399.425,360.855 398.837,360.92 399.905,360.866 C401.026,360.923 400.385,360.855 401.817,361.147 C402.789,357.208 402.696,354.945 400.664,351.281 C400.585,351.15 400.503,351.017 400.392,350.839 C400.475,350.972 400.184,350.505 400.121,350.401 C399.901,350.045 399.744,349.781 399.599,349.518 C398.679,347.849 398.446,346.429 399.023,344.623 C399.219,344.009 399.427,343.466 399.768,342.64 C399.806,342.548 399.848,342.446 399.928,342.255 C399.992,342.1 400.039,341.987 400.084,341.876 C400.808,340.102 401.098,338.968 401.098,337.435 C401.098,337.005 401.446,336.657 401.876,336.657 C402.305,336.657 402.653,337.005 402.654,337.435 C402.653,339.206 402.318,340.52 401.524,342.464 C401.477,342.578 401.429,342.694 401.365,342.85 C401.285,343.042 401.243,343.144 401.205,343.234 C400.879,344.024 400.684,344.533 400.504,345.096 C400.07,346.455 400.233,347.446 400.961,348.768 C401.091,349.004 401.236,349.248 401.444,349.584 C401.483,349.647 401.509,349.69 401.577,349.799 C401.645,349.908 401.645,349.908 401.713,350.018 C401.827,350.201 401.911,350.337 401.994,350.475 C404.234,354.174 404.401,357.684 403.271,361.735 C405.548,363.062 406.752,365.245 406.884,367.845 C406.884,371.7 403.759,374.824 399.905,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M399.905,297.184 C403.759,297.184 406.884,300.308 406.884,304.163 C406.882,306.734 405.519,308.755 403.454,310.149 C402.275,314.341 402.228,316.788 404.412,320.727 C404.492,320.858 404.573,320.991 404.684,321.169 C404.602,321.036 404.892,321.503 404.956,321.607 C405.176,321.963 405.333,322.227 405.478,322.49 C406.397,324.159 406.63,325.579 406.053,327.385 C405.858,327.999 405.65,328.542 405.308,329.368 C405.27,329.46 405.228,329.562 405.148,329.753 C405.085,329.908 405.038,330.021 404.992,330.132 C404.268,331.906 403.978,333.04 403.978,334.573 C403.978,335.003 403.63,335.351 403.2,335.351 C402.771,335.351 402.423,335.003 402.423,334.573 C402.423,332.802 402.759,331.488 403.553,329.544 C403.599,329.43 403.647,329.314 403.712,329.158 C403.792,328.966 403.834,328.864 403.871,328.774 C404.197,327.984 404.392,327.475 404.572,326.912 C405.006,325.553 404.844,324.562 404.116,323.24 C403.985,323.004 403.84,322.76 403.633,322.424 C403.594,322.361 403.567,322.318 403.5,322.209 C403.432,322.1 403.432,322.1 403.363,321.99 C403.25,321.807 403.165,321.671 403.082,321.533 C400.866,317.942 400.79,314.831 401.66,310.893 C400.385,311.153 400.972,311.088 399.905,311.142 C398.784,311.085 399.425,311.153 397.992,310.861 C397.02,314.8 397.114,317.063 399.145,320.727 C399.225,320.858 399.306,320.991 399.417,321.169 C399.335,321.036 399.625,321.503 399.689,321.607 C399.909,321.963 400.066,322.227 400.211,322.49 C401.13,324.159 401.364,325.579 400.787,327.385 C400.591,327.999 400.383,328.542 400.041,329.368 C400.004,329.46 399.961,329.562 399.882,329.753 C399.818,329.908 399.771,330.021 399.726,330.132 C399.001,331.906 398.711,333.04 398.711,334.573 C398.711,335.003 398.363,335.351 397.934,335.351 C397.504,335.351 397.156,335.003 397.156,334.573 C397.156,332.802 397.492,331.488 398.286,329.544 C398.332,329.43 398.38,329.314 398.445,329.158 C398.525,328.966 398.567,328.864 398.604,328.774 C398.931,327.984 399.125,327.475 399.305,326.912 C399.739,325.553 399.577,324.562 398.849,323.24 C398.719,323.004 398.573,322.76 398.366,322.424 C398.327,322.361 398.3,322.318 398.233,322.209 C398.165,322.1 398.165,322.1 398.096,321.99 C397.983,321.807 397.899,321.671 397.815,321.533 C395.576,317.834 395.409,314.324 396.538,310.273 C394.262,308.946 393.057,306.763 392.926,304.163 C392.926,300.308 396.05,297.184 399.905,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M413.863,374.824 C410.008,374.824 406.884,371.7 406.884,367.845 C406.886,365.274 408.249,363.253 410.314,361.859 C411.493,357.667 411.54,355.22 409.355,351.281 C409.276,351.15 409.194,351.017 409.083,350.839 C409.166,350.972 408.875,350.505 408.812,350.401 C408.592,350.045 408.435,349.781 408.29,349.518 C407.37,347.849 407.137,346.429 407.714,344.623 C407.91,344.009 408.118,343.466 408.459,342.64 C408.497,342.548 408.54,342.446 408.619,342.255 C408.683,342.1 408.73,341.987 408.775,341.876 C409.5,340.102 409.789,338.968 409.789,337.435 C409.789,337.005 410.138,336.657 410.567,336.657 C410.996,336.657 411.345,337.005 411.345,337.435 C411.345,339.206 411.009,340.52 410.215,342.464 C410.168,342.578 410.121,342.694 410.056,342.85 C409.976,343.042 409.934,343.144 409.896,343.234 C409.57,344.024 409.375,344.533 409.195,345.096 C408.761,346.455 408.924,347.446 409.652,348.768 C409.782,349.004 409.927,349.248 410.135,349.584 C410.174,349.647 410.201,349.69 410.268,349.799 C410.336,349.908 410.336,349.908 410.404,350.018 C410.518,350.201 410.602,350.337 410.685,350.475 C412.901,354.066 412.977,357.177 412.107,361.115 C413.382,360.855 412.795,360.92 413.863,360.866 C414.984,360.923 414.343,360.855 415.775,361.147 C416.747,357.208 416.654,354.945 414.622,351.281 C414.543,351.15 414.461,351.017 414.35,350.839 C414.433,350.972 414.142,350.505 414.078,350.401 C413.859,350.045 413.702,349.781 413.557,349.518 C412.637,347.849 412.404,346.429 412.981,344.623 C413.177,344.009 413.384,343.466 413.726,342.64 C413.764,342.548 413.806,342.446 413.886,342.255 C413.95,342.1 413.997,341.987 414.042,341.876 C414.766,340.102 415.056,338.968 415.056,337.435 C415.056,337.005 415.404,336.657 415.834,336.657 C416.263,336.657 416.611,337.005 416.611,337.435 C416.611,339.206 416.276,340.52 415.482,342.464 C415.435,342.578 415.387,342.694 415.322,342.85 C415.243,343.042 415.201,343.144 415.163,343.234 C414.837,344.024 414.642,344.533 414.462,345.096 C414.028,346.455 414.191,347.446 414.919,348.768 C415.049,349.004 415.194,349.248 415.402,349.584 C415.44,349.647 415.467,349.69 415.535,349.799 C415.602,349.908 415.602,349.908 415.671,350.018 C415.785,350.201 415.869,350.337 415.952,350.475 C418.191,354.174 418.358,357.684 417.229,361.735 C419.506,363.062 420.71,365.245 420.842,367.845 C420.842,371.7 417.717,374.824 413.863,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M413.863,297.184 C417.717,297.184 420.842,300.308 420.842,304.163 C420.84,306.734 419.477,308.755 417.412,310.149 C416.233,314.341 416.186,316.788 418.37,320.727 C418.45,320.858 418.531,320.991 418.642,321.169 C418.56,321.036 418.85,321.503 418.914,321.607 C419.134,321.963 419.291,322.227 419.436,322.49 C420.355,324.159 420.588,325.579 420.011,327.385 C419.815,327.999 419.608,328.542 419.266,329.368 C419.228,329.46 419.186,329.562 419.106,329.753 C419.042,329.908 418.996,330.021 418.95,330.132 C418.226,331.906 417.936,333.04 417.936,334.573 C417.936,335.003 417.588,335.351 417.158,335.351 C416.729,335.351 416.381,335.003 416.381,334.573 C416.381,332.802 416.717,331.488 417.511,329.544 C417.557,329.43 417.605,329.314 417.67,329.158 C417.75,328.966 417.792,328.864 417.829,328.774 C418.155,327.984 418.35,327.475 418.53,326.912 C418.964,325.553 418.802,324.562 418.073,323.24 C417.943,323.004 417.798,322.76 417.591,322.424 C417.552,322.361 417.525,322.318 417.458,322.209 C417.39,322.1 417.39,322.1 417.321,321.99 C417.208,321.807 417.123,321.671 417.04,321.533 C414.824,317.942 414.748,314.831 415.618,310.893 C414.343,311.153 414.93,311.088 413.863,311.142 C412.742,311.085 413.382,311.153 411.95,310.861 C410.978,314.8 411.072,317.063 413.103,320.727 C413.183,320.858 413.264,320.991 413.375,321.169 C413.293,321.036 413.583,321.503 413.647,321.607 C413.867,321.963 414.024,322.227 414.169,322.49 C415.088,324.159 415.322,325.579 414.745,327.385 C414.549,327.999 414.341,328.542 413.999,329.368 C413.962,329.46 413.919,329.562 413.84,329.753 C413.776,329.908 413.729,330.021 413.683,330.132 C412.959,331.906 412.669,333.04 412.669,334.573 C412.669,335.003 412.321,335.351 411.891,335.351 C411.462,335.351 411.114,335.003 411.114,334.573 C411.114,332.802 411.45,331.488 412.244,329.544 C412.29,329.43 412.338,329.314 412.403,329.158 C412.483,328.966 412.525,328.864 412.562,328.774 C412.888,327.984 413.083,327.475 413.263,326.912 C413.697,325.553 413.535,324.562 412.807,323.24 C412.676,323.004 412.531,322.76 412.324,322.424 C412.285,322.361 412.258,322.318 412.191,322.209 C412.123,322.1 412.123,322.1 412.054,321.99 C411.941,321.807 411.856,321.671 411.773,321.533 C409.534,317.834 409.367,314.324 410.496,310.273 C408.22,308.946 407.015,306.763 406.884,304.163 C406.884,300.308 410.008,297.184 413.863,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M427.821,374.824 C423.966,374.824 420.842,371.7 420.842,367.845 C420.843,365.274 422.206,363.253 424.272,361.859 C425.451,357.667 425.498,355.22 423.313,351.281 C423.234,351.15 423.152,351.017 423.041,350.839 C423.124,350.972 422.833,350.505 422.77,350.401 C422.55,350.045 422.393,349.781 422.248,349.518 C421.328,347.849 421.095,346.429 421.672,344.623 C421.868,344.009 422.076,343.466 422.417,342.64 C422.455,342.548 422.497,342.446 422.577,342.255 C422.641,342.1 422.688,341.987 422.733,341.876 C423.457,340.102 423.747,338.968 423.747,337.435 C423.747,337.005 424.095,336.657 424.525,336.657 C424.954,336.657 425.303,337.005 425.303,337.435 C425.303,339.206 424.967,340.52 424.173,342.464 C424.126,342.578 424.078,342.694 424.014,342.85 C423.934,343.042 423.892,343.144 423.854,343.234 C423.528,344.024 423.333,344.533 423.153,345.096 C422.719,346.455 422.882,347.446 423.61,348.768 C423.74,349.004 423.885,349.248 424.093,349.584 C424.132,349.647 424.159,349.69 424.226,349.799 C424.294,349.908 424.294,349.908 424.362,350.018 C424.476,350.201 424.56,350.337 424.643,350.475 C426.859,354.066 426.935,357.177 426.065,361.115 C427.34,360.855 426.753,360.92 427.821,360.866 C428.941,360.923 428.301,360.855 429.733,361.147 C430.705,357.208 430.612,354.945 428.58,351.281 C428.5,351.15 428.419,351.017 428.308,350.839 C428.391,350.972 428.1,350.505 428.036,350.401 C427.816,350.045 427.659,349.781 427.514,349.518 C426.595,347.849 426.362,346.429 426.939,344.623 C427.135,344.009 427.342,343.466 427.684,342.64 C427.722,342.548 427.764,342.446 427.844,342.255 C427.908,342.1 427.954,341.987 428,341.876 C428.724,340.102 429.014,338.968 429.014,337.435 C429.014,337.005 429.362,336.657 429.792,336.657 C430.221,336.657 430.569,337.005 430.569,337.435 C430.569,339.206 430.234,340.52 429.44,342.464 C429.393,342.578 429.345,342.694 429.28,342.85 C429.201,343.042 429.159,343.144 429.121,343.234 C428.795,344.024 428.6,344.533 428.42,345.096 C427.986,346.455 428.149,347.446 428.877,348.768 C429.007,349.004 429.152,349.248 429.359,349.584 C429.398,349.647 429.425,349.69 429.493,349.799 C429.56,349.908 429.56,349.908 429.629,350.018 C429.743,350.201 429.827,350.337 429.91,350.475 C432.149,354.174 432.316,357.684 431.187,361.735 C433.463,363.062 434.668,365.245 434.799,367.845 C434.799,371.7 431.675,374.824 427.821,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M427.821,297.184 C431.675,297.184 434.8,300.308 434.8,304.163 C434.798,306.734 433.435,308.755 431.37,310.149 C430.191,314.341 430.144,316.788 432.328,320.727 C432.408,320.858 432.489,320.991 432.6,321.169 C432.518,321.036 432.808,321.503 432.872,321.607 C433.092,321.963 433.249,322.227 433.394,322.49 C434.313,324.159 434.546,325.579 433.969,327.385 C433.773,327.999 433.566,328.542 433.224,329.368 C433.186,329.46 433.144,329.562 433.064,329.753 C433,329.908 432.954,330.021 432.908,330.132 C432.184,331.906 431.894,333.04 431.894,334.573 C431.894,335.003 431.546,335.351 431.116,335.351 C430.687,335.351 430.339,335.003 430.339,334.573 C430.339,332.802 430.674,331.488 431.468,329.544 C431.515,329.43 431.563,329.314 431.628,329.158 C431.707,328.966 431.749,328.864 431.787,328.774 C432.113,327.984 432.308,327.475 432.488,326.912 C432.922,325.553 432.759,324.562 432.031,323.24 C431.901,323.004 431.756,322.76 431.549,322.424 C431.51,322.361 431.483,322.318 431.415,322.209 C431.348,322.1 431.348,322.1 431.279,321.99 C431.165,321.807 431.081,321.671 430.998,321.533 C428.782,317.942 428.706,314.831 429.576,310.893 C428.301,311.153 428.888,311.088 427.821,311.142 C426.7,311.085 427.34,311.153 425.908,310.861 C424.936,314.8 425.03,317.063 427.061,320.727 C427.141,320.858 427.222,320.991 427.333,321.169 C427.251,321.036 427.541,321.503 427.605,321.607 C427.825,321.963 427.982,322.227 428.127,322.49 C429.046,324.159 429.279,325.579 428.702,327.385 C428.507,327.999 428.299,328.542 427.957,329.368 C427.919,329.46 427.877,329.562 427.797,329.753 C427.734,329.908 427.687,330.021 427.641,330.132 C426.917,331.906 426.627,333.04 426.627,334.573 C426.627,335.003 426.279,335.351 425.849,335.351 C425.42,335.351 425.072,335.003 425.072,334.573 C425.072,332.802 425.408,331.488 426.202,329.544 C426.248,329.43 426.296,329.314 426.361,329.158 C426.441,328.966 426.483,328.864 426.52,328.774 C426.846,327.984 427.041,327.475 427.221,326.912 C427.655,325.553 427.493,324.562 426.764,323.24 C426.634,323.004 426.489,322.76 426.282,322.424 C426.243,322.361 426.216,322.318 426.149,322.209 C426.081,322.1 426.081,322.1 426.012,321.99 C425.899,321.807 425.814,321.671 425.731,321.533 C423.492,317.834 423.325,314.324 424.454,310.273 C422.178,308.946 420.973,306.763 420.842,304.163 C420.842,300.308 423.966,297.184 427.821,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M441.778,374.824 C437.924,374.824 434.8,371.7 434.8,367.845 C434.801,365.274 436.164,363.253 438.23,361.859 C439.408,357.667 439.455,355.22 437.271,351.281 C437.191,351.15 437.11,351.017 436.999,350.839 C437.082,350.972 436.791,350.505 436.727,350.401 C436.508,350.045 436.35,349.781 436.206,349.518 C435.286,347.849 435.053,346.429 435.63,344.623 C435.826,344.009 436.033,343.466 436.375,342.64 C436.413,342.548 436.455,342.446 436.535,342.255 C436.599,342.1 436.646,341.987 436.691,341.876 C437.415,340.102 437.705,338.968 437.705,337.435 C437.705,337.005 438.053,336.657 438.483,336.657 C438.912,336.657 439.26,337.005 439.26,337.435 C439.26,339.206 438.925,340.52 438.131,342.464 C438.084,342.578 438.036,342.694 437.971,342.85 C437.892,343.042 437.85,343.144 437.812,343.234 C437.486,344.024 437.291,344.533 437.111,345.096 C436.677,346.455 436.84,347.446 437.568,348.768 C437.698,349.004 437.843,349.248 438.051,349.584 C438.089,349.647 438.116,349.69 438.184,349.799 C438.251,349.908 438.251,349.908 438.32,350.018 C438.434,350.201 438.518,350.337 438.601,350.475 C440.817,354.066 440.893,357.177 440.023,361.115 C441.298,360.855 440.711,360.92 441.778,360.866 C442.899,360.923 442.259,360.855 443.691,361.147 C444.663,357.208 444.569,354.945 442.538,351.281 C442.458,351.15 442.377,351.017 442.266,350.839 C442.348,350.972 442.058,350.505 441.994,350.401 C441.774,350.045 441.617,349.781 441.472,349.518 C440.553,347.849 440.32,346.429 440.897,344.623 C441.093,344.009 441.3,343.466 441.642,342.64 C441.68,342.548 441.722,342.446 441.802,342.255 C441.866,342.1 441.912,341.987 441.958,341.876 C442.682,340.102 442.972,338.968 442.972,337.435 C442.972,337.005 443.32,336.657 443.75,336.657 C444.179,336.657 444.527,337.005 444.527,337.435 C444.527,339.206 444.191,340.52 443.397,342.464 C443.351,342.578 443.303,342.694 443.238,342.85 C443.159,343.042 443.116,343.144 443.079,343.234 C442.753,344.024 442.558,344.533 442.378,345.096 C441.944,346.455 442.107,347.446 442.835,348.768 C442.965,349.004 443.11,349.248 443.317,349.584 C443.356,349.647 443.383,349.69 443.45,349.799 C443.518,349.908 443.518,349.908 443.587,350.018 C443.701,350.201 443.785,350.337 443.868,350.475 C446.107,354.174 446.274,357.684 445.145,361.735 C447.421,363.062 448.626,365.245 448.757,367.845 C448.757,371.7 445.633,374.824 441.778,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M441.779,297.184 C445.633,297.184 448.757,300.308 448.757,304.163 C448.756,306.734 447.393,308.755 445.327,310.149 C444.149,314.341 444.102,316.788 446.286,320.727 C446.366,320.858 446.447,320.991 446.558,321.169 C446.475,321.036 446.766,321.503 446.83,321.607 C447.05,321.963 447.207,322.227 447.352,322.49 C448.271,324.159 448.504,325.579 447.927,327.385 C447.731,327.999 447.524,328.542 447.182,329.368 C447.144,329.46 447.102,329.562 447.022,329.753 C446.958,329.908 446.912,330.021 446.866,330.132 C446.142,331.906 445.852,333.04 445.852,334.573 C445.852,335.003 445.504,335.351 445.074,335.351 C444.645,335.351 444.297,335.003 444.297,334.573 C444.297,332.802 444.632,331.488 445.426,329.544 C445.473,329.43 445.521,329.314 445.586,329.158 C445.665,328.966 445.707,328.864 445.745,328.774 C446.071,327.984 446.266,327.475 446.446,326.912 C446.88,325.553 446.717,324.562 445.989,323.24 C445.859,323.004 445.714,322.76 445.506,322.424 C445.468,322.361 445.441,322.318 445.373,322.209 C445.306,322.1 445.306,322.1 445.237,321.99 C445.123,321.807 445.039,321.671 444.956,321.533 C442.74,317.942 442.664,314.831 443.534,310.893 C442.259,311.153 442.846,311.088 441.779,311.142 C440.658,311.085 441.298,311.153 439.866,310.861 C438.894,314.8 438.988,317.063 441.019,320.727 C441.099,320.858 441.18,320.991 441.291,321.169 C441.209,321.036 441.499,321.503 441.563,321.607 C441.783,321.963 441.94,322.227 442.085,322.49 C443.004,324.159 443.237,325.579 442.66,327.385 C442.464,327.999 442.257,328.542 441.915,329.368 C441.877,329.46 441.835,329.562 441.755,329.753 C441.691,329.908 441.645,330.021 441.599,330.132 C440.875,331.906 440.585,333.04 440.585,334.573 C440.585,335.003 440.237,335.351 439.807,335.351 C439.378,335.351 439.03,335.003 439.03,334.573 C439.03,332.802 439.365,331.488 440.159,329.544 C440.206,329.43 440.254,329.314 440.319,329.158 C440.398,328.966 440.441,328.864 440.478,328.774 C440.804,327.984 440.999,327.475 441.179,326.912 C441.613,325.553 441.45,324.562 440.722,323.24 C440.592,323.004 440.447,322.76 440.24,322.424 C440.201,322.361 440.174,322.318 440.107,322.209 C440.039,322.1 440.039,322.1 439.97,321.99 C439.856,321.807 439.772,321.671 439.689,321.533 C437.45,317.834 437.283,314.324 438.412,310.273 C436.136,308.946 434.931,306.763 434.8,304.163 C434.8,300.308 437.924,297.184 441.779,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M455.736,374.824 C451.882,374.824 448.758,371.7 448.758,367.845 C448.759,365.274 450.122,363.253 452.187,361.859 C453.366,357.667 453.413,355.22 451.229,351.281 C451.149,351.15 451.068,351.017 450.957,350.839 C451.04,350.972 450.749,350.505 450.685,350.401 C450.465,350.045 450.308,349.781 450.163,349.518 C449.244,347.849 449.011,346.429 449.588,344.623 C449.784,344.009 449.991,343.466 450.333,342.64 C450.371,342.548 450.413,342.446 450.493,342.255 C450.557,342.1 450.603,341.987 450.649,341.876 C451.373,340.102 451.663,338.968 451.663,337.435 C451.663,337.005 452.011,336.657 452.441,336.657 C452.87,336.657 453.218,337.005 453.218,337.435 C453.218,339.206 452.883,340.52 452.089,342.464 C452.042,342.578 451.994,342.694 451.929,342.85 C451.85,343.042 451.808,343.144 451.77,343.234 C451.444,344.024 451.249,344.533 451.069,345.096 C450.635,346.455 450.798,347.446 451.526,348.768 C451.656,349.004 451.801,349.248 452.008,349.584 C452.047,349.647 452.074,349.69 452.142,349.799 C452.209,349.908 452.209,349.908 452.278,350.018 C452.392,350.201 452.476,350.337 452.559,350.475 C454.775,354.066 454.851,357.177 453.981,361.115 C455.256,360.855 454.669,360.92 455.736,360.866 C456.857,360.923 456.217,360.855 457.649,361.147 C458.621,357.208 458.527,354.945 456.496,351.281 C456.416,351.15 456.335,351.017 456.224,350.839 C456.306,350.972 456.016,350.505 455.952,350.401 C455.732,350.045 455.575,349.781 455.43,349.518 C454.511,347.849 454.278,346.429 454.855,344.623 C455.051,344.009 455.258,343.466 455.6,342.64 C455.638,342.548 455.68,342.446 455.76,342.255 C455.824,342.1 455.87,341.987 455.916,341.876 C456.64,340.102 456.93,338.968 456.93,337.435 C456.93,337.005 457.278,336.657 457.708,336.657 C458.137,336.657 458.485,337.005 458.485,337.435 C458.485,339.206 458.149,340.52 457.355,342.464 C457.309,342.578 457.261,342.694 457.196,342.85 C457.116,343.042 457.074,343.144 457.037,343.234 C456.711,344.024 456.516,344.533 456.336,345.096 C455.902,346.455 456.064,347.446 456.793,348.768 C456.923,349.004 457.068,349.248 457.275,349.584 C457.314,349.647 457.341,349.69 457.408,349.799 C457.476,349.908 457.476,349.908 457.545,350.018 C457.658,350.201 457.743,350.337 457.826,350.475 C460.065,354.174 460.232,357.684 459.103,361.735 C461.379,363.062 462.584,365.245 462.715,367.845 C462.715,371.7 459.591,374.824 455.736,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M455.736,297.184 C459.591,297.184 462.715,300.308 462.715,304.163 C462.714,306.734 461.351,308.755 459.285,310.149 C458.107,314.341 458.059,316.788 460.244,320.727 C460.323,320.858 460.405,320.991 460.516,321.169 C460.433,321.036 460.724,321.503 460.788,321.607 C461.007,321.963 461.164,322.227 461.309,322.49 C462.229,324.159 462.462,325.579 461.885,327.385 C461.689,327.999 461.481,328.542 461.14,329.368 C461.102,329.46 461.06,329.562 460.98,329.753 C460.916,329.908 460.869,330.021 460.824,330.132 C460.1,331.906 459.81,333.04 459.81,334.573 C459.81,335.003 459.462,335.351 459.032,335.351 C458.603,335.351 458.255,335.003 458.254,334.573 C458.255,332.802 458.59,331.488 459.384,329.544 C459.431,329.43 459.479,329.314 459.543,329.158 C459.623,328.966 459.665,328.864 459.703,328.774 C460.029,327.984 460.224,327.475 460.404,326.912 C460.838,325.553 460.675,324.562 459.947,323.24 C459.817,323.004 459.672,322.76 459.464,322.424 C459.426,322.361 459.399,322.318 459.331,322.209 C459.264,322.1 459.264,322.1 459.195,321.99 C459.081,321.807 458.997,321.671 458.914,321.533 C456.698,317.942 456.622,314.831 457.492,310.893 C456.217,311.153 456.804,311.088 455.736,311.142 C454.616,311.085 455.256,311.153 453.824,310.861 C452.852,314.8 452.945,317.063 454.977,320.727 C455.057,320.858 455.138,320.991 455.249,321.169 C455.166,321.036 455.457,321.503 455.521,321.607 C455.741,321.963 455.898,322.227 456.043,322.49 C456.962,324.159 457.195,325.579 456.618,327.385 C456.422,327.999 456.215,328.542 455.873,329.368 C455.835,329.46 455.793,329.562 455.713,329.753 C455.649,329.908 455.603,330.021 455.557,330.132 C454.833,331.906 454.543,333.04 454.543,334.573 C454.543,335.003 454.195,335.351 453.765,335.351 C453.336,335.351 452.988,335.003 452.988,334.573 C452.988,332.802 453.323,331.488 454.117,329.544 C454.164,329.43 454.212,329.314 454.277,329.158 C454.356,328.966 454.398,328.864 454.436,328.774 C454.762,327.984 454.957,327.475 455.137,326.912 C455.571,325.553 455.408,324.562 454.68,323.24 C454.55,323.004 454.405,322.76 454.198,322.424 C454.159,322.361 454.132,322.318 454.064,322.209 C453.997,322.1 453.997,322.1 453.928,321.99 C453.814,321.807 453.73,321.671 453.647,321.533 C451.408,317.834 451.241,314.324 452.37,310.273 C450.094,308.946 448.889,306.763 448.757,304.163 C448.757,300.308 451.882,297.184 455.736,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M469.694,374.824 C465.84,374.824 462.715,371.7 462.715,367.845 C462.717,365.274 464.08,363.253 466.145,361.859 C467.324,357.667 467.371,355.22 465.187,351.281 C465.107,351.15 465.026,351.017 464.915,350.839 C464.997,350.972 464.707,350.505 464.643,350.401 C464.423,350.045 464.266,349.781 464.121,349.518 C463.202,347.849 462.969,346.429 463.546,344.623 C463.742,344.009 463.949,343.466 464.291,342.64 C464.329,342.548 464.371,342.446 464.451,342.255 C464.515,342.1 464.561,341.987 464.607,341.876 C465.331,340.102 465.621,338.968 465.621,337.435 C465.621,337.005 465.969,336.657 466.399,336.657 C466.828,336.657 467.176,337.005 467.176,337.435 C467.176,339.206 466.84,340.52 466.047,342.464 C466,342.578 465.952,342.694 465.887,342.85 C465.808,343.042 465.766,343.144 465.728,343.234 C465.402,344.024 465.207,344.533 465.027,345.096 C464.593,346.455 464.756,347.446 465.484,348.768 C465.614,349.004 465.759,349.248 465.966,349.584 C466.005,349.647 466.032,349.69 466.099,349.799 C466.167,349.908 466.167,349.908 466.236,350.018 C466.35,350.201 466.434,350.337 466.517,350.475 C468.733,354.066 468.809,357.177 467.939,361.115 C469.214,360.855 468.627,360.92 469.694,360.866 C470.815,360.923 470.175,360.855 471.607,361.147 C472.579,357.208 472.485,354.945 470.454,351.281 C470.374,351.15 470.293,351.017 470.182,350.839 C470.264,350.972 469.974,350.505 469.91,350.401 C469.69,350.045 469.533,349.781 469.388,349.518 C468.469,347.849 468.236,346.429 468.812,344.623 C469.008,344.009 469.216,343.466 469.558,342.64 C469.595,342.548 469.638,342.446 469.717,342.255 C469.781,342.1 469.828,341.987 469.874,341.876 C470.598,340.102 470.888,338.968 470.888,337.435 C470.888,337.005 471.236,336.657 471.665,336.657 C472.095,336.657 472.443,337.005 472.443,337.435 C472.443,339.206 472.107,340.52 471.313,342.464 C471.267,342.578 471.219,342.694 471.154,342.85 C471.074,343.042 471.032,343.144 470.995,343.234 C470.669,344.024 470.474,344.533 470.294,345.096 C469.86,346.455 470.022,347.446 470.75,348.768 C470.881,349.004 471.026,349.248 471.233,349.584 C471.272,349.647 471.299,349.69 471.366,349.799 C471.434,349.908 471.434,349.908 471.503,350.018 C471.616,350.201 471.701,350.337 471.784,350.475 C474.023,354.174 474.19,357.684 473.061,361.735 C475.337,363.062 476.542,365.245 476.673,367.845 C476.673,371.7 473.549,374.824 469.694,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M469.694,297.184 C473.549,297.184 476.673,300.308 476.673,304.163 C476.672,306.734 475.309,308.755 473.243,310.149 C472.064,314.341 472.017,316.788 474.202,320.727 C474.281,320.858 474.363,320.991 474.474,321.169 C474.391,321.036 474.682,321.503 474.745,321.607 C474.965,321.963 475.122,322.227 475.267,322.49 C476.187,324.159 476.42,325.579 475.843,327.385 C475.647,327.999 475.439,328.542 475.098,329.368 C475.06,329.46 475.018,329.562 474.938,329.753 C474.874,329.908 474.827,330.021 474.782,330.132 C474.058,331.906 473.768,333.04 473.768,334.573 C473.768,335.003 473.42,335.351 472.99,335.351 C472.561,335.351 472.212,335.003 472.212,334.573 C472.212,332.802 472.548,331.488 473.342,329.544 C473.389,329.43 473.437,329.314 473.501,329.158 C473.581,328.966 473.623,328.864 473.661,328.774 C473.987,327.984 474.182,327.475 474.362,326.912 C474.796,325.553 474.633,324.562 473.905,323.24 C473.775,323.004 473.63,322.76 473.422,322.424 C473.383,322.361 473.356,322.318 473.289,322.209 C473.221,322.1 473.221,322.1 473.153,321.99 C473.039,321.807 472.955,321.671 472.872,321.533 C470.656,317.942 470.58,314.831 471.45,310.893 C470.175,311.153 470.762,311.088 469.694,311.142 C468.573,311.085 469.214,311.153 467.782,310.861 C466.81,314.8 466.903,317.063 468.935,320.727 C469.014,320.858 469.096,320.991 469.207,321.169 C469.124,321.036 469.415,321.503 469.479,321.607 C469.699,321.963 469.855,322.227 470,322.49 C470.92,324.159 471.153,325.579 470.576,327.385 C470.38,327.999 470.173,328.542 469.831,329.368 C469.793,329.46 469.751,329.562 469.671,329.753 C469.607,329.908 469.561,330.021 469.515,330.132 C468.791,331.906 468.501,333.04 468.501,334.573 C468.501,335.003 468.153,335.351 467.723,335.351 C467.294,335.351 466.946,335.003 466.946,334.573 C466.946,332.802 467.281,331.488 468.075,329.544 C468.122,329.43 468.17,329.314 468.235,329.158 C468.314,328.966 468.356,328.864 468.394,328.774 C468.72,327.984 468.915,327.475 469.095,326.912 C469.529,325.553 469.366,324.562 468.638,323.24 C468.508,323.004 468.363,322.76 468.155,322.424 C468.117,322.361 468.09,322.318 468.022,322.209 C467.955,322.1 467.955,322.1 467.886,321.99 C467.772,321.807 467.688,321.671 467.605,321.533 C465.366,317.834 465.198,314.324 466.328,310.273 C464.051,308.946 462.847,306.763 462.715,304.163 C462.715,300.308 465.84,297.184 469.694,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M483.652,374.824 C479.798,374.824 476.673,371.7 476.673,367.845 C476.675,365.274 478.038,363.253 480.103,361.859 C481.282,357.667 481.329,355.22 479.145,351.281 C479.065,351.15 478.984,351.017 478.873,350.839 C478.955,350.972 478.665,350.505 478.601,350.401 C478.381,350.045 478.224,349.781 478.079,349.518 C477.16,347.849 476.927,346.429 477.504,344.623 C477.7,344.009 477.907,343.466 478.249,342.64 C478.287,342.548 478.329,342.446 478.409,342.255 C478.473,342.1 478.519,341.987 478.565,341.876 C479.289,340.102 479.579,338.968 479.579,337.435 C479.579,337.005 479.927,336.657 480.357,336.657 C480.786,336.657 481.134,337.005 481.134,337.435 C481.134,339.206 480.798,340.52 480.004,342.464 C479.958,342.578 479.91,342.694 479.845,342.85 C479.765,343.042 479.723,343.144 479.686,343.234 C479.36,344.024 479.165,344.533 478.985,345.096 C478.551,346.455 478.713,347.446 479.442,348.768 C479.572,349.004 479.717,349.248 479.924,349.584 C479.963,349.647 479.99,349.69 480.057,349.799 C480.125,349.908 480.125,349.908 480.194,350.018 C480.307,350.201 480.392,350.337 480.475,350.475 C482.691,354.066 482.767,357.177 481.897,361.115 C483.172,360.855 482.585,360.92 483.652,360.866 C484.773,360.923 484.132,360.855 485.565,361.147 C486.537,357.208 486.443,354.945 484.412,351.281 C484.332,351.15 484.251,351.017 484.14,350.839 C484.222,350.972 483.932,350.505 483.868,350.401 C483.648,350.045 483.491,349.781 483.346,349.518 C482.427,347.849 482.193,346.429 482.77,344.623 C482.966,344.009 483.174,343.466 483.516,342.64 C483.553,342.548 483.596,342.446 483.675,342.255 C483.739,342.1 483.786,341.987 483.831,341.876 C484.556,340.102 484.846,338.968 484.846,337.435 C484.846,337.005 485.194,336.657 485.623,336.657 C486.053,336.657 486.401,337.005 486.401,337.435 C486.401,339.206 486.065,340.52 485.271,342.464 C485.225,342.578 485.177,342.694 485.112,342.85 C485.032,343.042 484.99,343.144 484.953,343.234 C484.626,344.024 484.432,344.533 484.252,345.096 C483.818,346.455 483.98,347.446 484.708,348.768 C484.838,349.004 484.984,349.248 485.191,349.584 C485.23,349.647 485.257,349.69 485.324,349.799 C485.392,349.908 485.392,349.908 485.461,350.018 C485.574,350.201 485.658,350.337 485.742,350.475 C487.981,354.174 488.148,357.684 487.018,361.735 C489.295,363.062 490.5,365.245 490.631,367.845 C490.631,371.7 487.507,374.824 483.652,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M483.652,297.184 C487.507,297.184 490.631,300.308 490.631,304.163 C490.629,306.734 489.266,308.755 487.201,310.149 C486.022,314.341 485.975,316.788 488.159,320.727 C488.239,320.858 488.321,320.991 488.431,321.169 C488.349,321.036 488.64,321.503 488.703,321.607 C488.923,321.963 489.08,322.227 489.225,322.49 C490.145,324.159 490.378,325.579 489.801,327.385 C489.605,327.999 489.397,328.542 489.056,329.368 C489.018,329.46 488.975,329.562 488.896,329.753 C488.832,329.908 488.785,330.021 488.74,330.132 C488.015,331.906 487.726,333.04 487.726,334.573 C487.726,335.003 487.377,335.351 486.948,335.351 C486.519,335.351 486.17,335.003 486.17,334.573 C486.17,332.802 486.506,331.488 487.3,329.544 C487.347,329.43 487.394,329.314 487.459,329.158 C487.539,328.966 487.581,328.864 487.618,328.774 C487.945,327.984 488.14,327.475 488.32,326.912 C488.754,325.553 488.591,324.562 487.863,323.24 C487.733,323.004 487.588,322.76 487.38,322.424 C487.341,322.361 487.314,322.318 487.247,322.209 C487.179,322.1 487.179,322.1 487.111,321.99 C486.997,321.807 486.913,321.671 486.83,321.533 C484.614,317.942 484.538,314.831 485.407,310.893 C484.132,311.153 484.72,311.088 483.652,311.142 C482.531,311.085 483.172,311.153 481.74,310.861 C480.768,314.8 480.861,317.063 482.893,320.727 C482.972,320.858 483.054,320.991 483.165,321.169 C483.082,321.036 483.373,321.503 483.436,321.607 C483.656,321.963 483.813,322.227 483.958,322.49 C484.878,324.159 485.111,325.579 484.534,327.385 C484.338,327.999 484.13,328.542 483.789,329.368 C483.751,329.46 483.709,329.562 483.629,329.753 C483.565,329.908 483.518,330.021 483.473,330.132 C482.749,331.906 482.459,333.04 482.459,334.573 C482.459,335.003 482.111,335.351 481.681,335.351 C481.252,335.351 480.904,335.003 480.903,334.573 C480.904,332.802 481.239,331.488 482.033,329.544 C482.08,329.43 482.128,329.314 482.192,329.158 C482.272,328.966 482.314,328.864 482.352,328.774 C482.678,327.984 482.873,327.475 483.053,326.912 C483.487,325.553 483.324,324.562 482.596,323.24 C482.466,323.004 482.321,322.76 482.113,322.424 C482.074,322.361 482.047,322.318 481.98,322.209 C481.912,322.1 481.912,322.1 481.844,321.99 C481.73,321.807 481.646,321.671 481.563,321.533 C479.323,317.834 479.156,314.324 480.286,310.273 C478.009,308.946 476.805,306.763 476.673,304.163 C476.673,300.308 479.798,297.184 483.652,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M497.61,374.824 C493.756,374.824 490.631,371.7 490.631,367.845 C490.633,365.274 491.996,363.253 494.061,361.859 C495.24,357.667 495.287,355.22 493.103,351.281 C493.023,351.15 492.942,351.017 492.831,350.839 C492.913,350.972 492.623,350.505 492.559,350.401 C492.339,350.045 492.182,349.781 492.037,349.518 C491.118,347.849 490.885,346.429 491.461,344.623 C491.657,344.009 491.865,343.466 492.207,342.64 C492.244,342.548 492.287,342.446 492.367,342.255 C492.43,342.1 492.477,341.987 492.523,341.876 C493.247,340.102 493.537,338.968 493.537,337.435 C493.537,337.005 493.885,336.657 494.315,336.657 C494.744,336.657 495.092,337.005 495.092,337.435 C495.092,339.206 494.756,340.52 493.962,342.464 C493.916,342.578 493.868,342.694 493.803,342.85 C493.723,343.042 493.681,343.144 493.644,343.234 C493.318,344.024 493.123,344.533 492.943,345.096 C492.509,346.455 492.671,347.446 493.399,348.768 C493.53,349.004 493.675,349.248 493.882,349.584 C493.921,349.647 493.948,349.69 494.015,349.799 C494.083,349.908 494.083,349.908 494.152,350.018 C494.265,350.201 494.35,350.337 494.433,350.475 C496.649,354.066 496.725,357.177 495.855,361.115 C497.13,360.855 496.543,360.92 497.61,360.866 C498.731,360.923 498.09,360.855 499.522,361.147 C500.495,357.208 500.401,354.945 498.37,351.281 C498.29,351.15 498.208,351.017 498.098,350.839 C498.18,350.972 497.89,350.505 497.826,350.401 C497.606,350.045 497.449,349.781 497.304,349.518 C496.384,347.849 496.151,346.429 496.728,344.623 C496.924,344.009 497.132,343.466 497.473,342.64 C497.511,342.548 497.554,342.446 497.633,342.255 C497.697,342.1 497.744,341.987 497.789,341.876 C498.514,340.102 498.804,338.968 498.804,337.435 C498.804,337.005 499.152,336.657 499.581,336.657 C500.011,336.657 500.359,337.005 500.359,337.435 C500.359,339.206 500.023,340.52 499.229,342.464 C499.183,342.578 499.135,342.694 499.07,342.85 C498.99,343.042 498.948,343.144 498.911,343.234 C498.584,344.024 498.39,344.533 498.21,345.096 C497.776,346.455 497.938,347.446 498.666,348.768 C498.796,349.004 498.942,349.248 499.149,349.584 C499.188,349.647 499.215,349.69 499.282,349.799 C499.35,349.908 499.35,349.908 499.419,350.018 C499.532,350.201 499.616,350.337 499.7,350.475 C501.939,354.174 502.106,357.684 500.976,361.735 C503.253,363.062 504.458,365.245 504.589,367.845 C504.589,371.7 501.464,374.824 497.61,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M497.61,297.184 C501.465,297.184 504.589,300.308 504.589,304.163 C504.587,306.734 503.224,308.755 501.159,310.149 C499.98,314.341 499.933,316.788 502.117,320.727 C502.197,320.858 502.279,320.991 502.389,321.169 C502.307,321.036 502.597,321.503 502.661,321.607 C502.881,321.963 503.038,322.227 503.183,322.49 C504.103,324.159 504.336,325.579 503.759,327.385 C503.563,327.999 503.355,328.542 503.014,329.368 C502.976,329.46 502.933,329.562 502.854,329.753 C502.79,329.908 502.743,330.021 502.698,330.132 C501.973,331.906 501.684,333.04 501.683,334.573 C501.684,335.003 501.335,335.351 500.906,335.351 C500.476,335.351 500.128,335.003 500.128,334.573 C500.128,332.802 500.464,331.488 501.258,329.544 C501.305,329.43 501.352,329.314 501.417,329.158 C501.497,328.966 501.539,328.864 501.576,328.774 C501.903,327.984 502.097,327.475 502.277,326.912 C502.712,325.553 502.549,324.562 501.821,323.24 C501.691,323.004 501.546,322.76 501.338,322.424 C501.299,322.361 501.272,322.318 501.205,322.209 C501.137,322.1 501.137,322.1 501.068,321.99 C500.955,321.807 500.871,321.671 500.788,321.533 C498.571,317.942 498.495,314.831 499.365,310.893 C498.09,311.153 498.678,311.088 497.61,311.142 C496.489,311.085 497.13,311.153 495.698,310.861 C494.726,314.8 494.819,317.063 496.85,320.727 C496.93,320.858 497.012,320.991 497.123,321.169 C497.04,321.036 497.331,321.503 497.394,321.607 C497.614,321.963 497.771,322.227 497.916,322.49 C498.836,324.159 499.069,325.579 498.492,327.385 C498.296,327.999 498.088,328.542 497.747,329.368 C497.709,329.46 497.667,329.562 497.587,329.753 C497.523,329.908 497.476,330.021 497.431,330.132 C496.706,331.906 496.417,333.04 496.417,334.573 C496.417,335.003 496.068,335.351 495.639,335.351 C495.21,335.351 494.861,335.003 494.861,334.573 C494.861,332.802 495.197,331.488 495.991,329.544 C496.038,329.43 496.085,329.314 496.15,329.158 C496.23,328.966 496.272,328.864 496.31,328.774 C496.636,327.984 496.831,327.475 497.011,326.912 C497.445,325.553 497.282,324.562 496.554,323.24 C496.424,323.004 496.279,322.76 496.071,322.424 C496.032,322.361 496.005,322.318 495.938,322.209 C495.87,322.1 495.87,322.1 495.802,321.99 C495.688,321.807 495.604,321.671 495.521,321.533 C493.281,317.834 493.114,314.324 494.244,310.273 C491.967,308.946 490.763,306.763 490.631,304.163 C490.631,300.308 493.756,297.184 497.61,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M511.568,374.824 C507.714,374.824 504.589,371.7 504.589,367.845 C504.591,365.274 505.954,363.253 508.019,361.859 C509.198,357.667 509.245,355.22 507.061,351.281 C506.981,351.15 506.9,351.017 506.789,350.839 C506.871,350.972 506.581,350.505 506.517,350.401 C506.297,350.045 506.14,349.781 505.995,349.518 C505.076,347.849 504.842,346.429 505.419,344.623 C505.615,344.009 505.823,343.466 506.165,342.64 C506.202,342.548 506.245,342.446 506.324,342.255 C506.388,342.1 506.435,341.987 506.481,341.876 C507.205,340.102 507.495,338.968 507.495,337.435 C507.495,337.005 507.843,336.657 508.272,336.657 C508.702,336.657 509.05,337.005 509.05,337.435 C509.05,339.206 508.714,340.52 507.92,342.464 C507.874,342.578 507.826,342.694 507.761,342.85 C507.681,343.042 507.639,343.144 507.602,343.234 C507.275,344.024 507.081,344.533 506.901,345.096 C506.467,346.455 506.629,347.446 507.357,348.768 C507.487,349.004 507.633,349.248 507.84,349.584 C507.879,349.647 507.906,349.69 507.973,349.799 C508.041,349.908 508.041,349.908 508.11,350.018 C508.223,350.201 508.307,350.337 508.391,350.475 C510.607,354.066 510.683,357.177 509.813,361.115 C511.088,360.855 510.501,360.92 511.568,360.866 C512.689,360.923 512.048,360.855 513.48,361.147 C514.453,357.208 514.359,354.945 512.328,351.281 C512.248,351.15 512.166,351.017 512.056,350.839 C512.138,350.972 511.848,350.505 511.784,350.401 C511.564,350.045 511.407,349.781 511.262,349.518 C510.342,347.849 510.109,346.429 510.686,344.623 C510.882,344.009 511.09,343.466 511.431,342.64 C511.469,342.548 511.512,342.446 511.591,342.255 C511.655,342.1 511.702,341.987 511.747,341.876 C512.472,340.102 512.762,338.968 512.762,337.435 C512.762,337.005 513.11,336.657 513.539,336.657 C513.969,336.657 514.317,337.005 514.317,337.435 C514.317,339.206 513.981,340.52 513.187,342.464 C513.141,342.578 513.093,342.694 513.028,342.85 C512.948,343.042 512.906,343.144 512.869,343.234 C512.542,344.024 512.348,344.533 512.168,345.096 C511.733,346.455 511.896,347.446 512.624,348.768 C512.754,349.004 512.899,349.248 513.107,349.584 C513.146,349.647 513.173,349.69 513.24,349.799 C513.308,349.908 513.308,349.908 513.377,350.018 C513.49,350.201 513.574,350.337 513.658,350.475 C515.897,354.174 516.064,357.684 514.934,361.735 C517.211,363.062 518.416,365.245 518.547,367.845 C518.547,371.7 515.422,374.824 511.568,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M511.568,297.184 C515.422,297.184 518.547,300.308 518.547,304.163 C518.545,306.734 517.182,308.755 515.117,310.149 C513.938,314.341 513.891,316.788 516.075,320.727 C516.155,320.858 516.237,320.991 516.347,321.169 C516.265,321.036 516.555,321.503 516.619,321.607 C516.839,321.963 516.996,322.227 517.141,322.49 C518.061,324.159 518.294,325.579 517.717,327.385 C517.521,327.999 517.313,328.542 516.972,329.368 C516.934,329.46 516.891,329.562 516.812,329.753 C516.748,329.908 516.701,330.021 516.656,330.132 C515.931,331.906 515.641,333.04 515.641,334.573 C515.641,335.003 515.293,335.351 514.864,335.351 C514.434,335.351 514.086,335.003 514.086,334.573 C514.086,332.802 514.422,331.488 515.216,329.544 C515.263,329.43 515.31,329.314 515.375,329.158 C515.455,328.966 515.497,328.864 515.534,328.774 C515.861,327.984 516.055,327.475 516.235,326.912 C516.67,325.553 516.507,324.562 515.779,323.24 C515.649,323.004 515.504,322.76 515.296,322.424 C515.257,322.361 515.23,322.318 515.163,322.209 C515.095,322.1 515.095,322.1 515.026,321.99 C514.913,321.807 514.829,321.671 514.745,321.533 C512.529,317.942 512.453,314.831 513.323,310.893 C512.048,311.153 512.636,311.088 511.568,311.142 C510.447,311.085 511.088,311.153 509.656,310.861 C508.683,314.8 508.777,317.063 510.808,320.727 C510.888,320.858 510.97,320.991 511.08,321.169 C510.998,321.036 511.288,321.503 511.352,321.607 C511.572,321.963 511.729,322.227 511.874,322.49 C512.794,324.159 513.027,325.579 512.45,327.385 C512.254,327.999 512.046,328.542 511.705,329.368 C511.667,329.46 511.624,329.562 511.545,329.753 C511.481,329.908 511.434,330.021 511.389,330.132 C510.664,331.906 510.375,333.04 510.375,334.573 C510.375,335.003 510.026,335.351 509.597,335.351 C509.167,335.351 508.819,335.003 508.819,334.573 C508.819,332.802 509.155,331.488 509.949,329.544 C509.996,329.43 510.043,329.314 510.108,329.158 C510.188,328.966 510.23,328.864 510.268,328.774 C510.594,327.984 510.789,327.475 510.969,326.912 C511.403,325.553 511.24,324.562 510.512,323.24 C510.382,323.004 510.237,322.76 510.029,322.424 C509.99,322.361 509.963,322.318 509.896,322.209 C509.828,322.1 509.828,322.1 509.759,321.99 C509.646,321.807 509.562,321.671 509.479,321.533 C507.239,317.834 507.072,314.324 508.202,310.273 C505.925,308.946 504.72,306.763 504.589,304.163 C504.589,300.308 507.714,297.184 511.568,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M525.526,374.824 C521.672,374.824 518.547,371.7 518.547,367.845 C518.549,365.274 519.912,363.253 521.977,361.859 C523.156,357.667 523.203,355.22 521.019,351.281 C520.939,351.15 520.858,351.017 520.747,350.839 C520.829,350.972 520.539,350.505 520.475,350.401 C520.255,350.045 520.098,349.781 519.953,349.518 C519.034,347.849 518.8,346.429 519.377,344.623 C519.573,344.009 519.781,343.466 520.123,342.64 C520.16,342.548 520.203,342.446 520.282,342.255 C520.346,342.1 520.393,341.987 520.438,341.876 C521.163,340.102 521.453,338.968 521.453,337.435 C521.453,337.005 521.801,336.657 522.23,336.657 C522.66,336.657 523.008,337.005 523.008,337.435 C523.008,339.206 522.672,340.52 521.878,342.464 C521.832,342.578 521.784,342.694 521.719,342.85 C521.639,343.042 521.597,343.144 521.56,343.234 C521.233,344.024 521.039,344.533 520.859,345.096 C520.425,346.455 520.587,347.446 521.315,348.768 C521.445,349.004 521.591,349.248 521.798,349.584 C521.837,349.647 521.864,349.69 521.931,349.799 C521.999,349.908 521.999,349.908 522.068,350.018 C522.181,350.201 522.265,350.337 522.349,350.475 C524.565,354.066 524.641,357.177 523.771,361.115 C525.046,360.855 524.459,360.92 525.526,360.866 C526.647,360.923 526.006,360.855 527.438,361.147 C528.411,357.208 528.317,354.945 526.286,351.281 C526.206,351.15 526.124,351.017 526.014,350.839 C526.096,350.972 525.806,350.505 525.742,350.401 C525.522,350.045 525.365,349.781 525.22,349.518 C524.3,347.849 524.067,346.429 524.644,344.623 C524.84,344.009 525.048,343.466 525.389,342.64 C525.427,342.548 525.47,342.446 525.549,342.255 C525.613,342.1 525.66,341.987 525.705,341.876 C526.43,340.102 526.72,338.968 526.72,337.435 C526.72,337.005 527.068,336.657 527.497,336.657 C527.927,336.657 528.275,337.005 528.275,337.435 C528.275,339.206 527.939,340.52 527.145,342.464 C527.098,342.578 527.051,342.694 526.986,342.85 C526.906,343.042 526.864,343.144 526.827,343.234 C526.5,344.024 526.306,344.533 526.126,345.096 C525.691,346.455 525.854,347.446 526.582,348.768 C526.712,349.004 526.857,349.248 527.065,349.584 C527.104,349.647 527.131,349.69 527.198,349.799 C527.266,349.908 527.266,349.908 527.335,350.018 C527.448,350.201 527.532,350.337 527.616,350.475 C529.855,354.174 530.022,357.684 528.892,361.735 C531.169,363.062 532.374,365.245 532.505,367.845 C532.505,371.7 529.38,374.824 525.526,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M525.526,297.184 C529.38,297.184 532.505,300.308 532.505,304.163 C532.503,306.734 531.14,308.755 529.075,310.149 C527.896,314.341 527.849,316.788 530.033,320.727 C530.113,320.858 530.195,320.991 530.305,321.169 C530.223,321.036 530.513,321.503 530.577,321.607 C530.797,321.963 530.954,322.227 531.099,322.49 C532.019,324.159 532.252,325.579 531.675,327.385 C531.479,327.999 531.271,328.542 530.93,329.368 C530.892,329.46 530.849,329.562 530.77,329.753 C530.706,329.908 530.659,330.021 530.614,330.132 C529.889,331.906 529.599,333.04 529.599,334.573 C529.599,335.003 529.251,335.351 528.822,335.351 C528.392,335.351 528.044,335.003 528.044,334.573 C528.044,332.802 528.38,331.488 529.174,329.544 C529.221,329.43 529.268,329.314 529.333,329.158 C529.413,328.966 529.455,328.864 529.492,328.774 C529.819,327.984 530.013,327.475 530.193,326.912 C530.628,325.553 530.465,324.562 529.737,323.24 C529.607,323.004 529.462,322.76 529.254,322.424 C529.215,322.361 529.188,322.318 529.121,322.209 C529.053,322.1 529.053,322.1 528.984,321.99 C528.871,321.807 528.787,321.671 528.703,321.533 C526.487,317.942 526.411,314.831 527.281,310.893 C526.006,311.153 526.594,311.088 525.526,311.142 C524.405,311.085 525.046,311.153 523.614,310.861 C522.641,314.8 522.735,317.063 524.766,320.727 C524.846,320.858 524.928,320.991 525.038,321.169 C524.956,321.036 525.246,321.503 525.31,321.607 C525.53,321.963 525.687,322.227 525.832,322.49 C526.752,324.159 526.985,325.579 526.408,327.385 C526.212,327.999 526.004,328.542 525.663,329.368 C525.625,329.46 525.582,329.562 525.503,329.753 C525.439,329.908 525.392,330.021 525.347,330.132 C524.622,331.906 524.333,333.04 524.332,334.573 C524.333,335.003 523.984,335.351 523.555,335.351 C523.125,335.351 522.777,335.003 522.777,334.573 C522.777,332.802 523.113,331.488 523.907,329.544 C523.954,329.43 524.001,329.314 524.066,329.158 C524.146,328.966 524.188,328.864 524.225,328.774 C524.552,327.984 524.746,327.475 524.926,326.912 C525.361,325.553 525.198,324.562 524.47,323.24 C524.34,323.004 524.195,322.76 523.987,322.424 C523.948,322.361 523.921,322.318 523.854,322.209 C523.786,322.1 523.786,322.1 523.717,321.99 C523.604,321.807 523.52,321.671 523.437,321.533 C521.197,317.834 521.03,314.324 522.16,310.273 C519.883,308.946 518.678,306.763 518.547,304.163 C518.547,300.308 521.672,297.184 525.526,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M539.484,374.824 C535.63,374.824 532.505,371.7 532.505,367.845 C532.507,365.274 533.87,363.253 535.935,361.859 C537.114,357.667 537.161,355.22 534.977,351.281 C534.897,351.15 534.815,351.017 534.705,350.839 C534.787,350.972 534.497,350.505 534.433,350.401 C534.213,350.045 534.056,349.781 533.911,349.518 C532.991,347.849 532.758,346.429 533.335,344.623 C533.531,344.009 533.739,343.466 534.081,342.64 C534.118,342.548 534.161,342.446 534.24,342.255 C534.304,342.1 534.351,341.987 534.396,341.876 C535.121,340.102 535.411,338.968 535.411,337.435 C535.411,337.005 535.759,336.657 536.188,336.657 C536.618,336.657 536.966,337.005 536.966,337.435 C536.966,339.206 536.63,340.52 535.836,342.464 C535.789,342.578 535.742,342.694 535.677,342.85 C535.597,343.042 535.555,343.144 535.518,343.234 C535.191,344.024 534.997,344.533 534.817,345.096 C534.383,346.455 534.545,347.446 535.273,348.768 C535.403,349.004 535.549,349.248 535.756,349.584 C535.795,349.647 535.822,349.69 535.889,349.799 C535.957,349.908 535.957,349.908 536.026,350.018 C536.139,350.201 536.223,350.337 536.307,350.475 C538.523,354.066 538.599,357.177 537.729,361.115 C539.004,360.855 538.417,360.92 539.484,360.866 C540.605,360.923 539.964,360.855 541.396,361.147 C542.369,357.208 542.275,354.945 540.244,351.281 C540.164,351.15 540.082,351.017 539.972,350.839 C540.054,350.972 539.764,350.505 539.7,350.401 C539.48,350.045 539.323,349.781 539.178,349.518 C538.258,347.849 538.025,346.429 538.602,344.623 C538.798,344.009 539.006,343.466 539.347,342.64 C539.385,342.548 539.428,342.446 539.507,342.255 C539.571,342.1 539.618,341.987 539.663,341.876 C540.388,340.102 540.677,338.968 540.677,337.435 C540.677,337.005 541.026,336.657 541.455,336.657 C541.885,336.657 542.233,337.005 542.233,337.435 C542.233,339.206 541.897,340.52 541.103,342.464 C541.056,342.578 541.009,342.694 540.944,342.85 C540.864,343.042 540.822,343.144 540.785,343.234 C540.458,344.024 540.264,344.533 540.084,345.096 C539.649,346.455 539.812,347.446 540.54,348.768 C540.67,349.004 540.815,349.248 541.023,349.584 C541.062,349.647 541.089,349.69 541.156,349.799 C541.224,349.908 541.224,349.908 541.293,350.018 C541.406,350.201 541.49,350.337 541.573,350.475 C543.813,354.174 543.98,357.684 542.85,361.735 C545.127,363.062 546.332,365.245 546.463,367.845 C546.463,371.7 543.338,374.824 539.484,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M539.484,297.184 C543.338,297.184 546.463,300.308 546.463,304.163 C546.461,306.734 545.098,308.755 543.033,310.149 C541.854,314.341 541.807,316.788 543.991,320.727 C544.071,320.858 544.153,320.991 544.263,321.169 C544.181,321.036 544.471,321.503 544.535,321.607 C544.755,321.963 544.912,322.227 545.057,322.49 C545.977,324.159 546.21,325.579 545.633,327.385 C545.437,327.999 545.229,328.542 544.888,329.368 C544.85,329.46 544.807,329.562 544.728,329.753 C544.664,329.908 544.617,330.021 544.572,330.132 C543.847,331.906 543.557,333.04 543.557,334.573 C543.557,335.003 543.209,335.351 542.78,335.351 C542.35,335.351 542.002,335.003 542.002,334.573 C542.002,332.802 542.338,331.488 543.132,329.544 C543.178,329.43 543.226,329.314 543.291,329.158 C543.371,328.966 543.413,328.864 543.45,328.774 C543.777,327.984 543.971,327.475 544.151,326.912 C544.585,325.553 544.423,324.562 543.695,323.24 C543.565,323.004 543.419,322.76 543.212,322.424 C543.173,322.361 543.146,322.318 543.079,322.209 C543.011,322.1 543.011,322.1 542.942,321.99 C542.829,321.807 542.745,321.671 542.661,321.533 C540.445,317.942 540.369,314.831 541.239,310.893 C539.964,311.153 540.551,311.088 539.484,311.142 C538.363,311.085 539.004,311.153 537.572,310.861 C536.599,314.8 536.693,317.063 538.724,320.727 C538.804,320.858 538.886,320.991 538.996,321.169 C538.914,321.036 539.204,321.503 539.268,321.607 C539.488,321.963 539.645,322.227 539.79,322.49 C540.71,324.159 540.943,325.579 540.366,327.385 C540.17,327.999 539.962,328.542 539.621,329.368 C539.583,329.46 539.54,329.562 539.461,329.753 C539.397,329.908 539.35,330.021 539.305,330.132 C538.58,331.906 538.29,333.04 538.29,334.573 C538.29,335.003 537.942,335.351 537.513,335.351 C537.083,335.351 536.735,335.003 536.735,334.573 C536.735,332.802 537.071,331.488 537.865,329.544 C537.912,329.43 537.959,329.314 538.024,329.158 C538.104,328.966 538.146,328.864 538.183,328.774 C538.51,327.984 538.704,327.475 538.884,326.912 C539.319,325.553 539.156,324.562 538.428,323.24 C538.298,323.004 538.153,322.76 537.945,322.424 C537.906,322.361 537.879,322.318 537.812,322.209 C537.744,322.1 537.744,322.1 537.675,321.99 C537.562,321.807 537.478,321.671 537.394,321.533 C535.155,317.834 534.988,314.324 536.118,310.273 C533.841,308.946 532.636,306.763 532.505,304.163 C532.505,300.308 535.63,297.184 539.484,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M553.442,374.824 C549.588,374.824 546.463,371.7 546.463,367.845 C546.465,365.274 547.828,363.253 549.893,361.859 C551.072,357.667 551.119,355.22 548.935,351.281 C548.855,351.15 548.773,351.017 548.663,350.839 C548.745,350.972 548.455,350.505 548.391,350.401 C548.171,350.045 548.014,349.781 547.869,349.518 C546.949,347.849 546.716,346.429 547.293,344.623 C547.489,344.009 547.697,343.466 548.038,342.64 C548.076,342.548 548.119,342.446 548.198,342.255 C548.262,342.1 548.309,341.987 548.354,341.876 C549.079,340.102 549.369,338.968 549.369,337.435 C549.369,337.005 549.717,336.657 550.146,336.657 C550.576,336.657 550.924,337.005 550.924,337.435 C550.924,339.206 550.588,340.52 549.794,342.464 C549.747,342.578 549.7,342.694 549.635,342.85 C549.555,343.042 549.513,343.144 549.476,343.234 C549.149,344.024 548.955,344.533 548.775,345.096 C548.34,346.455 548.503,347.446 549.231,348.768 C549.361,349.004 549.506,349.248 549.714,349.584 C549.753,349.647 549.78,349.69 549.847,349.799 C549.915,349.908 549.915,349.908 549.984,350.018 C550.097,350.201 550.181,350.337 550.265,350.475 C552.481,354.066 552.557,357.177 551.687,361.115 C552.962,360.855 552.374,360.92 553.442,360.866 C554.563,360.923 553.922,360.855 555.354,361.147 C556.326,357.208 556.233,354.945 554.202,351.281 C554.122,351.15 554.04,351.017 553.93,350.839 C554.012,350.972 553.721,350.505 553.658,350.401 C553.438,350.045 553.281,349.781 553.136,349.518 C552.216,347.849 551.983,346.429 552.56,344.623 C552.756,344.009 552.964,343.466 553.305,342.64 C553.343,342.548 553.386,342.446 553.465,342.255 C553.529,342.1 553.576,341.987 553.621,341.876 C554.346,340.102 554.635,338.968 554.635,337.435 C554.635,337.005 554.984,336.657 555.413,336.657 C555.842,336.657 556.191,337.005 556.191,337.435 C556.191,339.206 555.855,340.52 555.061,342.464 C555.014,342.578 554.967,342.694 554.902,342.85 C554.822,343.042 554.78,343.144 554.742,343.234 C554.416,344.024 554.221,344.533 554.042,345.096 C553.607,346.455 553.77,347.446 554.498,348.768 C554.628,349.004 554.773,349.248 554.981,349.584 C555.02,349.647 555.047,349.69 555.114,349.799 C555.182,349.908 555.182,349.908 555.251,350.018 C555.364,350.201 555.448,350.337 555.531,350.475 C557.771,354.174 557.938,357.684 556.808,361.735 C559.085,363.062 560.289,365.245 560.421,367.845 C560.421,371.7 557.296,374.824 553.442,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M553.442,297.184 C557.296,297.184 560.421,300.308 560.421,304.163 C560.419,306.734 559.056,308.755 556.991,310.149 C555.812,314.341 555.765,316.788 557.949,320.727 C558.029,320.858 558.11,320.991 558.221,321.169 C558.139,321.036 558.429,321.503 558.493,321.607 C558.713,321.963 558.87,322.227 559.015,322.49 C559.935,324.159 560.168,325.579 559.591,327.385 C559.395,327.999 559.187,328.542 558.845,329.368 C558.808,329.46 558.765,329.562 558.686,329.753 C558.622,329.908 558.575,330.021 558.53,330.132 C557.805,331.906 557.515,333.04 557.515,334.573 C557.515,335.003 557.167,335.351 556.738,335.351 C556.308,335.351 555.96,335.003 555.96,334.573 C555.96,332.802 556.296,331.488 557.09,329.544 C557.136,329.43 557.184,329.314 557.249,329.158 C557.329,328.966 557.371,328.864 557.408,328.774 C557.735,327.984 557.929,327.475 558.109,326.912 C558.543,325.553 558.381,324.562 557.653,323.24 C557.523,323.004 557.377,322.76 557.17,322.424 C557.131,322.361 557.104,322.318 557.037,322.209 C556.969,322.1 556.969,322.1 556.9,321.99 C556.787,321.807 556.703,321.671 556.619,321.533 C554.403,317.942 554.327,314.831 555.197,310.893 C553.922,311.153 554.509,311.088 553.442,311.142 C552.321,311.085 552.962,311.153 551.53,310.861 C550.557,314.8 550.651,317.063 552.682,320.727 C552.762,320.858 552.844,320.991 552.954,321.169 C552.872,321.036 553.162,321.503 553.226,321.607 C553.446,321.963 553.603,322.227 553.748,322.49 C554.668,324.159 554.901,325.579 554.324,327.385 C554.128,327.999 553.92,328.542 553.579,329.368 C553.541,329.46 553.498,329.562 553.419,329.753 C553.355,329.908 553.308,330.021 553.263,330.132 C552.538,331.906 552.248,333.04 552.248,334.573 C552.248,335.003 551.9,335.351 551.471,335.351 C551.041,335.351 550.693,335.003 550.693,334.573 C550.693,332.802 551.029,331.488 551.823,329.544 C551.87,329.43 551.917,329.314 551.982,329.158 C552.062,328.966 552.104,328.864 552.141,328.774 C552.468,327.984 552.662,327.475 552.842,326.912 C553.276,325.553 553.114,324.562 552.386,323.24 C552.256,323.004 552.11,322.76 551.903,322.424 C551.864,322.361 551.837,322.318 551.77,322.209 C551.702,322.1 551.702,322.1 551.633,321.99 C551.52,321.807 551.436,321.671 551.352,321.533 C549.113,317.834 548.946,314.324 550.076,310.273 C547.799,308.946 546.594,306.763 546.463,304.163 C546.463,300.308 549.588,297.184 553.442,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M567.4,374.824 C563.545,374.824 560.421,371.7 560.421,367.845 C560.423,365.274 561.786,363.253 563.851,361.859 C565.03,357.667 565.077,355.22 562.893,351.281 C562.813,351.15 562.731,351.017 562.621,350.839 C562.703,350.972 562.413,350.505 562.349,350.401 C562.129,350.045 561.972,349.781 561.827,349.518 C560.907,347.849 560.674,346.429 561.251,344.623 C561.447,344.009 561.655,343.466 561.996,342.64 C562.034,342.548 562.077,342.446 562.156,342.255 C562.22,342.1 562.267,341.987 562.312,341.876 C563.037,340.102 563.326,338.968 563.327,337.435 C563.326,337.005 563.675,336.657 564.104,336.657 C564.534,336.657 564.882,337.005 564.882,337.435 C564.882,339.206 564.546,340.52 563.752,342.464 C563.705,342.578 563.658,342.694 563.593,342.85 C563.513,343.042 563.471,343.144 563.434,343.234 C563.107,344.024 562.913,344.533 562.733,345.096 C562.298,346.455 562.461,347.446 563.189,348.768 C563.319,349.004 563.464,349.248 563.672,349.584 C563.711,349.647 563.738,349.69 563.805,349.799 C563.873,349.908 563.873,349.908 563.942,350.018 C564.055,350.201 564.139,350.337 564.222,350.475 C566.439,354.066 566.515,357.177 565.645,361.115 C566.92,360.855 566.332,360.92 567.4,360.866 C568.521,360.923 567.88,360.855 569.312,361.147 C570.284,357.208 570.191,354.945 568.159,351.281 C568.08,351.15 567.998,351.017 567.887,350.839 C567.97,350.972 567.679,350.505 567.616,350.401 C567.396,350.045 567.239,349.781 567.094,349.518 C566.174,347.849 565.941,346.429 566.518,344.623 C566.714,344.009 566.922,343.466 567.263,342.64 C567.301,342.548 567.343,342.446 567.423,342.255 C567.487,342.1 567.534,341.987 567.579,341.876 C568.303,340.102 568.593,338.968 568.593,337.435 C568.593,337.005 568.941,336.657 569.371,336.657 C569.8,336.657 570.149,337.005 570.149,337.435 C570.149,339.206 569.813,340.52 569.019,342.464 C568.972,342.578 568.924,342.694 568.86,342.85 C568.78,343.042 568.738,343.144 568.7,343.234 C568.374,344.024 568.179,344.533 567.999,345.096 C567.565,346.455 567.728,347.446 568.456,348.768 C568.586,349.004 568.731,349.248 568.939,349.584 C568.978,349.647 569.005,349.69 569.072,349.799 C569.14,349.908 569.14,349.908 569.208,350.018 C569.322,350.201 569.406,350.337 569.489,350.475 C571.729,354.174 571.896,357.684 570.766,361.735 C573.043,363.062 574.247,365.245 574.379,367.845 C574.379,371.7 571.254,374.824 567.4,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M567.4,297.184 C571.254,297.184 574.379,300.308 574.379,304.163 C574.377,306.734 573.014,308.755 570.949,310.149 C569.77,314.341 569.723,316.788 571.907,320.727 C571.987,320.858 572.068,320.991 572.179,321.169 C572.097,321.036 572.387,321.503 572.451,321.607 C572.671,321.963 572.828,322.227 572.973,322.49 C573.892,324.159 574.125,325.579 573.549,327.385 C573.353,327.999 573.145,328.542 572.803,329.368 C572.766,329.46 572.723,329.562 572.643,329.753 C572.58,329.908 572.533,330.021 572.487,330.132 C571.763,331.906 571.473,333.04 571.473,334.573 C571.473,335.003 571.125,335.351 570.695,335.351 C570.266,335.351 569.918,335.003 569.918,334.573 C569.918,332.802 570.254,331.488 571.048,329.544 C571.094,329.43 571.142,329.314 571.207,329.158 C571.287,328.966 571.329,328.864 571.366,328.774 C571.692,327.984 571.887,327.475 572.067,326.912 C572.501,325.553 572.339,324.562 571.611,323.24 C571.48,323.004 571.335,322.76 571.128,322.424 C571.089,322.361 571.062,322.318 570.995,322.209 C570.927,322.1 570.927,322.1 570.858,321.99 C570.745,321.807 570.66,321.671 570.577,321.533 C568.361,317.942 568.285,314.831 569.155,310.893 C567.88,311.153 568.467,311.088 567.4,311.142 C566.279,311.085 566.92,311.153 565.487,310.861 C564.515,314.8 564.609,317.063 566.64,320.727 C566.72,320.858 566.802,320.991 566.912,321.169 C566.83,321.036 567.12,321.503 567.184,321.607 C567.404,321.963 567.561,322.227 567.706,322.49 C568.626,324.159 568.859,325.579 568.282,327.385 C568.086,327.999 567.878,328.542 567.536,329.368 C567.499,329.46 567.456,329.562 567.377,329.753 C567.313,329.908 567.266,330.021 567.221,330.132 C566.496,331.906 566.206,333.04 566.206,334.573 C566.206,335.003 565.858,335.351 565.429,335.351 C564.999,335.351 564.651,335.003 564.651,334.573 C564.651,332.802 564.987,331.488 565.781,329.544 C565.827,329.43 565.875,329.314 565.94,329.158 C566.02,328.966 566.062,328.864 566.099,328.774 C566.426,327.984 566.62,327.475 566.8,326.912 C567.234,325.553 567.072,324.562 566.344,323.24 C566.214,323.004 566.068,322.76 565.861,322.424 C565.822,322.361 565.795,322.318 565.728,322.209 C565.66,322.1 565.66,322.1 565.591,321.99 C565.478,321.807 565.394,321.671 565.31,321.533 C563.071,317.834 562.904,314.324 564.034,310.273 C561.757,308.946 560.552,306.763 560.421,304.163 C560.421,300.308 563.545,297.184 567.4,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M581.358,374.824 C577.503,374.824 574.379,371.7 574.379,367.845 C574.381,365.274 575.744,363.253 577.809,361.859 C578.988,357.667 579.035,355.22 576.851,351.281 C576.771,351.15 576.689,351.017 576.579,350.839 C576.661,350.972 576.37,350.505 576.307,350.401 C576.087,350.045 575.93,349.781 575.785,349.518 C574.865,347.849 574.632,346.429 575.209,344.623 C575.405,344.009 575.613,343.466 575.954,342.64 C575.992,342.548 576.035,342.446 576.114,342.255 C576.178,342.1 576.225,341.987 576.27,341.876 C576.995,340.102 577.284,338.968 577.284,337.435 C577.284,337.005 577.633,336.657 578.062,336.657 C578.492,336.657 578.84,337.005 578.84,337.435 C578.84,339.206 578.504,340.52 577.71,342.464 C577.663,342.578 577.616,342.694 577.551,342.85 C577.471,343.042 577.429,343.144 577.392,343.234 C577.065,344.024 576.87,344.533 576.69,345.096 C576.256,346.455 576.419,347.446 577.147,348.768 C577.277,349.004 577.422,349.248 577.63,349.584 C577.669,349.647 577.696,349.69 577.763,349.799 C577.831,349.908 577.831,349.908 577.9,350.018 C578.013,350.201 578.097,350.337 578.18,350.475 C580.396,354.066 580.472,357.177 579.603,361.115 C580.878,360.855 580.29,360.92 581.358,360.866 C582.479,360.923 581.838,360.855 583.27,361.147 C584.242,357.208 584.149,354.945 582.117,351.281 C582.038,351.15 581.956,351.017 581.845,350.839 C581.928,350.972 581.637,350.505 581.573,350.401 C581.354,350.045 581.197,349.781 581.052,349.518 C580.132,347.849 579.899,346.429 580.476,344.623 C580.672,344.009 580.88,343.466 581.221,342.64 C581.259,342.548 581.301,342.446 581.381,342.255 C581.445,342.1 581.492,341.987 581.537,341.876 C582.261,340.102 582.551,338.968 582.551,337.435 C582.551,337.005 582.899,336.657 583.329,336.657 C583.758,336.657 584.106,337.005 584.107,337.435 C584.106,339.206 583.771,340.52 582.977,342.464 C582.93,342.578 582.882,342.694 582.818,342.85 C582.738,343.042 582.696,343.144 582.658,343.234 C582.332,344.024 582.137,344.533 581.957,345.096 C581.523,346.455 581.686,347.446 582.414,348.768 C582.544,349.004 582.689,349.248 582.897,349.584 C582.935,349.647 582.962,349.69 583.03,349.799 C583.097,349.908 583.097,349.908 583.166,350.018 C583.28,350.201 583.364,350.337 583.447,350.475 C585.687,354.174 585.854,357.684 584.724,361.735 C587.001,363.062 588.205,365.245 588.337,367.845 C588.337,371.7 585.212,374.824 581.358,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M581.358,297.184 C585.212,297.184 588.337,300.308 588.337,304.163 C588.335,306.734 586.972,308.755 584.907,310.149 C583.728,314.341 583.681,316.788 585.865,320.727 C585.945,320.858 586.026,320.991 586.137,321.169 C586.055,321.036 586.345,321.503 586.409,321.607 C586.629,321.963 586.786,322.227 586.931,322.49 C587.85,324.159 588.083,325.579 587.506,327.385 C587.311,327.999 587.103,328.542 586.761,329.368 C586.723,329.46 586.681,329.562 586.601,329.753 C586.538,329.908 586.491,330.021 586.445,330.132 C585.721,331.906 585.431,333.04 585.431,334.573 C585.431,335.003 585.083,335.351 584.653,335.351 C584.224,335.351 583.876,335.003 583.876,334.573 C583.876,332.802 584.212,331.488 585.006,329.544 C585.052,329.43 585.1,329.314 585.165,329.158 C585.245,328.966 585.287,328.864 585.324,328.774 C585.65,327.984 585.845,327.475 586.025,326.912 C586.459,325.553 586.297,324.562 585.568,323.24 C585.438,323.004 585.293,322.76 585.086,322.424 C585.047,322.361 585.02,322.318 584.953,322.209 C584.885,322.1 584.885,322.1 584.816,321.99 C584.703,321.807 584.618,321.671 584.535,321.533 C582.319,317.942 582.243,314.831 583.113,310.893 C581.838,311.153 582.425,311.088 581.358,311.142 C580.237,311.085 580.878,311.153 579.445,310.861 C578.473,314.8 578.567,317.063 580.598,320.727 C580.678,320.858 580.759,320.991 580.87,321.169 C580.788,321.036 581.078,321.503 581.142,321.607 C581.362,321.963 581.519,322.227 581.664,322.49 C582.583,324.159 582.817,325.579 582.24,327.385 C582.044,327.999 581.836,328.542 581.494,329.368 C581.457,329.46 581.414,329.562 581.335,329.753 C581.271,329.908 581.224,330.021 581.178,330.132 C580.454,331.906 580.164,333.04 580.164,334.573 C580.164,335.003 579.816,335.351 579.387,335.351 C578.957,335.351 578.609,335.003 578.609,334.573 C578.609,332.802 578.945,331.488 579.739,329.544 C579.785,329.43 579.833,329.314 579.898,329.158 C579.978,328.966 580.02,328.864 580.057,328.774 C580.383,327.984 580.578,327.475 580.758,326.912 C581.192,325.553 581.03,324.562 580.302,323.24 C580.172,323.004 580.026,322.76 579.819,322.424 C579.78,322.361 579.753,322.318 579.686,322.209 C579.618,322.1 579.618,322.1 579.549,321.99 C579.436,321.807 579.352,321.671 579.268,321.533 C577.029,317.834 576.862,314.324 577.991,310.273 C575.715,308.946 574.51,306.763 574.379,304.163 C574.379,300.308 577.503,297.184 581.358,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M595.316,374.824 C591.461,374.824 588.337,371.7 588.337,367.845 C588.339,365.274 589.702,363.253 591.767,361.859 C592.946,357.667 592.993,355.22 590.808,351.281 C590.729,351.15 590.647,351.017 590.536,350.839 C590.619,350.972 590.328,350.505 590.265,350.401 C590.045,350.045 589.888,349.781 589.743,349.518 C588.823,347.849 588.59,346.429 589.167,344.623 C589.363,344.009 589.571,343.466 589.912,342.64 C589.95,342.548 589.992,342.446 590.072,342.255 C590.136,342.1 590.183,341.987 590.228,341.876 C590.953,340.102 591.242,338.968 591.242,337.435 C591.242,337.005 591.591,336.657 592.02,336.657 C592.449,336.657 592.798,337.005 592.798,337.435 C592.798,339.206 592.462,340.52 591.668,342.464 C591.621,342.578 591.573,342.694 591.509,342.85 C591.429,343.042 591.387,343.144 591.349,343.234 C591.023,344.024 590.828,344.533 590.648,345.096 C590.214,346.455 590.377,347.446 591.105,348.768 C591.235,349.004 591.38,349.248 591.588,349.584 C591.627,349.647 591.654,349.69 591.721,349.799 C591.789,349.908 591.789,349.908 591.857,350.018 C591.971,350.201 592.055,350.337 592.138,350.475 C594.354,354.066 594.43,357.177 593.56,361.115 C594.835,360.855 594.248,360.92 595.316,360.866 C596.437,360.923 595.796,360.855 597.228,361.147 C598.2,357.208 598.107,354.945 596.075,351.281 C595.995,351.15 595.914,351.017 595.803,350.839 C595.886,350.972 595.595,350.505 595.531,350.401 C595.311,350.045 595.154,349.781 595.01,349.518 C594.09,347.849 593.857,346.429 594.434,344.623 C594.63,344.009 594.837,343.466 595.179,342.64 C595.217,342.548 595.259,342.446 595.339,342.255 C595.403,342.1 595.449,341.987 595.495,341.876 C596.219,340.102 596.509,338.968 596.509,337.435 C596.509,337.005 596.857,336.657 597.287,336.657 C597.716,336.657 598.064,337.005 598.064,337.435 C598.064,339.206 597.729,340.52 596.935,342.464 C596.888,342.578 596.84,342.694 596.775,342.85 C596.696,343.042 596.654,343.144 596.616,343.234 C596.29,344.024 596.095,344.533 595.915,345.096 C595.481,346.455 595.644,347.446 596.372,348.768 C596.502,349.004 596.647,349.248 596.854,349.584 C596.893,349.647 596.92,349.69 596.988,349.799 C597.055,349.908 597.055,349.908 597.124,350.018 C597.238,350.201 597.322,350.337 597.405,350.475 C599.644,354.174 599.811,357.684 598.682,361.735 C600.958,363.062 602.163,365.245 602.295,367.845 C602.294,371.7 599.17,374.824 595.316,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M595.316,297.184 C599.17,297.184 602.295,300.308 602.295,304.163 C602.293,306.734 600.93,308.755 598.865,310.149 C597.686,314.341 597.639,316.788 599.823,320.727 C599.903,320.858 599.984,320.991 600.095,321.169 C600.013,321.036 600.303,321.503 600.367,321.607 C600.587,321.963 600.744,322.227 600.889,322.49 C601.808,324.159 602.041,325.579 601.464,327.385 C601.268,327.999 601.061,328.542 600.719,329.368 C600.681,329.46 600.639,329.562 600.559,329.753 C600.495,329.908 600.449,330.021 600.403,330.132 C599.679,331.906 599.389,333.04 599.389,334.573 C599.389,335.003 599.041,335.351 598.611,335.351 C598.182,335.351 597.834,335.003 597.834,334.573 C597.834,332.802 598.17,331.488 598.964,329.544 C599.01,329.43 599.058,329.314 599.123,329.158 C599.203,328.966 599.245,328.864 599.282,328.774 C599.608,327.984 599.803,327.475 599.983,326.912 C600.417,325.553 600.255,324.562 599.526,323.24 C599.396,323.004 599.251,322.76 599.044,322.424 C599.005,322.361 598.978,322.318 598.911,322.209 C598.843,322.1 598.843,322.1 598.774,321.99 C598.661,321.807 598.576,321.671 598.493,321.533 C596.277,317.942 596.201,314.831 597.071,310.893 C595.796,311.153 596.383,311.088 595.316,311.142 C594.195,311.085 594.835,311.153 593.403,310.861 C592.431,314.8 592.525,317.063 594.556,320.727 C594.636,320.858 594.717,320.991 594.828,321.169 C594.746,321.036 595.036,321.503 595.1,321.607 C595.32,321.963 595.477,322.227 595.622,322.49 C596.541,324.159 596.774,325.579 596.198,327.385 C596.002,327.999 595.794,328.542 595.452,329.368 C595.414,329.46 595.372,329.562 595.293,329.753 C595.229,329.908 595.182,330.021 595.136,330.132 C594.412,331.906 594.122,333.04 594.122,334.573 C594.122,335.003 593.774,335.351 593.344,335.351 C592.915,335.351 592.567,335.003 592.567,334.573 C592.567,332.802 592.903,331.488 593.697,329.544 C593.743,329.43 593.791,329.314 593.856,329.158 C593.936,328.966 593.978,328.864 594.015,328.774 C594.341,327.984 594.536,327.475 594.716,326.912 C595.15,325.553 594.988,324.562 594.26,323.24 C594.129,323.004 593.984,322.76 593.777,322.424 C593.738,322.361 593.711,322.318 593.644,322.209 C593.576,322.1 593.576,322.1 593.507,321.99 C593.394,321.807 593.309,321.671 593.226,321.533 C590.987,317.834 590.82,314.324 591.949,310.273 C589.673,308.946 588.468,306.763 588.337,304.163 C588.337,300.308 591.461,297.184 595.316,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M609.274,374.824 C605.419,374.824 602.295,371.7 602.295,367.845 C602.296,365.274 603.659,363.253 605.725,361.859 C606.904,357.667 606.951,355.22 604.766,351.281 C604.687,351.15 604.605,351.017 604.494,350.839 C604.577,350.972 604.286,350.505 604.222,350.401 C604.003,350.045 603.846,349.781 603.701,349.518 C602.781,347.849 602.548,346.429 603.125,344.623 C603.321,344.009 603.529,343.466 603.87,342.64 C603.908,342.548 603.95,342.446 604.03,342.255 C604.094,342.1 604.141,341.987 604.186,341.876 C604.91,340.102 605.2,338.968 605.2,337.435 C605.2,337.005 605.548,336.657 605.978,336.657 C606.407,336.657 606.755,337.005 606.756,337.435 C606.755,339.206 606.42,340.52 605.626,342.464 C605.579,342.578 605.531,342.694 605.467,342.85 C605.387,343.042 605.345,343.144 605.307,343.234 C604.981,344.024 604.786,344.533 604.606,345.096 C604.172,346.455 604.335,347.446 605.063,348.768 C605.193,349.004 605.338,349.248 605.546,349.584 C605.585,349.647 605.612,349.69 605.679,349.799 C605.747,349.908 605.747,349.908 605.815,350.018 C605.929,350.201 606.013,350.337 606.096,350.475 C608.312,354.066 608.388,357.177 607.518,361.115 C608.793,360.855 608.206,360.92 609.274,360.866 C610.394,360.923 609.754,360.855 611.186,361.147 C612.158,357.208 612.065,354.945 610.033,351.281 C609.953,351.15 609.872,351.017 609.761,350.839 C609.844,350.972 609.553,350.505 609.489,350.401 C609.269,350.045 609.112,349.781 608.967,349.518 C608.048,347.849 607.815,346.429 608.392,344.623 C608.588,344.009 608.795,343.466 609.137,342.64 C609.175,342.548 609.217,342.446 609.297,342.255 C609.361,342.1 609.407,341.987 609.453,341.876 C610.177,340.102 610.467,338.968 610.467,337.435 C610.467,337.005 610.815,336.657 611.245,336.657 C611.674,336.657 612.022,337.005 612.022,337.435 C612.022,339.206 611.687,340.52 610.893,342.464 C610.846,342.578 610.798,342.694 610.733,342.85 C610.654,343.042 610.612,343.144 610.574,343.234 C610.248,344.024 610.053,344.533 609.873,345.096 C609.439,346.455 609.602,347.446 610.33,348.768 C610.46,349.004 610.605,349.248 610.812,349.584 C610.851,349.647 610.878,349.69 610.946,349.799 C611.013,349.908 611.013,349.908 611.082,350.018 C611.196,350.201 611.28,350.337 611.363,350.475 C613.602,354.174 613.769,357.684 612.64,361.735 C614.916,363.062 616.121,365.245 616.252,367.845 C616.252,371.7 613.128,374.824 609.274,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M609.274,297.184 C613.128,297.184 616.253,300.308 616.253,304.163 C616.251,306.734 614.888,308.755 612.823,310.149 C611.644,314.341 611.597,316.788 613.781,320.727 C613.861,320.858 613.942,320.991 614.053,321.169 C613.97,321.036 614.261,321.503 614.325,321.607 C614.545,321.963 614.702,322.227 614.847,322.49 C615.766,324.159 615.999,325.579 615.422,327.385 C615.226,327.999 615.019,328.542 614.677,329.368 C614.639,329.46 614.597,329.562 614.517,329.753 C614.453,329.908 614.407,330.021 614.361,330.132 C613.637,331.906 613.347,333.04 613.347,334.573 C613.347,335.003 612.999,335.351 612.569,335.351 C612.14,335.351 611.792,335.003 611.792,334.573 C611.792,332.802 612.127,331.488 612.921,329.544 C612.968,329.43 613.016,329.314 613.081,329.158 C613.16,328.966 613.202,328.864 613.24,328.774 C613.566,327.984 613.761,327.475 613.941,326.912 C614.375,325.553 614.212,324.562 613.484,323.24 C613.354,323.004 613.209,322.76 613.002,322.424 C612.963,322.361 612.936,322.318 612.868,322.209 C612.801,322.1 612.801,322.1 612.732,321.99 C612.618,321.807 612.534,321.671 612.451,321.533 C610.235,317.942 610.159,314.831 611.029,310.893 C609.754,311.153 610.341,311.088 609.274,311.142 C608.153,311.085 608.793,311.153 607.361,310.861 C606.389,314.8 606.483,317.063 608.514,320.727 C608.594,320.858 608.675,320.991 608.786,321.169 C608.704,321.036 608.994,321.503 609.058,321.607 C609.278,321.963 609.435,322.227 609.58,322.49 C610.499,324.159 610.732,325.579 610.155,327.385 C609.959,327.999 609.752,328.542 609.41,329.368 C609.372,329.46 609.33,329.562 609.25,329.753 C609.186,329.908 609.14,330.021 609.094,330.132 C608.37,331.906 608.08,333.04 608.08,334.573 C608.08,335.003 607.732,335.351 607.302,335.351 C606.873,335.351 606.525,335.003 606.525,334.573 C606.525,332.802 606.861,331.488 607.655,329.544 C607.701,329.43 607.749,329.314 607.814,329.158 C607.893,328.966 607.936,328.864 607.973,328.774 C608.299,327.984 608.494,327.475 608.674,326.912 C609.108,325.553 608.946,324.562 608.217,323.24 C608.087,323.004 607.942,322.76 607.735,322.424 C607.696,322.361 607.669,322.318 607.602,322.209 C607.534,322.1 607.534,322.1 607.465,321.99 C607.352,321.807 607.267,321.671 607.184,321.533 C604.945,317.834 604.778,314.324 605.907,310.273 C603.631,308.946 602.426,306.763 602.295,304.163 C602.295,300.308 605.419,297.184 609.274,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M623.231,374.824 C619.377,374.824 616.253,371.7 616.253,367.845 C616.254,365.274 617.617,363.253 619.683,361.859 C620.861,357.667 620.908,355.22 618.724,351.281 C618.644,351.15 618.563,351.017 618.452,350.839 C618.535,350.972 618.244,350.505 618.18,350.401 C617.961,350.045 617.804,349.781 617.659,349.518 C616.739,347.849 616.506,346.429 617.083,344.623 C617.279,344.009 617.486,343.466 617.828,342.64 C617.866,342.548 617.908,342.446 617.988,342.255 C618.052,342.1 618.099,341.987 618.144,341.876 C618.868,340.102 619.158,338.968 619.158,337.435 C619.158,337.005 619.506,336.657 619.936,336.657 C620.365,336.657 620.713,337.005 620.713,337.435 C620.713,339.206 620.378,340.52 619.584,342.464 C619.537,342.578 619.489,342.694 619.424,342.85 C619.345,343.042 619.303,343.144 619.265,343.234 C618.939,344.024 618.744,344.533 618.564,345.096 C618.13,346.455 618.293,347.446 619.021,348.768 C619.151,349.004 619.296,349.248 619.504,349.584 C619.542,349.647 619.569,349.69 619.637,349.799 C619.704,349.908 619.704,349.908 619.773,350.018 C619.887,350.201 619.971,350.337 620.054,350.475 C622.27,354.066 622.346,357.177 621.476,361.115 C622.751,360.855 622.164,360.92 623.231,360.866 C624.352,360.923 623.712,360.855 625.144,361.147 C626.116,357.208 626.022,354.945 623.991,351.281 C623.911,351.15 623.83,351.017 623.719,350.839 C623.801,350.972 623.511,350.505 623.447,350.401 C623.227,350.045 623.07,349.781 622.925,349.518 C622.006,347.849 621.773,346.429 622.35,344.623 C622.546,344.009 622.753,343.466 623.095,342.64 C623.133,342.548 623.175,342.446 623.255,342.255 C623.319,342.1 623.365,341.987 623.411,341.876 C624.135,340.102 624.425,338.968 624.425,337.435 C624.425,337.005 624.773,336.657 625.203,336.657 C625.632,336.657 625.98,337.005 625.98,337.435 C625.98,339.206 625.644,340.52 624.85,342.464 C624.804,342.578 624.756,342.694 624.691,342.85 C624.612,343.042 624.569,343.144 624.532,343.234 C624.206,344.024 624.011,344.533 623.831,345.096 C623.397,346.455 623.56,347.446 624.288,348.768 C624.418,349.004 624.563,349.248 624.77,349.584 C624.809,349.647 624.836,349.69 624.903,349.799 C624.971,349.908 624.971,349.908 625.04,350.018 C625.154,350.201 625.238,350.337 625.321,350.475 C627.56,354.174 627.727,357.684 626.598,361.735 C628.874,363.062 630.079,365.245 630.21,367.845 C630.21,371.7 627.086,374.824 623.231,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M623.232,297.184 C627.086,297.184 630.21,300.308 630.21,304.163 C630.209,306.734 628.846,308.755 626.78,310.149 C625.602,314.341 625.555,316.788 627.739,320.727 C627.819,320.858 627.9,320.991 628.011,321.169 C627.928,321.036 628.219,321.503 628.283,321.607 C628.503,321.963 628.66,322.227 628.805,322.49 C629.724,324.159 629.957,325.579 629.38,327.385 C629.184,327.999 628.977,328.542 628.635,329.368 C628.597,329.46 628.555,329.562 628.475,329.753 C628.411,329.908 628.365,330.021 628.319,330.132 C627.595,331.906 627.305,333.04 627.305,334.573 C627.305,335.003 626.957,335.351 626.527,335.351 C626.098,335.351 625.75,335.003 625.75,334.573 C625.75,332.802 626.085,331.488 626.879,329.544 C626.926,329.43 626.974,329.314 627.039,329.158 C627.118,328.966 627.16,328.864 627.198,328.774 C627.524,327.984 627.719,327.475 627.899,326.912 C628.333,325.553 628.17,324.562 627.442,323.24 C627.312,323.004 627.167,322.76 626.959,322.424 C626.921,322.361 626.894,322.318 626.826,322.209 C626.759,322.1 626.759,322.1 626.69,321.99 C626.576,321.807 626.492,321.671 626.409,321.533 C624.193,317.942 624.117,314.831 624.987,310.893 C623.712,311.153 624.299,311.088 623.232,311.142 C622.111,311.085 622.751,311.153 621.319,310.861 C620.347,314.8 620.44,317.063 622.472,320.727 C622.552,320.858 622.633,320.991 622.744,321.169 C622.661,321.036 622.952,321.503 623.016,321.607 C623.236,321.963 623.393,322.227 623.538,322.49 C624.457,324.159 624.69,325.579 624.113,327.385 C623.917,327.999 623.71,328.542 623.368,329.368 C623.33,329.46 623.288,329.562 623.208,329.753 C623.144,329.908 623.098,330.021 623.052,330.132 C622.328,331.906 622.038,333.04 622.038,334.573 C622.038,335.003 621.69,335.351 621.26,335.351 C620.831,335.351 620.483,335.003 620.483,334.573 C620.483,332.802 620.818,331.488 621.612,329.544 C621.659,329.43 621.707,329.314 621.772,329.158 C621.851,328.966 621.893,328.864 621.931,328.774 C622.257,327.984 622.452,327.475 622.632,326.912 C623.066,325.553 622.903,324.562 622.175,323.24 C622.045,323.004 621.9,322.76 621.693,322.424 C621.654,322.361 621.627,322.318 621.56,322.209 C621.492,322.1 621.492,322.1 621.423,321.99 C621.309,321.807 621.225,321.671 621.142,321.533 C618.903,317.834 618.736,314.324 619.865,310.273 C617.589,308.946 616.384,306.763 616.253,304.163 C616.253,300.308 619.377,297.184 623.232,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M637.189,374.824 C633.335,374.824 630.211,371.7 630.211,367.845 C630.212,365.274 631.575,363.253 633.641,361.859 C634.819,357.667 634.866,355.22 632.682,351.281 C632.602,351.15 632.521,351.017 632.41,350.839 C632.493,350.972 632.202,350.505 632.138,350.401 C631.918,350.045 631.761,349.781 631.616,349.518 C630.697,347.849 630.464,346.429 631.041,344.623 C631.237,344.009 631.444,343.466 631.786,342.64 C631.824,342.548 631.866,342.446 631.946,342.255 C632.01,342.1 632.056,341.987 632.102,341.876 C632.826,340.102 633.116,338.968 633.116,337.435 C633.116,337.005 633.464,336.657 633.894,336.657 C634.323,336.657 634.671,337.005 634.671,337.435 C634.671,339.206 634.336,340.52 633.542,342.464 C633.495,342.578 633.447,342.694 633.382,342.85 C633.303,343.042 633.261,343.144 633.223,343.234 C632.897,344.024 632.702,344.533 632.522,345.096 C632.088,346.455 632.251,347.446 632.979,348.768 C633.109,349.004 633.254,349.248 633.461,349.584 C633.5,349.647 633.527,349.69 633.595,349.799 C633.662,349.908 633.662,349.908 633.731,350.018 C633.845,350.201 633.929,350.337 634.012,350.475 C636.228,354.066 636.304,357.177 635.434,361.115 C636.709,360.855 636.122,360.92 637.189,360.866 C638.31,360.923 637.67,360.855 639.102,361.147 C640.074,357.208 639.98,354.945 637.949,351.281 C637.869,351.15 637.788,351.017 637.677,350.839 C637.759,350.972 637.469,350.505 637.405,350.401 C637.185,350.045 637.028,349.781 636.883,349.518 C635.964,347.849 635.731,346.429 636.308,344.623 C636.503,344.009 636.711,343.466 637.053,342.64 C637.091,342.548 637.133,342.446 637.213,342.255 C637.276,342.1 637.323,341.987 637.369,341.876 C638.093,340.102 638.383,338.968 638.383,337.435 C638.383,337.005 638.731,336.657 639.161,336.657 C639.59,336.657 639.938,337.005 639.938,337.435 C639.938,339.206 639.602,340.52 638.808,342.464 C638.762,342.578 638.714,342.694 638.649,342.85 C638.569,343.042 638.527,343.144 638.49,343.234 C638.164,344.024 637.969,344.533 637.789,345.096 C637.355,346.455 637.517,347.446 638.246,348.768 C638.376,349.004 638.521,349.248 638.728,349.584 C638.767,349.647 638.794,349.69 638.861,349.799 C638.929,349.908 638.929,349.908 638.998,350.018 C639.111,350.201 639.196,350.337 639.279,350.475 C641.518,354.174 641.685,357.684 640.556,361.735 C642.832,363.062 644.037,365.245 644.168,367.845 C644.168,371.7 641.044,374.824 637.189,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M637.189,297.184 C641.044,297.184 644.168,300.308 644.168,304.163 C644.167,306.734 642.804,308.755 640.738,310.149 C639.56,314.341 639.512,316.788 641.697,320.727 C641.776,320.858 641.858,320.991 641.969,321.169 C641.886,321.036 642.177,321.503 642.241,321.607 C642.46,321.963 642.617,322.227 642.762,322.49 C643.682,324.159 643.915,325.579 643.338,327.385 C643.142,327.999 642.934,328.542 642.593,329.368 C642.555,329.46 642.513,329.562 642.433,329.753 C642.369,329.908 642.322,330.021 642.277,330.132 C641.553,331.906 641.263,333.04 641.263,334.573 C641.263,335.003 640.915,335.351 640.485,335.351 C640.056,335.351 639.708,335.003 639.707,334.573 C639.708,332.802 640.043,331.488 640.837,329.544 C640.884,329.43 640.932,329.314 640.996,329.158 C641.076,328.966 641.118,328.864 641.156,328.774 C641.482,327.984 641.677,327.475 641.857,326.912 C642.291,325.553 642.128,324.562 641.4,323.24 C641.27,323.004 641.125,322.76 640.917,322.424 C640.878,322.361 640.852,322.318 640.784,322.209 C640.716,322.1 640.716,322.1 640.648,321.99 C640.534,321.807 640.45,321.671 640.367,321.533 C638.151,317.942 638.075,314.831 638.945,310.893 C637.67,311.153 638.257,311.088 637.189,311.142 C636.069,311.085 636.709,311.153 635.277,310.861 C634.305,314.8 634.398,317.063 636.43,320.727 C636.51,320.858 636.591,320.991 636.702,321.169 C636.619,321.036 636.91,321.503 636.974,321.607 C637.194,321.963 637.351,322.227 637.496,322.49 C638.415,324.159 638.648,325.579 638.071,327.385 C637.875,327.999 637.668,328.542 637.326,329.368 C637.288,329.46 637.246,329.562 637.166,329.753 C637.102,329.908 637.056,330.021 637.01,330.132 C636.286,331.906 635.996,333.04 635.996,334.573 C635.996,335.003 635.648,335.351 635.218,335.351 C634.789,335.351 634.441,335.003 634.441,334.573 C634.441,332.802 634.776,331.488 635.57,329.544 C635.617,329.43 635.665,329.314 635.73,329.158 C635.809,328.966 635.851,328.864 635.889,328.774 C636.215,327.984 636.41,327.475 636.59,326.912 C637.024,325.553 636.861,324.562 636.133,323.24 C636.003,323.004 635.858,322.76 635.651,322.424 C635.612,322.361 635.585,322.318 635.517,322.209 C635.45,322.1 635.45,322.1 635.381,321.99 C635.267,321.807 635.183,321.671 635.1,321.533 C632.861,317.834 632.694,314.324 633.823,310.273 C631.547,308.946 630.342,306.763 630.21,304.163 C630.211,300.308 633.335,297.184 637.189,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M651.147,374.824 C647.293,374.824 644.168,371.7 644.168,367.845 C644.17,365.274 645.533,363.253 647.598,361.859 C648.777,357.667 648.824,355.22 646.64,351.281 C646.56,351.15 646.479,351.017 646.368,350.839 C646.45,350.972 646.16,350.505 646.096,350.401 C645.876,350.045 645.719,349.781 645.574,349.518 C644.655,347.849 644.422,346.429 644.999,344.623 C645.195,344.009 645.402,343.466 645.744,342.64 C645.782,342.548 645.824,342.446 645.904,342.255 C645.968,342.1 646.014,341.987 646.06,341.876 C646.784,340.102 647.074,338.968 647.074,337.435 C647.074,337.005 647.422,336.657 647.852,336.657 C648.281,336.657 648.629,337.005 648.629,337.435 C648.629,339.206 648.293,340.52 647.5,342.464 C647.453,342.578 647.405,342.694 647.34,342.85 C647.261,343.042 647.219,343.144 647.181,343.234 C646.855,344.024 646.66,344.533 646.48,345.096 C646.046,346.455 646.208,347.446 646.937,348.768 C647.067,349.004 647.212,349.248 647.419,349.584 C647.458,349.647 647.485,349.69 647.552,349.799 C647.62,349.908 647.62,349.908 647.689,350.018 C647.802,350.201 647.887,350.337 647.97,350.475 C650.186,354.066 650.262,357.177 649.392,361.115 C650.667,360.855 650.08,360.92 651.147,360.866 C652.268,360.923 651.628,360.855 653.06,361.147 C654.032,357.208 653.938,354.945 651.907,351.281 C651.827,351.15 651.746,351.017 651.635,350.839 C651.717,350.972 651.427,350.505 651.363,350.401 C651.143,350.045 650.986,349.781 650.841,349.518 C649.922,347.849 649.689,346.429 650.266,344.623 C650.461,344.009 650.669,343.466 651.011,342.64 C651.048,342.548 651.091,342.446 651.17,342.255 C651.234,342.1 651.281,341.987 651.327,341.876 C652.051,340.102 652.341,338.968 652.341,337.435 C652.341,337.005 652.689,336.657 653.118,336.657 C653.548,336.657 653.896,337.005 653.896,337.435 C653.896,339.206 653.56,340.52 652.766,342.464 C652.72,342.578 652.672,342.694 652.607,342.85 C652.527,343.042 652.485,343.144 652.448,343.234 C652.122,344.024 651.927,344.533 651.747,345.096 C651.313,346.455 651.475,347.446 652.203,348.768 C652.333,349.004 652.479,349.248 652.686,349.584 C652.725,349.647 652.752,349.69 652.819,349.799 C652.887,349.908 652.887,349.908 652.956,350.018 C653.069,350.201 653.154,350.337 653.237,350.475 C655.476,354.174 655.643,357.684 654.514,361.735 C656.79,363.062 657.995,365.245 658.126,367.845 C658.126,371.7 655.002,374.824 651.147,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M651.147,297.184 C655.002,297.184 658.126,300.308 658.126,304.163 C658.125,306.734 656.762,308.755 654.696,310.149 C653.517,314.341 653.47,316.788 655.655,320.727 C655.734,320.858 655.816,320.991 655.927,321.169 C655.844,321.036 656.135,321.503 656.198,321.607 C656.418,321.963 656.575,322.227 656.72,322.49 C657.64,324.159 657.873,325.579 657.296,327.385 C657.1,327.999 656.892,328.542 656.551,329.368 C656.513,329.46 656.471,329.562 656.391,329.753 C656.327,329.908 656.28,330.021 656.235,330.132 C655.51,331.906 655.221,333.04 655.221,334.573 C655.221,335.003 654.872,335.351 654.443,335.351 C654.014,335.351 653.665,335.003 653.665,334.573 C653.665,332.802 654.001,331.488 654.795,329.544 C654.842,329.43 654.89,329.314 654.954,329.158 C655.034,328.966 655.076,328.864 655.114,328.774 C655.44,327.984 655.635,327.475 655.815,326.912 C656.249,325.553 656.086,324.562 655.358,323.24 C655.228,323.004 655.083,322.76 654.875,322.424 C654.836,322.361 654.809,322.318 654.742,322.209 C654.674,322.1 654.674,322.1 654.606,321.99 C654.492,321.807 654.408,321.671 654.325,321.533 C652.109,317.942 652.033,314.831 652.903,310.893 C651.628,311.153 652.215,311.088 651.147,311.142 C650.026,311.085 650.667,311.153 649.235,310.861 C648.263,314.8 648.356,317.063 650.388,320.727 C650.467,320.858 650.549,320.991 650.66,321.169 C650.577,321.036 650.868,321.503 650.932,321.607 C651.151,321.963 651.308,322.227 651.453,322.49 C652.373,324.159 652.606,325.579 652.029,327.385 C651.833,327.999 651.626,328.542 651.284,329.368 C651.246,329.46 651.204,329.562 651.124,329.753 C651.06,329.908 651.013,330.021 650.968,330.132 C650.244,331.906 649.954,333.04 649.954,334.573 C649.954,335.003 649.606,335.351 649.176,335.351 C648.747,335.351 648.399,335.003 648.399,334.573 C648.399,332.802 648.734,331.488 649.528,329.544 C649.575,329.43 649.623,329.314 649.688,329.158 C649.767,328.966 649.809,328.864 649.847,328.774 C650.173,327.984 650.368,327.475 650.548,326.912 C650.982,325.553 650.819,324.562 650.091,323.24 C649.961,323.004 649.816,322.76 649.608,322.424 C649.57,322.361 649.543,322.318 649.475,322.209 C649.408,322.1 649.408,322.1 649.339,321.99 C649.225,321.807 649.141,321.671 649.058,321.533 C646.818,317.834 646.651,314.324 647.781,310.273 C645.504,308.946 644.3,306.763 644.168,304.163 C644.168,300.308 647.293,297.184 651.147,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M665.105,374.824 C661.251,374.824 658.126,371.7 658.126,367.845 C658.128,365.274 659.491,363.253 661.556,361.859 C662.735,357.667 662.782,355.22 660.598,351.281 C660.518,351.15 660.437,351.017 660.326,350.839 C660.408,350.972 660.118,350.505 660.054,350.401 C659.834,350.045 659.677,349.781 659.532,349.518 C658.613,347.849 658.38,346.429 658.957,344.623 C659.153,344.009 659.36,343.466 659.702,342.64 C659.74,342.548 659.782,342.446 659.862,342.255 C659.926,342.1 659.972,341.987 660.018,341.876 C660.742,340.102 661.032,338.968 661.032,337.435 C661.032,337.005 661.38,336.657 661.81,336.657 C662.239,336.657 662.587,337.005 662.587,337.435 C662.587,339.206 662.251,340.52 661.457,342.464 C661.411,342.578 661.363,342.694 661.298,342.85 C661.218,343.042 661.176,343.144 661.139,343.234 C660.813,344.024 660.618,344.533 660.438,345.096 C660.004,346.455 660.166,347.446 660.895,348.768 C661.025,349.004 661.17,349.248 661.377,349.584 C661.416,349.647 661.443,349.69 661.51,349.799 C661.578,349.908 661.578,349.908 661.647,350.018 C661.76,350.201 661.845,350.337 661.928,350.475 C664.144,354.066 664.22,357.177 663.35,361.115 C664.625,360.855 664.038,360.92 665.105,360.866 C666.226,360.923 665.585,360.855 667.018,361.147 C667.99,357.208 667.896,354.945 665.865,351.281 C665.785,351.15 665.704,351.017 665.593,350.839 C665.675,350.972 665.385,350.505 665.321,350.401 C665.101,350.045 664.944,349.781 664.799,349.518 C663.88,347.849 663.646,346.429 664.223,344.623 C664.419,344.009 664.627,343.466 664.969,342.64 C665.006,342.548 665.049,342.446 665.128,342.255 C665.192,342.1 665.239,341.987 665.284,341.876 C666.009,340.102 666.299,338.968 666.299,337.435 C666.299,337.005 666.647,336.657 667.076,336.657 C667.506,336.657 667.854,337.005 667.854,337.435 C667.854,339.206 667.518,340.52 666.724,342.464 C666.678,342.578 666.63,342.694 666.565,342.85 C666.485,343.042 666.443,343.144 666.406,343.234 C666.079,344.024 665.885,344.533 665.705,345.096 C665.271,346.455 665.433,347.446 666.161,348.768 C666.291,349.004 666.437,349.248 666.644,349.584 C666.683,349.647 666.71,349.69 666.777,349.799 C666.845,349.908 666.845,349.908 666.914,350.018 C667.027,350.201 667.111,350.337 667.195,350.475 C669.434,354.174 669.601,357.684 668.471,361.735 C670.748,363.062 671.953,365.245 672.084,367.845 C672.084,371.7 668.96,374.824 665.105,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M665.105,297.184 C668.96,297.184 672.084,300.308 672.084,304.163 C672.082,306.734 670.719,308.755 668.654,310.149 C667.475,314.341 667.428,316.788 669.612,320.727 C669.692,320.858 669.774,320.991 669.884,321.169 C669.802,321.036 670.093,321.503 670.156,321.607 C670.376,321.963 670.533,322.227 670.678,322.49 C671.598,324.159 671.831,325.579 671.254,327.385 C671.058,327.999 670.85,328.542 670.509,329.368 C670.471,329.46 670.428,329.562 670.349,329.753 C670.285,329.908 670.238,330.021 670.193,330.132 C669.468,331.906 669.179,333.04 669.179,334.573 C669.179,335.003 668.83,335.351 668.401,335.351 C667.971,335.351 667.623,335.003 667.623,334.573 C667.623,332.802 667.959,331.488 668.753,329.544 C668.8,329.43 668.847,329.314 668.912,329.158 C668.992,328.966 669.034,328.864 669.072,328.774 C669.398,327.984 669.593,327.475 669.773,326.912 C670.207,325.553 670.044,324.562 669.316,323.24 C669.186,323.004 669.041,322.76 668.833,322.424 C668.794,322.361 668.767,322.318 668.7,322.209 C668.632,322.1 668.632,322.1 668.564,321.99 C668.45,321.807 668.366,321.671 668.283,321.533 C666.067,317.942 665.991,314.831 666.86,310.893 C665.585,311.153 666.173,311.088 665.105,311.142 C663.984,311.085 664.625,311.153 663.193,310.861 C662.221,314.8 662.314,317.063 664.346,320.727 C664.425,320.858 664.507,320.991 664.618,321.169 C664.535,321.036 664.826,321.503 664.889,321.607 C665.109,321.963 665.266,322.227 665.411,322.49 C666.331,324.159 666.564,325.579 665.987,327.385 C665.791,327.999 665.583,328.542 665.242,329.368 C665.204,329.46 665.162,329.562 665.082,329.753 C665.018,329.908 664.971,330.021 664.926,330.132 C664.202,331.906 663.912,333.04 663.912,334.573 C663.912,335.003 663.564,335.351 663.134,335.351 C662.705,335.351 662.357,335.003 662.356,334.573 C662.357,332.802 662.692,331.488 663.486,329.544 C663.533,329.43 663.581,329.314 663.645,329.158 C663.725,328.966 663.767,328.864 663.805,328.774 C664.131,327.984 664.326,327.475 664.506,326.912 C664.94,325.553 664.777,324.562 664.049,323.24 C663.919,323.004 663.774,322.76 663.566,322.424 C663.527,322.361 663.5,322.318 663.433,322.209 C663.365,322.1 663.365,322.1 663.297,321.99 C663.183,321.807 663.099,321.671 663.016,321.533 C660.776,317.834 660.609,314.324 661.739,310.273 C659.462,308.946 658.258,306.763 658.126,304.163 C658.126,300.308 661.251,297.184 665.105,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M679.063,374.824 C675.209,374.824 672.084,371.7 672.084,367.845 C672.086,365.274 673.449,363.253 675.514,361.859 C676.693,357.667 676.74,355.22 674.556,351.281 C674.476,351.15 674.395,351.017 674.284,350.839 C674.366,350.972 674.076,350.505 674.012,350.401 C673.792,350.045 673.635,349.781 673.49,349.518 C672.571,347.849 672.338,346.429 672.914,344.623 C673.11,344.009 673.318,343.466 673.66,342.64 C673.698,342.548 673.74,342.446 673.82,342.255 C673.883,342.1 673.93,341.987 673.976,341.876 C674.7,340.102 674.99,338.968 674.99,337.435 C674.99,337.005 675.338,336.657 675.768,336.657 C676.197,336.657 676.545,337.005 676.545,337.435 C676.545,339.206 676.209,340.52 675.415,342.464 C675.369,342.578 675.321,342.694 675.256,342.85 C675.176,343.042 675.134,343.144 675.097,343.234 C674.771,344.024 674.576,344.533 674.396,345.096 C673.962,346.455 674.124,347.446 674.852,348.768 C674.983,349.004 675.128,349.248 675.335,349.584 C675.374,349.647 675.401,349.69 675.468,349.799 C675.536,349.908 675.536,349.908 675.605,350.018 C675.718,350.201 675.803,350.337 675.886,350.475 C678.102,354.066 678.178,357.177 677.308,361.115 C678.583,360.855 677.996,360.92 679.063,360.866 C680.184,360.923 679.543,360.855 680.975,361.147 C681.948,357.208 681.854,354.945 679.823,351.281 C679.743,351.15 679.661,351.017 679.551,350.839 C679.633,350.972 679.343,350.505 679.279,350.401 C679.059,350.045 678.902,349.781 678.757,349.518 C677.837,347.849 677.604,346.429 678.181,344.623 C678.377,344.009 678.585,343.466 678.927,342.64 C678.964,342.548 679.007,342.446 679.086,342.255 C679.15,342.1 679.197,341.987 679.242,341.876 C679.967,340.102 680.257,338.968 680.257,337.435 C680.257,337.005 680.605,336.657 681.034,336.657 C681.464,336.657 681.812,337.005 681.812,337.435 C681.812,339.206 681.476,340.52 680.682,342.464 C680.636,342.578 680.588,342.694 680.523,342.85 C680.443,343.042 680.401,343.144 680.364,343.234 C680.037,344.024 679.843,344.533 679.663,345.096 C679.229,346.455 679.391,347.446 680.119,348.768 C680.249,349.004 680.395,349.248 680.602,349.584 C680.641,349.647 680.668,349.69 680.735,349.799 C680.803,349.908 680.803,349.908 680.872,350.018 C680.985,350.201 681.069,350.337 681.153,350.475 C683.392,354.174 683.559,357.684 682.429,361.735 C684.706,363.062 685.911,365.245 686.042,367.845 C686.042,371.7 682.917,374.824 679.063,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M679.063,297.184 C682.918,297.184 686.042,300.308 686.042,304.163 C686.04,306.734 684.677,308.755 682.612,310.149 C681.433,314.341 681.386,316.788 683.57,320.727 C683.65,320.858 683.732,320.991 683.842,321.169 C683.76,321.036 684.05,321.503 684.114,321.607 C684.334,321.963 684.491,322.227 684.636,322.49 C685.556,324.159 685.789,325.579 685.212,327.385 C685.016,327.999 684.808,328.542 684.467,329.368 C684.429,329.46 684.386,329.562 684.307,329.753 C684.243,329.908 684.196,330.021 684.151,330.132 C683.426,331.906 683.137,333.04 683.136,334.573 C683.137,335.003 682.788,335.351 682.359,335.351 C681.929,335.351 681.581,335.003 681.581,334.573 C681.581,332.802 681.917,331.488 682.711,329.544 C682.758,329.43 682.805,329.314 682.87,329.158 C682.95,328.966 682.992,328.864 683.029,328.774 C683.356,327.984 683.55,327.475 683.73,326.912 C684.165,325.553 684.002,324.562 683.274,323.24 C683.144,323.004 682.999,322.76 682.791,322.424 C682.752,322.361 682.725,322.318 682.658,322.209 C682.59,322.1 682.59,322.1 682.521,321.99 C682.408,321.807 682.324,321.671 682.241,321.533 C680.024,317.942 679.948,314.831 680.818,310.893 C679.543,311.153 680.131,311.088 679.063,311.142 C677.942,311.085 678.583,311.153 677.151,310.861 C676.179,314.8 676.272,317.063 678.303,320.727 C678.383,320.858 678.465,320.991 678.576,321.169 C678.493,321.036 678.784,321.503 678.847,321.607 C679.067,321.963 679.224,322.227 679.369,322.49 C680.289,324.159 680.522,325.579 679.945,327.385 C679.749,327.999 679.541,328.542 679.2,329.368 C679.162,329.46 679.12,329.562 679.04,329.753 C678.976,329.908 678.929,330.021 678.884,330.132 C678.159,331.906 677.87,333.04 677.87,334.573 C677.87,335.003 677.521,335.351 677.092,335.351 C676.663,335.351 676.314,335.003 676.314,334.573 C676.314,332.802 676.65,331.488 677.444,329.544 C677.491,329.43 677.539,329.314 677.603,329.158 C677.683,328.966 677.725,328.864 677.763,328.774 C678.089,327.984 678.284,327.475 678.464,326.912 C678.898,325.553 678.735,324.562 678.007,323.24 C677.877,323.004 677.732,322.76 677.524,322.424 C677.485,322.361 677.458,322.318 677.391,322.209 C677.323,322.1 677.323,322.1 677.255,321.99 C677.141,321.807 677.057,321.671 676.974,321.533 C674.734,317.834 674.567,314.324 675.697,310.273 C673.42,308.946 672.216,306.763 672.084,304.163 C672.084,300.308 675.209,297.184 679.063,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M693.021,374.824 C689.167,374.824 686.042,371.7 686.042,367.845 C686.044,365.274 687.407,363.253 689.472,361.859 C690.651,357.667 690.698,355.22 688.514,351.281 C688.434,351.15 688.353,351.017 688.242,350.839 C688.324,350.972 688.034,350.505 687.97,350.401 C687.75,350.045 687.593,349.781 687.448,349.518 C686.529,347.849 686.295,346.429 686.872,344.623 C687.068,344.009 687.276,343.466 687.618,342.64 C687.655,342.548 687.698,342.446 687.777,342.255 C687.841,342.1 687.888,341.987 687.934,341.876 C688.658,340.102 688.948,338.968 688.948,337.435 C688.948,337.005 689.296,336.657 689.725,336.657 C690.155,336.657 690.503,337.005 690.503,337.435 C690.503,339.206 690.167,340.52 689.373,342.464 C689.327,342.578 689.279,342.694 689.214,342.85 C689.134,343.042 689.092,343.144 689.055,343.234 C688.728,344.024 688.534,344.533 688.354,345.096 C687.92,346.455 688.082,347.446 688.81,348.768 C688.94,349.004 689.086,349.248 689.293,349.584 C689.332,349.647 689.359,349.69 689.426,349.799 C689.494,349.908 689.494,349.908 689.563,350.018 C689.676,350.201 689.76,350.337 689.844,350.475 C692.06,354.066 692.136,357.177 691.266,361.115 C692.541,360.855 691.954,360.92 693.021,360.866 C694.142,360.923 693.501,360.855 694.933,361.147 C695.906,357.208 695.812,354.945 693.781,351.281 C693.701,351.15 693.619,351.017 693.509,350.839 C693.591,350.972 693.301,350.505 693.237,350.401 C693.017,350.045 692.86,349.781 692.715,349.518 C691.795,347.849 691.562,346.429 692.139,344.623 C692.335,344.009 692.543,343.466 692.884,342.64 C692.922,342.548 692.965,342.446 693.044,342.255 C693.108,342.1 693.155,341.987 693.2,341.876 C693.925,340.102 694.215,338.968 694.215,337.435 C694.215,337.005 694.563,336.657 694.992,336.657 C695.422,336.657 695.77,337.005 695.77,337.435 C695.77,339.206 695.434,340.52 694.64,342.464 C694.593,342.578 694.546,342.694 694.481,342.85 C694.401,343.042 694.359,343.144 694.322,343.234 C693.995,344.024 693.801,344.533 693.621,345.096 C693.186,346.455 693.349,347.446 694.077,348.768 C694.207,349.004 694.352,349.248 694.56,349.584 C694.599,349.647 694.626,349.69 694.693,349.799 C694.761,349.908 694.761,349.908 694.83,350.018 C694.943,350.201 695.027,350.337 695.111,350.475 C697.35,354.174 697.517,357.684 696.387,361.735 C698.664,363.062 699.869,365.245 700,367.845 C700,371.7 696.875,374.824 693.021,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M693.021,297.184 C696.875,297.184 700,300.308 700,304.163 C699.998,306.734 698.635,308.755 696.57,310.149 C695.391,314.341 695.344,316.788 697.528,320.727 C697.608,320.858 697.69,320.991 697.8,321.169 C697.718,321.036 698.008,321.503 698.072,321.607 C698.292,321.963 698.449,322.227 698.594,322.49 C699.514,324.159 699.747,325.579 699.17,327.385 C698.974,327.999 698.766,328.542 698.425,329.368 C698.387,329.46 698.344,329.562 698.265,329.753 C698.201,329.908 698.154,330.021 698.109,330.132 C697.384,331.906 697.094,333.04 697.094,334.573 C697.094,335.003 696.746,335.351 696.317,335.351 C695.887,335.351 695.539,335.003 695.539,334.573 C695.539,332.802 695.875,331.488 696.669,329.544 C696.716,329.43 696.763,329.314 696.828,329.158 C696.908,328.966 696.95,328.864 696.987,328.774 C697.314,327.984 697.508,327.475 697.688,326.912 C698.123,325.553 697.96,324.562 697.232,323.24 C697.102,323.004 696.957,322.76 696.749,322.424 C696.71,322.361 696.683,322.318 696.616,322.209 C696.548,322.1 696.548,322.1 696.479,321.99 C696.366,321.807 696.282,321.671 696.198,321.533 C693.982,317.942 693.906,314.831 694.776,310.893 C693.501,311.153 694.089,311.088 693.021,311.142 C691.9,311.085 692.541,311.153 691.109,310.861 C690.136,314.8 690.23,317.063 692.261,320.727 C692.341,320.858 692.423,320.991 692.533,321.169 C692.451,321.036 692.741,321.503 692.805,321.607 C693.025,321.963 693.182,322.227 693.327,322.49 C694.247,324.159 694.48,325.579 693.903,327.385 C693.707,327.999 693.499,328.542 693.158,329.368 C693.12,329.46 693.077,329.562 692.998,329.753 C692.934,329.908 692.887,330.021 692.842,330.132 C692.117,331.906 691.828,333.04 691.828,334.573 C691.828,335.003 691.479,335.351 691.05,335.351 C690.62,335.351 690.272,335.003 690.272,334.573 C690.272,332.802 690.608,331.488 691.402,329.544 C691.449,329.43 691.496,329.314 691.561,329.158 C691.641,328.966 691.683,328.864 691.72,328.774 C692.047,327.984 692.242,327.475 692.421,326.912 C692.856,325.553 692.693,324.562 691.965,323.24 C691.835,323.004 691.69,322.76 691.482,322.424 C691.443,322.361 691.416,322.318 691.349,322.209 C691.281,322.1 691.281,322.1 691.212,321.99 C691.099,321.807 691.015,321.671 690.932,321.533 C688.692,317.834 688.525,314.324 689.655,310.273 C687.378,308.946 686.173,306.763 686.042,304.163 C686.042,300.308 689.167,297.184 693.021,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M706.979,374.824 C703.125,374.824 700,371.7 700,367.845 C700.002,365.274 701.365,363.253 703.43,361.859 C704.609,357.667 704.656,355.22 702.472,351.281 C702.392,351.15 702.31,351.017 702.2,350.839 C702.282,350.972 701.992,350.505 701.928,350.401 C701.708,350.045 701.551,349.781 701.406,349.518 C700.486,347.849 700.253,346.429 700.83,344.623 C701.026,344.009 701.234,343.466 701.576,342.64 C701.613,342.548 701.656,342.446 701.735,342.255 C701.799,342.1 701.846,341.987 701.891,341.876 C702.616,340.102 702.906,338.968 702.906,337.435 C702.906,337.005 703.254,336.657 703.683,336.657 C704.113,336.657 704.461,337.005 704.461,337.435 C704.461,339.206 704.125,340.52 703.331,342.464 C703.285,342.578 703.237,342.694 703.172,342.85 C703.092,343.042 703.05,343.144 703.013,343.234 C702.686,344.024 702.492,344.533 702.312,345.096 C701.878,346.455 702.04,347.446 702.768,348.768 C702.898,349.004 703.044,349.248 703.251,349.584 C703.29,349.647 703.317,349.69 703.384,349.799 C703.452,349.908 703.452,349.908 703.521,350.018 C703.634,350.201 703.718,350.337 703.802,350.475 C706.018,354.066 706.094,357.177 705.224,361.115 C706.499,360.855 705.912,360.92 706.979,360.866 C708.1,360.923 707.459,360.855 708.891,361.147 C709.864,357.208 709.77,354.945 707.739,351.281 C707.659,351.15 707.577,351.017 707.467,350.839 C707.549,350.972 707.259,350.505 707.195,350.401 C706.975,350.045 706.818,349.781 706.673,349.518 C705.753,347.849 705.52,346.429 706.097,344.623 C706.293,344.009 706.501,343.466 706.842,342.64 C706.88,342.548 706.923,342.446 707.002,342.255 C707.066,342.1 707.113,341.987 707.158,341.876 C707.883,340.102 708.173,338.968 708.173,337.435 C708.173,337.005 708.521,336.657 708.95,336.657 C709.38,336.657 709.728,337.005 709.728,337.435 C709.728,339.206 709.392,340.52 708.598,342.464 C708.551,342.578 708.504,342.694 708.439,342.85 C708.359,343.042 708.317,343.144 708.28,343.234 C707.953,344.024 707.759,344.533 707.579,345.096 C707.144,346.455 707.307,347.446 708.035,348.768 C708.165,349.004 708.31,349.248 708.518,349.584 C708.557,349.647 708.584,349.69 708.651,349.799 C708.719,349.908 708.719,349.908 708.788,350.018 C708.901,350.201 708.985,350.337 709.069,350.475 C711.308,354.174 711.475,357.684 710.345,361.735 C712.622,363.062 713.827,365.245 713.958,367.845 C713.958,371.7 710.833,374.824 706.979,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M706.979,297.184 C710.833,297.184 713.958,300.308 713.958,304.163 C713.956,306.734 712.593,308.755 710.528,310.149 C709.349,314.341 709.302,316.788 711.486,320.727 C711.566,320.858 711.648,320.991 711.758,321.169 C711.676,321.036 711.966,321.503 712.03,321.607 C712.25,321.963 712.407,322.227 712.552,322.49 C713.472,324.159 713.705,325.579 713.128,327.385 C712.932,327.999 712.724,328.542 712.383,329.368 C712.345,329.46 712.302,329.562 712.223,329.753 C712.159,329.908 712.112,330.021 712.067,330.132 C711.342,331.906 711.052,333.04 711.052,334.573 C711.052,335.003 710.704,335.351 710.275,335.351 C709.845,335.351 709.497,335.003 709.497,334.573 C709.497,332.802 709.833,331.488 710.627,329.544 C710.674,329.43 710.721,329.314 710.786,329.158 C710.866,328.966 710.908,328.864 710.945,328.774 C711.272,327.984 711.466,327.475 711.646,326.912 C712.081,325.553 711.918,324.562 711.19,323.24 C711.06,323.004 710.914,322.76 710.707,322.424 C710.668,322.361 710.641,322.318 710.574,322.209 C710.506,322.1 710.506,322.1 710.437,321.99 C710.324,321.807 710.24,321.671 710.156,321.533 C707.94,317.942 707.864,314.831 708.734,310.893 C707.459,311.153 708.047,311.088 706.979,311.142 C705.858,311.085 706.499,311.153 705.067,310.861 C704.094,314.8 704.188,317.063 706.219,320.727 C706.299,320.858 706.381,320.991 706.491,321.169 C706.409,321.036 706.699,321.503 706.763,321.607 C706.983,321.963 707.14,322.227 707.285,322.49 C708.205,324.159 708.438,325.579 707.861,327.385 C707.665,327.999 707.457,328.542 707.116,329.368 C707.078,329.46 707.035,329.562 706.956,329.753 C706.892,329.908 706.845,330.021 706.8,330.132 C706.075,331.906 705.785,333.04 705.785,334.573 C705.785,335.003 705.437,335.351 705.008,335.351 C704.578,335.351 704.23,335.003 704.23,334.573 C704.23,332.802 704.566,331.488 705.36,329.544 C705.407,329.43 705.454,329.314 705.519,329.158 C705.599,328.966 705.641,328.864 705.678,328.774 C706.005,327.984 706.199,327.475 706.379,326.912 C706.814,325.553 706.651,324.562 705.923,323.24 C705.793,323.004 705.648,322.76 705.44,322.424 C705.401,322.361 705.374,322.318 705.307,322.209 C705.239,322.1 705.239,322.1 705.17,321.99 C705.057,321.807 704.973,321.671 704.889,321.533 C702.65,317.834 702.483,314.324 703.613,310.273 C701.336,308.946 700.131,306.763 700,304.163 C700,300.308 703.125,297.184 706.979,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M720.937,374.824 C717.083,374.824 713.958,371.7 713.958,367.845 C713.96,365.274 715.323,363.253 717.388,361.859 C718.567,357.667 718.614,355.22 716.43,351.281 C716.35,351.15 716.268,351.017 716.158,350.839 C716.24,350.972 715.95,350.505 715.886,350.401 C715.666,350.045 715.509,349.781 715.364,349.518 C714.444,347.849 714.211,346.429 714.788,344.623 C714.984,344.009 715.192,343.466 715.533,342.64 C715.571,342.548 715.614,342.446 715.693,342.255 C715.757,342.1 715.804,341.987 715.849,341.876 C716.574,340.102 716.864,338.968 716.864,337.435 C716.864,337.005 717.212,336.657 717.641,336.657 C718.071,336.657 718.419,337.005 718.419,337.435 C718.419,339.206 718.083,340.52 717.289,342.464 C717.242,342.578 717.195,342.694 717.13,342.85 C717.05,343.042 717.008,343.144 716.971,343.234 C716.644,344.024 716.45,344.533 716.27,345.096 C715.836,346.455 715.998,347.446 716.726,348.768 C716.856,349.004 717.002,349.248 717.209,349.584 C717.248,349.647 717.275,349.69 717.342,349.799 C717.41,349.908 717.41,349.908 717.479,350.018 C717.592,350.201 717.676,350.337 717.76,350.475 C719.976,354.066 720.052,357.177 719.182,361.115 C720.457,360.855 719.87,360.92 720.937,360.866 C722.058,360.923 721.417,360.855 722.849,361.147 C723.822,357.208 723.728,354.945 721.697,351.281 C721.617,351.15 721.535,351.017 721.425,350.839 C721.507,350.972 721.217,350.505 721.153,350.401 C720.933,350.045 720.776,349.781 720.631,349.518 C719.711,347.849 719.478,346.429 720.055,344.623 C720.251,344.009 720.459,343.466 720.8,342.64 C720.838,342.548 720.881,342.446 720.96,342.255 C721.024,342.1 721.071,341.987 721.116,341.876 C721.841,340.102 722.13,338.968 722.13,337.435 C722.13,337.005 722.479,336.657 722.908,336.657 C723.338,336.657 723.686,337.005 723.686,337.435 C723.686,339.206 723.35,340.52 722.556,342.464 C722.509,342.578 722.462,342.694 722.397,342.85 C722.317,343.042 722.275,343.144 722.238,343.234 C721.911,344.024 721.716,344.533 721.537,345.096 C721.102,346.455 721.265,347.446 721.993,348.768 C722.123,349.004 722.268,349.248 722.476,349.584 C722.515,349.647 722.542,349.69 722.609,349.799 C722.677,349.908 722.677,349.908 722.746,350.018 C722.859,350.201 722.943,350.337 723.026,350.475 C725.266,354.174 725.433,357.684 724.303,361.735 C726.58,363.062 727.785,365.245 727.916,367.845 C727.916,371.7 724.791,374.824 720.937,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M720.937,297.184 C724.791,297.184 727.916,300.308 727.916,304.163 C727.914,306.734 726.551,308.755 724.486,310.149 C723.307,314.341 723.26,316.788 725.444,320.727 C725.524,320.858 725.606,320.991 725.716,321.169 C725.634,321.036 725.924,321.503 725.988,321.607 C726.208,321.963 726.365,322.227 726.51,322.49 C727.43,324.159 727.663,325.579 727.086,327.385 C726.89,327.999 726.682,328.542 726.341,329.368 C726.303,329.46 726.26,329.562 726.181,329.753 C726.117,329.908 726.07,330.021 726.025,330.132 C725.3,331.906 725.01,333.04 725.01,334.573 C725.01,335.003 724.662,335.351 724.233,335.351 C723.803,335.351 723.455,335.003 723.455,334.573 C723.455,332.802 723.791,331.488 724.585,329.544 C724.631,329.43 724.679,329.314 724.744,329.158 C724.824,328.966 724.866,328.864 724.903,328.774 C725.23,327.984 725.424,327.475 725.604,326.912 C726.038,325.553 725.876,324.562 725.148,323.24 C725.018,323.004 724.872,322.76 724.665,322.424 C724.626,322.361 724.599,322.318 724.532,322.209 C724.464,322.1 724.464,322.1 724.395,321.99 C724.282,321.807 724.198,321.671 724.114,321.533 C721.898,317.942 721.822,314.831 722.692,310.893 C721.417,311.153 722.004,311.088 720.937,311.142 C719.816,311.085 720.457,311.153 719.025,310.861 C718.052,314.8 718.146,317.063 720.177,320.727 C720.257,320.858 720.339,320.991 720.449,321.169 C720.367,321.036 720.657,321.503 720.721,321.607 C720.941,321.963 721.098,322.227 721.243,322.49 C722.163,324.159 722.396,325.579 721.819,327.385 C721.623,327.999 721.415,328.542 721.074,329.368 C721.036,329.46 720.993,329.562 720.914,329.753 C720.85,329.908 720.803,330.021 720.758,330.132 C720.033,331.906 719.743,333.04 719.743,334.573 C719.743,335.003 719.395,335.351 718.966,335.351 C718.536,335.351 718.188,335.003 718.188,334.573 C718.188,332.802 718.524,331.488 719.318,329.544 C719.365,329.43 719.412,329.314 719.477,329.158 C719.557,328.966 719.599,328.864 719.636,328.774 C719.963,327.984 720.157,327.475 720.337,326.912 C720.772,325.553 720.609,324.562 719.881,323.24 C719.751,323.004 719.606,322.76 719.398,322.424 C719.359,322.361 719.332,322.318 719.265,322.209 C719.197,322.1 719.197,322.1 719.128,321.99 C719.015,321.807 718.931,321.671 718.847,321.533 C716.608,317.834 716.441,314.324 717.571,310.273 C715.294,308.946 714.089,306.763 713.958,304.163 C713.958,300.308 717.083,297.184 720.937,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M734.895,374.824 C731.041,374.824 727.916,371.7 727.916,367.845 C727.918,365.274 729.281,363.253 731.346,361.859 C732.525,357.667 732.572,355.22 730.388,351.281 C730.308,351.15 730.226,351.017 730.116,350.839 C730.198,350.972 729.908,350.505 729.844,350.401 C729.624,350.045 729.467,349.781 729.322,349.518 C728.402,347.849 728.169,346.429 728.746,344.623 C728.942,344.009 729.15,343.466 729.491,342.64 C729.529,342.548 729.572,342.446 729.651,342.255 C729.715,342.1 729.762,341.987 729.807,341.876 C730.532,340.102 730.822,338.968 730.822,337.435 C730.822,337.005 731.17,336.657 731.599,336.657 C732.029,336.657 732.377,337.005 732.377,337.435 C732.377,339.206 732.041,340.52 731.247,342.464 C731.2,342.578 731.153,342.694 731.088,342.85 C731.008,343.042 730.966,343.144 730.929,343.234 C730.602,344.024 730.408,344.533 730.228,345.096 C729.793,346.455 729.956,347.446 730.684,348.768 C730.814,349.004 730.959,349.248 731.167,349.584 C731.206,349.647 731.233,349.69 731.3,349.799 C731.368,349.908 731.368,349.908 731.437,350.018 C731.55,350.201 731.634,350.337 731.718,350.475 C733.934,354.066 734.01,357.177 733.14,361.115 C734.415,360.855 733.827,360.92 734.895,360.866 C736.016,360.923 735.375,360.855 736.807,361.147 C737.779,357.208 737.686,354.945 735.655,351.281 C735.575,351.15 735.493,351.017 735.383,350.839 C735.465,350.972 735.174,350.505 735.111,350.401 C734.891,350.045 734.734,349.781 734.589,349.518 C733.669,347.849 733.436,346.429 734.013,344.623 C734.209,344.009 734.417,343.466 734.758,342.64 C734.796,342.548 734.839,342.446 734.918,342.255 C734.982,342.1 735.029,341.987 735.074,341.876 C735.799,340.102 736.088,338.968 736.088,337.435 C736.088,337.005 736.437,336.657 736.866,336.657 C737.295,336.657 737.644,337.005 737.644,337.435 C737.644,339.206 737.308,340.52 736.514,342.464 C736.467,342.578 736.42,342.694 736.355,342.85 C736.275,343.042 736.233,343.144 736.195,343.234 C735.869,344.024 735.674,344.533 735.494,345.096 C735.06,346.455 735.223,347.446 735.951,348.768 C736.081,349.004 736.226,349.248 736.434,349.584 C736.473,349.647 736.5,349.69 736.567,349.799 C736.635,349.908 736.635,349.908 736.703,350.018 C736.817,350.201 736.901,350.337 736.984,350.475 C739.224,354.174 739.391,357.684 738.261,361.735 C740.538,363.062 741.742,365.245 741.874,367.845 C741.874,371.7 738.749,374.824 734.895,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M734.895,297.184 C738.749,297.184 741.874,300.308 741.874,304.163 C741.872,306.734 740.509,308.755 738.444,310.149 C737.265,314.341 737.218,316.788 739.402,320.727 C739.482,320.858 739.563,320.991 739.674,321.169 C739.592,321.036 739.882,321.503 739.946,321.607 C740.166,321.963 740.323,322.227 740.468,322.49 C741.387,324.159 741.621,325.579 741.044,327.385 C740.848,327.999 740.64,328.542 740.298,329.368 C740.261,329.46 740.218,329.562 740.139,329.753 C740.075,329.908 740.028,330.021 739.982,330.132 C739.258,331.906 738.968,333.04 738.968,334.573 C738.968,335.003 738.62,335.351 738.191,335.351 C737.761,335.351 737.413,335.003 737.413,334.573 C737.413,332.802 737.749,331.488 738.543,329.544 C738.589,329.43 738.637,329.314 738.702,329.158 C738.782,328.966 738.824,328.864 738.861,328.774 C739.188,327.984 739.382,327.475 739.562,326.912 C739.996,325.553 739.834,324.562 739.106,323.24 C738.976,323.004 738.83,322.76 738.623,322.424 C738.584,322.361 738.557,322.318 738.49,322.209 C738.422,322.1 738.422,322.1 738.353,321.99 C738.24,321.807 738.156,321.671 738.072,321.533 C735.856,317.942 735.78,314.831 736.65,310.893 C735.375,311.153 735.962,311.088 734.895,311.142 C733.774,311.085 734.415,311.153 732.983,310.861 C732.01,314.8 732.104,317.063 734.135,320.727 C734.215,320.858 734.297,320.991 734.407,321.169 C734.325,321.036 734.615,321.503 734.679,321.607 C734.899,321.963 735.056,322.227 735.201,322.49 C736.121,324.159 736.354,325.579 735.777,327.385 C735.581,327.999 735.373,328.542 735.032,329.368 C734.994,329.46 734.951,329.562 734.872,329.753 C734.808,329.908 734.761,330.021 734.716,330.132 C733.991,331.906 733.701,333.04 733.701,334.573 C733.701,335.003 733.353,335.351 732.924,335.351 C732.494,335.351 732.146,335.003 732.146,334.573 C732.146,332.802 732.482,331.488 733.276,329.544 C733.322,329.43 733.37,329.314 733.435,329.158 C733.515,328.966 733.557,328.864 733.594,328.774 C733.921,327.984 734.115,327.475 734.295,326.912 C734.729,325.553 734.567,324.562 733.839,323.24 C733.709,323.004 733.563,322.76 733.356,322.424 C733.317,322.361 733.29,322.318 733.223,322.209 C733.155,322.1 733.155,322.1 733.086,321.99 C732.973,321.807 732.889,321.671 732.805,321.533 C730.566,317.834 730.399,314.324 731.529,310.273 C729.252,308.946 728.047,306.763 727.916,304.163 C727.916,300.308 731.041,297.184 734.895,297.184 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M748.853,374.824 C744.998,374.824 741.874,371.7 741.874,367.845 C741.876,365.274 743.239,363.253 745.304,361.859 C746.483,357.667 746.53,355.22 744.346,351.281 C744.266,351.15 744.184,351.017 744.074,350.839 C744.156,350.972 743.866,350.505 743.802,350.401 C743.582,350.045 743.425,349.781 743.28,349.518 C742.36,347.849 742.127,346.429 742.704,344.623 C742.9,344.009 743.108,343.466 743.449,342.64 C743.487,342.548 743.53,342.446 743.609,342.255 C743.673,342.1 743.72,341.987 743.765,341.876 C744.49,340.102 744.779,338.968 744.78,337.435 C744.779,337.005 745.128,336.657 745.557,336.657 C745.987,336.657 746.335,337.005 746.335,337.435 C746.335,339.206 745.999,340.52 745.205,342.464 C745.158,342.578 745.111,342.694 745.046,342.85 C744.966,343.042 744.924,343.144 744.887,343.234 C744.56,344.024 744.366,344.533 744.186,345.096 C743.751,346.455 743.914,347.446 744.642,348.768 C744.772,349.004 744.917,349.248 745.125,349.584 C745.164,349.647 745.191,349.69 745.258,349.799 C745.326,349.908 745.326,349.908 745.395,350.018 C745.508,350.201 745.592,350.337 745.675,350.475 C747.891,354.066 747.967,357.177 747.098,361.115 C748.373,360.855 747.785,360.92 748.853,360.866 C749.974,360.923 749.333,360.855 750.765,361.147 C751.737,357.208 751.644,354.945 749.612,351.281 C749.533,351.15 749.451,351.017 749.34,350.839 C749.423,350.972 749.132,350.505 749.069,350.401 C748.849,350.045 748.692,349.781 748.547,349.518 C747.627,347.849 747.394,346.429 747.971,344.623 C748.167,344.009 748.375,343.466 748.716,342.64 C748.754,342.548 748.796,342.446 748.876,342.255 C748.94,342.1 748.987,341.987 749.032,341.876 C749.756,340.102 750.046,338.968 750.046,337.435 C750.046,337.005 750.394,336.657 750.824,336.657 C751.253,336.657 751.602,337.005 751.602,337.435 C751.602,339.206 751.266,340.52 750.472,342.464 C750.425,342.578 750.377,342.694 750.313,342.85 C750.233,343.042 750.191,343.144 750.153,343.234 C749.827,344.024 749.632,344.533 749.452,345.096 C749.018,346.455 749.181,347.446 749.909,348.768 C750.039,349.004 750.184,349.248 750.392,349.584 C750.431,349.647 750.458,349.69 750.525,349.799 C750.593,349.908 750.593,349.908 750.661,350.018 C750.775,350.201 750.859,350.337 750.942,350.475 C753.182,354.174 753.349,357.684 752.219,361.735 C754.496,363.062 755.7,365.245 755.832,367.845 C755.832,371.7 752.707,374.824 748.853,374.824 z\" fill=\"#DBDBDB\"/>\n      <path d=\"M748.853,297.184 C752.707,297.184 755.832,300.308 755.832,304.163 C755.83,306.734 754.467,308.755 752.402,310.149 C751.223,314.341 751.176,316.788 753.36,320.727 C753.44,320.858 753.521,320.991 753.632,321.169 C753.55,321.036 753.84,321.503 753.904,321.607 C754.124,321.963 754.281,322.227 754.426,322.49 C755.345,324.159 755.578,325.579 755.002,327.385 C754.806,327.999 754.598,328.542 754.256,329.368 C754.219,329.46 754.176,329.562 754.096,329.753 C754.033,329.908 753.986,330.021 753.94,330.132 C753.216,331.906 752.926,333.04 752.926,334.573 C752.926,335.003 752.578,335.351 752.148,335.351 C751.719,335.351 751.371,335.003 751.371,334.573 C751.371,332.802 751.707,331.488 752.501,329.544 C752.547,329.43 752.595,329.314 752.66,329.158 C752.74,328.966 752.782,328.864 752.819,328.774 C753.145,327.984 753.34,327.475 753.52,326.912 C753.954,325.553 753.792,324.562 753.064,323.24 C752.933,323.004 752.788,322.76 752.581,322.424 C752.542,322.361 752.515,322.318 752.448,322.209 C752.38,322.1 752.38,322.1 752.311,321.99 C752.198,321.807 752.113,321.671 752.03,321.533 C749.814,317.942 749.738,314.831 750.608,310.893 C749.333,311.153 749.92,311.088 748.853,311.142 C747.732,311.085 748.373,311.153 746.94,310.861 C745.968,314.8 746.062,317.063 748.093,320.727 C748.173,320.858 748.254,320.991 748.365,321.169 C748.283,321.036 748.573,321.503 748.637,321.607 C748.857,321.963 749.014,322.227 749.159,322.49 C750.078,324.159 750.312,325.579 749.735,327.385 C749.539,327.999 749.331,328.542 748.989,329.368 C748.952,329.46 748.909,329.562 748.83,329.753 C748.766,329.908 748.719,330.021 748.674,330.132 C747.949,331.906 747.659,333.04 747.659,334.573 C747.659,335.003 747.311,335.351 746.882,335.351 C746.452,335.351 746.104,335.003 746.104,334.573 C746.104,332.802 746.44,331.488 747.234,329.544 C747.28,329.43 747.328,329.314 747.393,329.158 C747.473,328.966 747.515,328.864 747.552,328.774 C747.879,327.984 748.073,327.475 748.253,326.912 C748.687,325.553 748.525,324.562 747.797,323.24 C747.667,323.004 747.521,322.76 747.314,322.424 C747.275,322.361 747.248,322.318 747.181,322.209 C747.113,322.1 747.113,322.1 747.044,321.99 C746.931,321.807 746.847,321.671 746.763,321.533 C744.524,317.834 744.357,314.324 745.487,310.273 C743.21,308.946 742.005,306.763 741.874,304.163 C741.874,300.308 744.998,297.184 748.853,297.184 z\" fill=\"#DBDBDB\"/>\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/vdx.svg":
/*!****************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/svgs/vdx.svg ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0\" y=\"0\" width=\"1400\" height=\"600\" viewBox=\"0, 0, 1400, 600\">\n  <g id=\"vdx\" transform=\"translate(0, 0)\">\n    <g id=\"pathway\">\n      <g>\n        <path d=\"M67.486,315.033 C79.998,302.088 91.109,294.301 105.432,294.301 C124.28,294.301 139.86,310.091 150.838,321.922\" fill-opacity=\"0\" stroke=\"#41719C\" stroke-width=\"3\"/>\n        <path d=\"M67.486,315.033 L66.312,310.124 L61.772,321.191 L72.469,315.838 z\" fill=\"#41719C\" fill-opacity=\"1\" stroke=\"#41719C\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n      <g>\n        <path d=\"M184.506,335.088 L216.647,335.088\" fill-opacity=\"0\" stroke=\"#41719C\" stroke-width=\"3\"/>\n        <path d=\"M216.647,335.088 L213.847,339.288 L225.047,335.088 L213.847,330.888 z\" fill=\"#41719C\" fill-opacity=\"1\" stroke=\"#41719C\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n      <g>\n        <path d=\"M144.445,357.925 C131.933,370.871 120.823,378.657 106.499,378.657 C87.651,378.657 72.071,362.868 61.093,351.037\" fill-opacity=\"0\" stroke=\"#41719C\" stroke-width=\"3\"/>\n        <path d=\"M144.445,357.925 L145.619,362.835 L150.159,351.768 L139.462,357.121 z\" fill=\"#41719C\" fill-opacity=\"1\" stroke=\"#41719C\" stroke-width=\"3\" stroke-opacity=\"1\"/>\n      </g>\n      <text transform=\"matrix(1, 0, 0, 1, 45.556, 335.979)\">\n        <tspan x=\"-8.004\" y=\"7.455\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">V</tspan>\n      </text>\n      <text transform=\"matrix(1, 0, 0, 1, 165.375, 335.979)\">\n        <tspan x=\"-7.33\" y=\"7.455\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">Z</tspan>\n      </text>\n    </g>\n    <g id=\"vde\">\n      <g>\n        <path d=\"M105.966,427.106 C87.692,427.106 72.878,417.276 72.878,405.151 C72.878,393.025 87.692,383.195 105.966,383.195 C124.239,383.195 139.053,393.025 139.053,405.151 C139.053,417.276 124.239,427.106 105.966,427.106 z\" fill=\"#A9D18E\"/>\n        <path d=\"M105.966,427.106 C87.692,427.106 72.878,417.276 72.878,405.151 C72.878,393.025 87.692,383.195 105.966,383.195 C124.239,383.195 139.053,393.025 139.053,405.151 C139.053,417.276 124.239,427.106 105.966,427.106 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n      <text transform=\"matrix(1, 0, 0, 1, 105.466, 404.651)\">\n        <tspan x=\"-24.674\" y=\"7.5\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">VDE</tspan>\n      </text>\n    </g>\n    <g id=\"ze\">\n      <g>\n        <path d=\"M105.966,291.597 C87.692,291.597 72.878,281.767 72.878,269.641 C72.878,257.516 87.692,247.686 105.966,247.686 C124.239,247.686 139.053,257.516 139.053,269.641 C139.053,281.767 124.239,291.597 105.966,291.597 z\" fill=\"#FFE698\"/>\n        <path d=\"M105.966,291.597 C87.692,291.597 72.878,281.767 72.878,269.641 C72.878,257.516 87.692,247.686 105.966,247.686 C124.239,247.686 139.053,257.516 139.053,269.641 C139.053,281.767 124.239,291.597 105.966,291.597 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n      <text transform=\"matrix(1, 0, 0, 1, 105.466, 269.141)\">\n        <tspan x=\"-15.334\" y=\"7.5\" font-family=\"Arial,ArialMT\" font-size=\"24\" fill=\"#000000\">ZE</tspan>\n      </text>\n    </g>\n    <g id=\"psbs\">\n      <g id=\"psbs\">\n        <path d=\"M245.618,293.94 L270.775,293.94 C276.882,293.94 281.833,298.481 281.833,304.083 L281.833,371.767 C281.833,377.368 276.882,381.909 270.775,381.909 L245.618,381.909 C239.511,381.909 234.56,377.368 234.56,371.767 L234.56,304.083 C234.56,298.481 239.511,293.94 245.618,293.94 z\" fill=\"#6C9700\"/>\n        <path d=\"M245.618,293.94 L270.775,293.94 C276.882,293.94 281.833,298.481 281.833,304.083 L281.833,371.767 C281.833,377.368 276.882,381.909 270.775,381.909 L245.618,381.909 C239.511,381.909 234.56,377.368 234.56,371.767 L234.56,304.083 C234.56,298.481 239.511,293.94 245.618,293.94 z\" fill-opacity=\"0\" stroke=\"#3B3838\" stroke-width=\"1\"/>\n      </g>\n      <text transform=\"matrix(1, 0, 0, 1, 257.822, 367.077)\">\n        <tspan x=\"-16.731\" y=\"4.073\" font-family=\"Arial,ArialMT\" font-size=\"14\" fill=\"#000000\">PsbS</tspan>\n      </text>\n    </g>\n  </g>\n</svg>\n");

/***/ }),

/***/ "./src/components/atp-synthase.js":
/*!****************************************!*\
  !*** ./src/components/atp-synthase.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_atp_synthase_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/atp-synthase.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/atp-synthase.svg");
/**
 * ATP synthase
 */



const atpsynthase = function () {
  let {
    subunits = false,
    reaction = true,
    label = true,
    position = null,
    cRingColor = "#C7B29E",
    alphaSubunitColor = "#D6C2AD",
    betaSubunitColor = "#C7B29E",
    gammaSubunitColor = "#F6E8D7",
    iSubunitColor = "#C7B29E",
    iiSubunitColor = "E4D3BD"
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_atp_synthase_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);

  // Add modifications here
  if (!subunits) {
    let shape = draw.findOne('#atp-synthase > #subunits');
    shape.opacity(0);
  }
  if (!reaction) {
    let shape = draw.findOne('#atp-synthase > #reaction');
    shape.opacity(0);
  }
  if (!label) {
    let labelText = draw.findOne('#label');
    labelText.opacity(0);
  }
  if (cRingColor) {
    let shape = draw.findOne('#atp-synthase #c-ring path');
    shape.fill(cRingColor);
  }
  if (alphaSubunitColor) {
    let shape = draw.findOne('#atp-synthase #alpha-subunit path');
    shape.fill(alphaSubunitColor);
  }
  if (betaSubunitColor) {
    let shapes = draw.find('#atp-synthase #beta-subunit path');
    shapes.forEach(shape => shape.fill(betaSubunitColor));
  }
  if (gammaSubunitColor) {
    let shape = draw.findOne('#atp-synthase #gamma-subunit path');
    shape.fill(gammaSubunitColor);
  }
  if (iSubunitColor) {
    let shape = draw.findOne('#atp-synthase #i-subunit path');
    shape.fill(iSubunitColor);
  }
  if (iiSubunitColor) {
    let shape = draw.findOne('#atp-synthase #ii-subunit path');
    shape.fill(iiSubunitColor);
  }
  if (position) {
    let move = draw.findOne('#atp-synthase');
    move.transform({
      translateX: position - move.x(),
      origin: 'left'
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (atpsynthase);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_atp_synthase_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#atp-synthase');
  return {
    "id": "atpsynthase",
    "headerTitle": "ATP Synthase",
    "show": true,
    "options": [{
      "type": "check",
      "name": "subunits",
      "value": false,
      "label": "Subunit Labels"
    }, {
      "type": "check",
      "name": "reaction",
      "value": true,
      "label": "Reaction Labels"
    }, {
      "type": "check",
      "name": "label",
      "value": true,
      "label": "Label"
    }, {
      "type": "color",
      "name": "cRingColor",
      "value": "#E4D3BD",
      "label": "c₁₄-Ring"
    }, {
      "type": "color",
      "name": "alphaSubunitColor",
      "value": "#D6C2AD",
      "label": "𝛼 - Subunits"
    }, {
      "type": "color",
      "name": "betaSubunitColor",
      "value": "#C7B29E",
      "label": "𝛽 - Subunits"
    }, {
      "type": "color",
      "name": "gammaSubunitColor",
      "value": "#F6E8D7",
      "label": "𝛾 - Subunits"
    }, {
      "type": "color",
      "name": "iSubunitColor",
      "value": "#C7B29E",
      "label": "I - Subunits"
    }, {
      "type": "color",
      "name": "iiSubunitColor",
      "value": "#E4D3BD",
      "label": "II - Subunits"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "The ATP synthase is a molecular motor that catalyzes the condensation reaction of adenosine diphosphate (ADP) and inorganic phosphate (P\u1D62) to adenosine triphosphate (ATP) by utilizing a proton gradient between the stroma and lumen generated by proton deposition into the lumen by PSII water oxidation and the Q-cycle.";
};

/***/ }),

/***/ "./src/components/cytochrome-b6f.js":
/*!******************************************!*\
  !*** ./src/components/cytochrome-b6f.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_cytochrome_b6f_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/cytochrome-b6f.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/cytochrome-b6f.svg");
/**
 * Cytochrome b₆f
 */



const cytochromeB6f = function () {
  let {
    coreColor = "#B2C7DA",
    rieskeColor = "#B2C7DA",
    rieske = true,
    cofactors = false,
    label = true,
    position = null
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_cytochrome_b6f_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  if (coreColor) {
    let coreShapes = draw.find('#cytochrome-b6f #core path');
    coreShapes.forEach(shape => shape.fill(coreColor));
  }
  if (rieskeColor) {
    let rieskeShapes = draw.find('#cytochrome-b6f #rieske path');
    rieskeShapes.forEach(shape => shape.fill(rieskeColor));
  }
  if (!cofactors) {
    let shape = draw.findOne('#cytochrome-b6f #cofactors');
    shape.opacity(0);
  }
  if (!rieske) {
    let shape = draw.findOne('#cytochrome-b6f #rieske');
    shape.opacity(0);
  }
  if (!label) {
    let labelText = draw.findOne('#cytochrome-b6f #label');
    labelText.opacity(0);
  }
  if (position) {
    let move = draw.findOne('#cytochrome-b6f');
    move.transform({
      translateX: position - move.x()
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cytochromeB6f);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_cytochrome_b6f_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#cytochrome-b6f');
  return {
    "id": "cytochrome-b6f",
    "headerTitle": "Cytochrome&nbsp;<em>b₆f</em>",
    "show": true,
    "options": [{
      "type": "check",
      "name": "cofactors",
      "value": false,
      "label": "Cofactors"
    }, {
      "type": "check",
      "name": "rieske",
      "value": true,
      "label": "Rieske Complex"
    }, {
      "type": "check",
      "name": "label",
      "value": true,
      "label": "Label"
    }, {
      "type": "color",
      "name": "coreColor",
      "value": "#B2C7DA",
      "label": "Core Color"
    }, {
      "type": "color",
      "name": "rieskeColor",
      "value": "#B2C7DA",
      "label": "Rieske Color"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "The cytochrome <em>b\u2086f</em> complex oxidizes PQH\u2082 to PQ while pumping protons from the stroma into the lumen in the so-called Q-cycle. The electrons from PQH\u2082 are then transferred via the cytochrome <em>f</em> subunit to the luminal electron donor for photosystem I (PSI).";
};

/***/ }),

/***/ "./src/components/cytochrome-c6.js":
/*!*****************************************!*\
  !*** ./src/components/cytochrome-c6.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_cytochrome_c6_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/cytochrome-c6.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/cytochrome-c6.svg");
/**
 * Cytochrome c₆
 */



const cytochromeC6 = function () {
  let {
    color = '#FF2B2B',
    cofactor = false,
    label = true,
    position = null
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_cytochrome_c6_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);

  // Add modifications here
  let path = draw.findOne('#cytochrome-c6 #shape path');
  path.fill(color);
  if (!cofactor) {
    let shape = draw.findOne('#cytochrome-c6 #cofactor');
    shape.opacity(0);
  }
  if (!label) {
    let text = draw.findOne('#cytochrome-c6 text');
    text.opacity(0);
  }
  if (position) {
    let move = draw.findOne('#cytochrome-c6');
    move.transform({
      translateX: position - move.x()
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cytochromeC6);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_cytochrome_c6_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#cytochrome-c6');
  return {
    "id": "cytochrome-c6",
    "headerTitle": "Cytochrome c₆",
    "show": false,
    "options": [{
      "type": "check",
      "name": "label",
      "value": true,
      "label": "Label"
    }, {
      "type": "check",
      "name": "cofactor",
      "value": false,
      "label": "Cofactor"
    }, {
      "type": "color",
      "name": "color",
      "value": "#FF2B2B",
      "label": "Shape Color"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "Cytochrome c\u2086 (Cyt c\u2086) is a small, heme (Fe\u1D35\u1D35) binding, luminal protein, transferring electrons from cytochrome <em>f</em> to P\u2087\u2080\u2080.";
};

/***/ }),

/***/ "./src/components/electron-flux.js":
/*!*****************************************!*\
  !*** ./src/components/electron-flux.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_electron_flux_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/electron-flux.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/electron-flux.svg");
/**
 * Electron Flux
 */



const electronFlux = function () {
  let {
    pc_to_ps_i = true,
    b6f_to_pc = true,
    ps_i_to_fd = true,
    flow_q_cycle = true,
    ps_ii_to_pq = true,
    fd_to_cyt_b6f = false,
    fd_to_fnr = true,
    position = null
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_electron_flux_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  if (!pc_to_ps_i) {
    let shape = draw.findOne('#pc-to-ps-i');
    shape.opacity(0);
  }
  if (!b6f_to_pc) {
    let shape = draw.findOne('#b6f-to-pc');
    shape.opacity(0);
  }
  if (!ps_i_to_fd) {
    let shape = draw.findOne('#ps-i-to-fd');
    shape.opacity(0);
  }
  if (!flow_q_cycle) {
    let shape = draw.findOne('#flow-q-cycle');
    shape.opacity(0);
  }
  if (!ps_ii_to_pq) {
    let shape = draw.findOne('#ps-ii-to-pq');
    shape.opacity(0);
  }
  if (!fd_to_cyt_b6f) {
    let shape = draw.findOne('#fd-to-cyt-b6f');
    shape.opacity(0);
  }
  if (!fd_to_fnr) {
    let shape = draw.findOne('#fd-to-fnr');
    shape.opacity(0);
  }
  if (position) {
    let move = draw.findOne('#electron-flux');
    move.transform({
      translateX: position - move.x()
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (electronFlux);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_electron_flux_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#electron-flux');
  return {
    "id": "electron-flux",
    "headerTitle": "Electron Flux",
    "show": true,
    "options": [{
      "type": "check",
      "name": "ps_ii_to_pq",
      "value": true,
      "label": "Photosystem II → PQ"
    }, {
      "type": "check",
      "name": "flow_q_cycle",
      "value": true,
      "label": "PQH₂ → Cytochrome b₆f"
    }, {
      "type": "check",
      "name": "b6f_to_pc",
      "value": true,
      "label": "Cytochrome b₆f → PC"
    }, {
      "type": "check",
      "name": "pc_to_ps_i",
      "value": true,
      "label": "PC → Photosystem I"
    }, {
      "type": "check",
      "name": "ps_i_to_fd",
      "value": true,
      "label": "Photosystem I → Fd"
    }, {
      "type": "check",
      "name": "fd_to_fnr",
      "value": true,
      "label": "Fd → FNR"
    }, {
      "type": "check",
      "name": "fd_to_cyt_b6f",
      "value": true,
      "label": "Fd → Cytochrome b₆f"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "Orange arrows indicate the transfer of electrons (e\u207B).";
};

/***/ }),

/***/ "./src/components/ferredoxin.js":
/*!**************************************!*\
  !*** ./src/components/ferredoxin.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_ferredoxin_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/ferredoxin.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/ferredoxin.svg");
/**
 * Ferredoxin
 */



const ferredoxin = function () {
  let {
    color = '#A08C79',
    label = true,
    position = true
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_ferredoxin_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  if (color) {
    let shape = draw.findOne('#ferredoxin path');
    shape.fill(color);
  }
  if (!label) {
    let text = draw.findOne('#ferredoxin text');
    text.opacity(0);
  }
  if (position) {
    let move = draw.findOne('#ferredoxin');
    move.transform({
      translateX: position - move.x()
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ferredoxin);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_ferredoxin_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#ferredoxin');
  return {
    "id": "ferredoxin",
    "headerTitle": "Ferredoxin",
    "show": true,
    "options": [{
      "type": "check",
      "name": "label",
      "value": true,
      "label": "Label"
    }, {
      "type": "color",
      "name": "color",
      "value": "#A08C79",
      "label": "Shape Color"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "Ferredoxin (Fd) binds to the stromal acceptor side of PSI where it is reduced and, during linear electron flow, the electron is transferred onto ferredoxin NADP\u207A oxidoreductase (FNR).";
};

/***/ }),

/***/ "./src/components/fnr.js":
/*!*******************************!*\
  !*** ./src/components/fnr.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_fnr_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/fnr.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/fnr.svg");
/**
 * FNR
 */



const fnr = function () {
  let {
    reaction = true,
    color = '#EECC00',
    label = true,
    position = true
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_fnr_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  if (color) {
    let shape = draw.findOne('#fnr #shape path');
    shape.fill(color);
  }
  if (!reaction) {
    let shape = draw.findOne('#fnr #reaction');
    shape.opacity(0);
  }
  if (!label) {
    let text = draw.findOne('#fnr > text');
    text.opacity(0);
  }
  if (position) {
    let move = draw.findOne('#fnr');
    move.transform({
      translateX: position - move.x()
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (fnr);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_fnr_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#fnr');
  return {
    "id": "fnr",
    "headerTitle": "FNR",
    "show": true,
    "options": [{
      "type": "check",
      "name": "reaction",
      "value": true,
      "label": "Reaction"
    }, {
      "type": "check",
      "name": "label",
      "value": true,
      "label": "Label"
    }, {
      "type": "color",
      "name": "color",
      "value": "#EECC00",
      "label": "Shape Color"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "The Ferredoxin NADP\u207A oxidoreductase (FNR) picks up an electron from Fd and reduces NADP\u207A to NADPH.";
};

/***/ }),

/***/ "./src/components/ion-channels.js":
/*!****************************************!*\
  !*** ./src/components/ion-channels.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_ion_channels_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/ion-channels.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/ion-channels.svg");
/**
 * Ion Channels
 */



const ionChannels = function () {
  let {
    kChannel = false,
    caChannel = false,
    label = true,
    pmf = false,
    position = null
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_ion_channels_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);

  // Add modifications here
  if (!kChannel) {
    let shape = draw.findOne('#ion-channels #k-channel');
    shape.opacity(0);
  }
  if (!caChannel) {
    let shape = draw.findOne('#ion-channels #ca-channel');
    shape.opacity(0);
  }
  if (!label) {
    let label = draw.findOne('#ion-channels #label');
    label.opacity(0);
  }
  if (!pmf) {
    let pmf = draw.findOne('#ion-channels #pmf');
    pmf.opacity(0);
  }
  if (position) {
    let move = draw.findOne('#ion-channels');
    move.transform({
      translateX: position - move.x()
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ionChannels);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_ion_channels_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#ion-channels');
  return {
    "id": "ion-channels",
    "headerTitle": "Ion Channels",
    "show": false,
    "options": [{
      "type": "check",
      "name": "kChannel",
      "value": true,
      "label": "K⁺ - Channel"
    }, {
      "type": "check",
      "name": "caChannel",
      "value": true,
      "label": "Ca⁺ - Channel"
    }, {
      "type": "check",
      "name": "label",
      "value": true,
      "label": "Label"
    }, {
      "type": "check",
      "name": "pmf",
      "value": false,
      "label": "ΔΨ/ΔpH - Label"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "Transthylakoid ion channels allow in influx and efflux of ions between the stroma and lumen.";
};

/***/ }),

/***/ "./src/components/ion-flux.js":
/*!************************************!*\
  !*** ./src/components/ion-flux.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_ion_flux_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/ion-flux.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/ion-flux.svg");
/**
 * Ion Flux
 */



const ionFlux = function () {
  let {
    kChannel = false,
    caChannel = false,
    position = null
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_ion_flux_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);

  // Add modifications here
  if (!kChannel) {
    let shape = draw.findOne('#ion-flux #k-channel');
    shape.opacity(0);
  }
  if (!caChannel) {
    let shape = draw.findOne('#ion-flux #ca-channel');
    shape.opacity(0);
  }
  if (position) {
    let move = draw.findOne('#ion-flux');
    move.transform({
      translateX: position - move.x()
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ionFlux);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_ion_flux_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#ion-flux');
  return {
    "id": "ion-flux",
    "headerTitle": "Ion Flux",
    "show": false,
    "options": [{
      "type": "check",
      "name": "kChannel",
      "value": true,
      "label": "K⁺ ⇄ H⁺"
    }, {
      "type": "check",
      "name": "caChannel",
      "value": true,
      "label": "→ Ca⁺"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "The ions Ca\u207A and K\u207A act as counter ions to the initial build-up of the proton gradient (H\u207A) allowing to store part of the <em>pmf</em> as \u0394\u03A8 (electric component of <em>pmf</em>) during steady-state.";
};

/***/ }),

/***/ "./src/components/lumen.js":
/*!*********************************!*\
  !*** ./src/components/lumen.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_lumen_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/lumen.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/lumen.svg");
/**
 * Lumen
 */



const lumen = function () {
  let {
    color = '#FFE5E5',
    label = 'lumen',
    showLabel = true
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_lumen_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let path = draw.findOne('#lumen path');
  path.fill(color);
  let tspan = draw.findOne('#lumen tspan');
  tspan.text(label);
  if (!showLabel) {
    tspan = draw.findOne('#lumen text');
    tspan.opacity(0);
  }
  let op = draw.findOne('#lumen path');
  op.animate().transform({
    rotation: 45
  }, true);
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (lumen);
const settings = () => {
  return {
    "id": "lumen",
    "headerTitle": "Lumen",
    "show": true,
    "options": [{
      "type": "text",
      "name": "label",
      "value": "lumen",
      "label": "Label"
    }, {
      "type": "check",
      "name": "showLabel",
      "value": true,
      "label": "Label"
    }, {
      "type": "color",
      "name": "color",
      "value": "#FFE5E5",
      "label": "Background"
    }]
  };
};
const legend = () => {
  return "The lumen is enclosed by the thylakoid membrane.";
};

/***/ }),

/***/ "./src/components/photosystem-i.js":
/*!*****************************************!*\
  !*** ./src/components/photosystem-i.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_photosystem_i_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/photosystem-i.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/photosystem-i.svg");
/**
 * Photosystem I
 */



const photosystemI = function () {
  let {
    center = false,
    light = true,
    cofactors = false,
    antenna = true,
    lightColor = "#FFEC7F",
    lightSize = 1,
    coreColor = "#0CB04B",
    antennaColor = "#008000",
    label = true,
    position = null
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_photosystem_i_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  if (coreColor) {
    let coreShapes = draw.find('#photosystem-i #core path');
    coreShapes.forEach(shape => shape.fill(coreColor));
  }
  if (antennaColor) {
    let antennaShapes = draw.find('#photosystem-i #antenna path');
    antennaShapes.forEach(shape => shape.fill(antennaColor));
  }
  if (lightColor) {
    let lightShape = draw.findOne('#photosystem-i #light path');
    lightShape.fill(lightColor);
  }
  if (!light) {
    let shape = draw.findOne('#photosystem-i #light');
    shape.opacity(0);
  }
  if (!center) {
    let shape = draw.findOne('#photosystem-i #center');
    shape.opacity(0);
  }
  if (!cofactors) {
    let shape = draw.findOne('#photosystem-i #cofactors');
    shape.opacity(0);
  }
  if (!antenna) {
    let shape = draw.findOne('#photosystem-i #antenna');
    shape.opacity(0);
  }
  if (!label) {
    let text = draw.findOne('#photosystem-i #label');
    text.opacity(0);
  }
  if (lightSize) {
    let shape = draw.findOne('#photosystem-i #light');
    shape.transform({
      origin: 'bottom right',
      scale: Number(lightSize)
    });
  }
  if (position) {
    let move = draw.findOne('#photosystem-i');
    move.transform({
      translateX: position - move.x()
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (photosystemI);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_photosystem_i_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#photosystem-i');
  return {
    "id": "photosystem-i",
    "headerTitle": "Photosystem I",
    "show": true,
    "options": [{
      "type": "check",
      "name": "center",
      "value": false,
      "label": "Reaction Center"
    }, {
      "type": "check",
      "name": "cofactors",
      "value": false,
      "label": "Cofactors"
    }, {
      "type": "check",
      "name": "light",
      "value": true,
      "label": "Light"
    }, {
      "type": "check",
      "name": "antenna",
      "value": true,
      "label": "Antenna (LHCa)"
    }, {
      "type": "check",
      "name": "label",
      "value": true,
      "label": "Label"
    }, {
      "type": "color",
      "name": "coreColor",
      "value": "#0CB04B",
      "label": "Core Color"
    }, {
      "type": "color",
      "name": "lightColor",
      "value": "#FFEC7F",
      "label": "Light Color"
    }, {
      "type": "color",
      "name": "antennaColor",
      "value": "#008000",
      "label": "Antenna Color"
    }, {
      "type": "range",
      "name": "lightSize",
      "value": 1,
      "label": "Light (Size)",
      "step": "0.1",
      "min": "0.5",
      "max": "1.5"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "The reaction center of PSI (P\u2087\u2080\u2080) oxidizes the luminal electron donor PC or cytochrome c\u2086 after being excited and transfers the electron to the stromal acceptor, ferredoxin (Fd).";
};

/***/ }),

/***/ "./src/components/photosystem-ii-repair.js":
/*!*************************************************!*\
  !*** ./src/components/photosystem-ii-repair.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_photosystem_ii_repair_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/photosystem-ii-repair.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/photosystem-ii-repair.svg");
/**
 * Photosystem II - repair
 */



const photosystemIIrepair = function () {
  let {
    coreColor = "#B4D66F",
    lightColor = "#FFEC7F",
    lightSize = 1,
    antennaColor = "#8BC300",
    d1 = true,
    antenna = true,
    cycle = true,
    light = true,
    position = null
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_photosystem_ii_repair_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  if (coreColor) {
    let coreShape = draw.findOne('#photosystem-ii-repair #core path');
    coreShape.fill(coreColor);
  }
  if (lightColor) {
    let lightShape = draw.findOne('#photosystem-ii-repair #light path');
    lightShape.fill(lightColor);
  }
  if (antennaColor) {
    let antennaShapes = draw.find('#photosystem-ii-repair #antenna path');
    antennaShapes.forEach(shape => shape.fill(antennaColor));
  }
  if (!cycle) {
    let shape = draw.findOne('#photosystem-ii-repair #cycle');
    shape.opacity(0);
  }
  if (!d1) {
    let shape = draw.findOne('#photosystem-ii-repair #d1');
    shape.opacity(0);
  }
  if (!antenna) {
    let shape = draw.findOne('#photosystem-ii-repair #antenna');
    shape.opacity(0);
  }
  if (!light) {
    let shape = draw.findOne('#photosystem-ii-repair #light');
    shape.opacity(0);
  }
  if (lightSize) {
    let shape = draw.findOne('#photosystem-ii-repair #light');
    shape.transform({
      origin: 'bottom right',
      scale: Number(lightSize)
    });
  }
  if (position) {
    let move = draw.findOne('#photosystem-ii-repair');
    move.transform({
      translateX: position - move.x()
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (photosystemIIrepair);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_photosystem_ii_repair_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#photosystem-ii-repair');
  return {
    "id": "photosystem-ii-repair",
    "headerTitle": "Photosystem II (repair)",
    "show": false,
    "options": [{
      "type": "check",
      "name": "antenna",
      "value": true,
      "label": "Antenna"
    }, {
      "type": "check",
      "name": "light",
      "value": true,
      "label": "Light"
    }, {
      "type": "check",
      "name": "d1",
      "value": true,
      "label": "D1 Subunit"
    }, {
      "type": "check",
      "name": "cycle",
      "value": true,
      "label": "Cycle Arrows"
    }, {
      "type": "color",
      "name": "coreColor",
      "value": "#B4D66F",
      "label": "Core Color"
    }, {
      "type": "color",
      "name": "lightColor",
      "value": "#FFEC7F",
      "label": "Light Color"
    }, {
      "type": "color",
      "name": "antennaColor",
      "value": "#8BC300",
      "label": "Antenna Color"
    }, {
      "type": "range",
      "name": "lightSize",
      "value": 1,
      "label": "Light (Size)",
      "step": "0.1",
      "min": "0.5",
      "max": "1.5"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "Photodamaged PSII undergoes repair in a multi-step process in which the PSII core moves from the grana to the stroma thylakoids. The damaged D1 subunit is replaced and the PSII monomers are migrating back to the grana thylakoids for dimerization and supercomplex assembly.";
};

/***/ }),

/***/ "./src/components/photosystem-ii.js":
/*!******************************************!*\
  !*** ./src/components/photosystem-ii.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_photosystem_ii_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/photosystem-ii.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/photosystem-ii.svg");
/**
 * Photosystem II
 */



const photosystemII = function () {
  let {
    coreColor = "#B4D66F",
    lightColor = "#FFEC7F",
    lightSize = 1,
    antennaColor = "#8BC300",
    antenna = true,
    light = true,
    cofactors = false,
    center = false,
    reaction = true,
    fluorescence = false,
    label = true,
    position = null
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_photosystem_ii_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  if (coreColor) {
    let coreShape = draw.findOne('#photosystem-ii #core path');
    coreShape.fill(coreColor);
  }
  if (lightColor) {
    let lightShape = draw.findOne('#photosystem-ii #light path');
    lightShape.fill(lightColor);
  }
  if (antennaColor) {
    let antennaShapes = draw.find('#photosystem-ii #antenna path');
    antennaShapes.forEach(shape => shape.fill(antennaColor));
  }
  if (!cofactors) {
    let shape = draw.findOne('#photosystem-ii #cofactors');
    shape.opacity(0);
  }
  if (!center) {
    let shape = draw.findOne('#photosystem-ii-center');
    shape.opacity(0);
  }
  if (!antenna) {
    let shape = draw.findOne('#photosystem-ii #antenna');
    shape.opacity(0);
  }
  if (!light) {
    let shape = draw.findOne('#photosystem-ii #light');
    shape.opacity(0);
  }
  if (!reaction) {
    let shape = draw.findOne('#photosystem-ii #water-split');
    shape.opacity(0);
  }
  if (!label) {
    let labelText = draw.findOne('#photosystem-ii #label');
    labelText.opacity(0);
  }
  if (!fluorescence) {
    let group = draw.findOne('#photosystem-ii #fluorescence');
    group.opacity(0);
  }
  if (lightSize) {
    let shape = draw.findOne('#photosystem-ii #light');
    shape.transform({
      origin: 'bottom right',
      scale: Number(lightSize)
    });
  }
  if (position) {
    let move = draw.findOne('#photosystem-ii');
    move.transform({
      translateX: position - move.x()
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (photosystemII);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_photosystem_ii_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#photosystem-ii');
  return {
    "id": "photosystem-ii",
    "headerTitle": "Photosystem II",
    "show": true,
    "options": [{
      "type": "check",
      "name": "antenna",
      "value": true,
      "label": "Antenna"
    }, {
      "type": "check",
      "name": "light",
      "value": true,
      "label": "Light"
    }, {
      "type": "check",
      "name": "center",
      "value": false,
      "label": "Reaction Center"
    }, {
      "type": "check",
      "name": "cofactors",
      "value": false,
      "label": "Cofactors"
    }, {
      "type": "check",
      "name": "reaction",
      "value": true,
      "label": "Water Split Reaction"
    }, {
      "type": "check",
      "name": "label",
      "value": true,
      "label": "Label"
    }, {
      "type": "check",
      "name": "fluorescence",
      "value": false,
      "label": "Fluorescence"
    }, {
      "type": "color",
      "name": "coreColor",
      "value": "#B4D66F",
      "label": "Core Color"
    }, {
      "type": "color",
      "name": "lightColor",
      "value": "#FFEC7F",
      "label": "Light Color"
    }, {
      "type": "color",
      "name": "antennaColor",
      "value": "#8BC300",
      "label": "Antenna Color"
    }, {
      "type": "range",
      "name": "lightSize",
      "value": 1,
      "label": "Light (Size)",
      "step": "0.1",
      "min": "0.5",
      "max": "1.5"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "Photosystem II (PSII), with its reaction center (P\u2086\u2088\u2080) oxidizes water when exited, producing electrons (e\u207B) and protons (H\u207A). The protons are deposited into the lumen and the electrons are transferred to the plastoquinone pool.";
};

/***/ }),

/***/ "./src/components/plastocyanin.js":
/*!****************************************!*\
  !*** ./src/components/plastocyanin.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_plastocyanin_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/plastocyanin.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/plastocyanin.svg");
/**
 * Plastocyanin
 */



const plastocyanin = function () {
  let {
    color = '#5B9BD5',
    cofactor = false,
    label = true,
    position = null
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_plastocyanin_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);

  // Add modifications here
  let path = draw.findOne('#plastocyanin #shape path');
  path.fill(color);
  if (!cofactor) {
    let shape = draw.findOne('#plastocyanin #cofactor');
    shape.opacity(0);
  }
  if (!label) {
    let text = draw.findOne('#plastocyanin > text');
    text.opacity(0);
  }
  if (position) {
    let move = draw.findOne('#plastocyanin');
    move.transform({
      translateX: position - move.x()
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (plastocyanin);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_plastocyanin_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#plastocyanin');
  return {
    "id": "plastocyanin",
    "headerTitle": "Plastocyanin",
    "show": true,
    "options": [{
      "type": "check",
      "name": "label",
      "value": true,
      "label": "Label"
    }, {
      "type": "check",
      "name": "cofactor",
      "value": false,
      "label": "Cofactor"
    }, {
      "type": "color",
      "name": "color",
      "value": "#5B9BD5",
      "label": "Shape Color"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "Plastocyanin (Pc) is a small copper (Cu\xB2\u207A) containing luminal protein that transfers electrons from cytochrome <em>f</em> to P\u2087\u2080\u2080.";
};

/***/ }),

/***/ "./src/components/plastoquinone.js":
/*!*****************************************!*\
  !*** ./src/components/plastoquinone.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_plastoquinone_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/plastoquinone.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/plastoquinone.svg");
/**
 * Plastoquinone
 */



const plastoquinone = function () {
  let {
    color = '#FFE698',
    label = true,
    position = null
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_plastoquinone_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);

  // Add modifications here
  let path = draw.findOne('#plastoquinone #shape path');
  path.fill(color);
  if (!label) {
    let text = draw.findOne('#plastoquinone text');
    text.opacity(0);
  }
  if (position) {
    let move = draw.findOne('#plastoquinone');
    move.transform({
      translateX: position - move.x()
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (plastoquinone);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_plastoquinone_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#plastoquinone');
  return {
    "id": "plastoquinone",
    "headerTitle": "Plastoquinone",
    "show": true,
    "options": [{
      "type": "check",
      "name": "label",
      "value": true,
      "label": "Label"
    }, {
      "type": "color",
      "name": "color",
      "value": "#FFE698",
      "label": "Shape Color"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "Plastoquinone (PQ) is reduced to plastoquinol (PQH\u2082) at the Q\u0299 side of PSII. The electrons are shuttled to the cytochrome <em>b\u2086f</em> complex.";
};

/***/ }),

/***/ "./src/components/proton-flux.js":
/*!***************************************!*\
  !*** ./src/components/proton-flux.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_proton_flux_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/proton-flux.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/proton-flux.svg");
/**
 * Proton Flux
 */



const protonFlux = function () {
  let {
    atp_synthase = true,
    stroma_ps_ii = true,
    stroma_b6f = true,
    b6f_lumen = true,
    ps_ii_atp_synthase = true,
    h2o_lumen = true,
    position = null
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_proton_flux_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  if (!atp_synthase) {
    let shape = draw.findOne('#atp-synthase');
    shape.opacity(0);
  }
  if (!stroma_ps_ii) {
    let shape = draw.findOne('#stroma-ps-ii');
    shape.opacity(0);
  }
  if (!stroma_b6f) {
    let shape = draw.findOne('#stroma-b6f');
    shape.opacity(0);
  }
  if (!b6f_lumen) {
    let shape = draw.findOne('#b6f-lumen');
    shape.opacity(0);
  }
  if (!ps_ii_atp_synthase) {
    let shape = draw.findOne('#ps-ii-atp-synthase');
    shape.opacity(0);
  }
  if (!h2o_lumen) {
    let shape = draw.findOne('#h2o_lumen');
    shape.opacity(0);
  }
  if (position) {
    let move = draw.findOne('#proton-flux');
    move.transform({
      translateX: position - move.x()
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (protonFlux);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_proton_flux_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#proton-flux');
  return {
    "id": "proton-flux",
    "headerTitle": "Proton Flux",
    "show": true,
    "options": [{
      "type": "check",
      "name": "h2o_lumen",
      "value": true,
      "label": "H₂O → Lumen"
    }, {
      "type": "check",
      "name": "ps_ii_atp_synthase",
      "value": true,
      "label": "Lumen → ATP-Synthase"
    }, {
      "type": "check",
      "name": "atp_synthase",
      "value": true,
      "label": "ATP-Synthase"
    }, {
      "type": "check",
      "name": "stroma_ps_ii",
      "value": true,
      "label": "Stroma → Photosystem II"
    }, {
      "type": "check",
      "name": "stroma_b6f",
      "value": true,
      "label": "Stroma  → Cytochrome b₆f"
    }, {
      "type": "check",
      "name": "b6f_lumen",
      "value": true,
      "label": "Cytochrome b₆f → Lumen"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "Light blue arrows indicate the transfer of protons (H\u207A).";
};

/***/ }),

/***/ "./src/components/ptox.js":
/*!********************************!*\
  !*** ./src/components/ptox.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_ptox_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/ptox.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/ptox.svg");
/**
 * PTOX
 */



const ptox = function () {
  let {
    reaction = true,
    color = '#C2AAFF',
    position = null
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_ptox_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  if (color) {
    let shape = draw.findOne('#ptox #shape path');
    shape.fill(color);
  }
  if (!reaction) {
    let shape = draw.findOne('#ptox #reaction');
    shape.opacity(0);
  }
  if (position) {
    let move = draw.findOne('#ptox');
    move.transform({
      translateX: position - move.x()
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ptox);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_ptox_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#ptox');
  return {
    "id": "ptox",
    "headerTitle": "PTOX",
    "show": false,
    "options": [{
      "type": "check",
      "name": "reaction",
      "value": true,
      "label": "Reaction"
    }, {
      "type": "color",
      "name": "color",
      "value": "#C2AAFF",
      "label": "Shape Color"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "The luminal plastid terminal oxidase (PTOX) can act as an electron sink by reducing oxygen (O\u2082) to water (H\u2082O).";
};

/***/ }),

/***/ "./src/components/quenching.js":
/*!*************************************!*\
  !*** ./src/components/quenching.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_quenching_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/quenching.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/quenching.svg");
/**
 * Quenching
 */



const quenching = function () {
  let {
    qe = true,
    qi = true,
    pmf = true,
    position = null
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_quenching_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);

  // Add modifications here
  if (!qe) {
    let group = draw.findOne('#quenching #qe');
    group.opacity(0);
  }
  if (!qi) {
    let group = draw.findOne('#quenching #qi');
    group.opacity(0);
  }
  if (!pmf) {
    let group = draw.findOne('#quenching #pmf');
    group.opacity(0);
  }
  if (position) {
    let move = draw.findOne('#quenching');
    move.transform({
      translateX: position - move.x()
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (quenching);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_quenching_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#quenching');
  return {
    "id": "quenching",
    "headerTitle": "Quenching",
    "show": false,
    "options": [{
      "type": "check",
      "name": "qe",
      "value": true,
      "label": "qE"
    }, {
      "type": "check",
      "name": "qi",
      "value": true,
      "label": "qI"
    }, {
      "type": "check",
      "name": "pmf",
      "value": true,
      "label": "<em>pmf</em>"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "The red, dashed arrows represent a subset of possible quenching mechanisms including qE and qI as well as the induction of qE through lumen acidification.";
};

/***/ }),

/***/ "./src/components/stroma.js":
/*!**********************************!*\
  !*** ./src/components/stroma.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_stroma_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/stroma.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/stroma.svg");
/**
 * Stroma
 */



const stroma = function () {
  let {
    color = '#0070C4',
    label = 'stroma',
    showLabel = true
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_stroma_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let defsGradient = draw.defs().find('#Gradient_1 stop');
  defsGradient.each(stop => {
    if (stop.attr('offset') == 1) stop.attr('stop-color', color);
  });
  let tspan = draw.findOne('#stroma tspan');
  tspan.text(label);
  if (!showLabel) {
    tspan = draw.findOne('#stroma text');
    tspan.opacity(0);
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stroma);
const settings = () => {
  return {
    "id": "stroma",
    "headerTitle": "Stroma",
    "show": true,
    "options": [{
      "type": "text",
      "name": "label",
      "value": "stroma",
      "label": "Label"
    }, {
      "type": "check",
      "name": "showLabel",
      "value": true,
      "label": "Label"
    }, {
      "type": "color",
      "name": "color",
      "value": "#0070C4",
      "label": "Background Gradient"
    }]
  };
};
const legend = () => {
  return "The stroma is the space between the thylakoid membrane and the chloroplast envelope.";
};

/***/ }),

/***/ "./src/components/thylakoidmembrane.js":
/*!*********************************************!*\
  !*** ./src/components/thylakoidmembrane.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_thylakoidmembrane_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/thylakoidmembrane.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/thylakoidmembrane.svg");
/**
 * Thylakoid Membrane
 */



const thylakoidmembrane = function () {
  let {
    color = '#DBDBDB',
    border = true,
    lipidBilayer = true
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_thylakoidmembrane_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let path = draw.findOne('#thylakoidmembrane path');
  path.fill(color);
  if (!border) {
    let borders = draw.find('#thylakoidmembrane path');
    borders.forEach(shape => {
      if (shape.attr('stroke-width') > 0) shape.remove();
    });
  }
  if (lipidBilayer) {
    draw.findOne('#lipid-bilayer').find('path').forEach(path => {
      path.fill(color);
    });
    draw.findOne('#lipid-bilayer').css('mix-blend-mode', 'multiply');
  } else {
    draw.findOne('#lipid-bilayer').remove();
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (thylakoidmembrane);
const settings = () => {
  return {
    "id": "thylakoidmembrane",
    "headerTitle": "Thylakoid Membrane",
    "show": true,
    "options": [{
      "type": "check",
      "name": "border",
      "value": true,
      "label": "Border"
    }, {
      "type": "color",
      "name": "color",
      "value": "#DBDBDB",
      "label": "Background"
    }, {
      "type": "check",
      "name": "lipidBilayer",
      "value": true,
      "label": "Lipid Bilayer"
    }]
  };
};
const legend = () => {
  return "The thylakoid membrane is a system of interconnected membranes organized in grana stacks and stroma lamellae and harboring the complexes of the photosynthetic machinery.";
};

/***/ }),

/***/ "./src/components/vdx.js":
/*!*******************************!*\
  !*** ./src/components/vdx.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   legend: () => (/* binding */ legend),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var _raw_loader_svgs_vdx_svg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!raw-loader!../svgs/vdx.svg */ "./node_modules/raw-loader/dist/cjs.js!./src/svgs/vdx.svg");
/**
 * VDX
 */



const vdx = function () {
  let {
    ze = true,
    vde = true,
    psbs = true,
    pathway = true,
    position = null
  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_vdx_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);

  // Add modifications here
  if (!ze) {
    let shape = draw.findOne('#vdx #ze');
    shape.opacity(0);
  }
  if (!vde) {
    let shape = draw.findOne('#vdx #vde');
    shape.opacity(0);
  }
  if (!psbs) {
    let shape = draw.findOne('#vdx #psbs');
    shape.opacity(0);
  }
  if (!pathway) {
    let shape = draw.findOne('#vdx #pathway');
    shape.opacity(0);
  }
  if (position) {
    let move = draw.findOne('#vdx');
    move.transform({
      translateX: position - move.x()
    });
  }
  return draw.findOne('svg').svg(false);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (vdx);
const settings = () => {
  let draw = (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)();
  draw.svg(_raw_loader_svgs_vdx_svg__WEBPACK_IMPORTED_MODULE_1__["default"]);
  let move = draw.findOne('#vdx');
  return {
    "id": "vdx",
    "headerTitle": "VDX",
    "show": false,
    "options": [{
      "type": "check",
      "name": "ze",
      "value": true,
      "label": "ZE"
    }, {
      "type": "check",
      "name": "vde",
      "value": true,
      "label": "VDE"
    }, {
      "type": "check",
      "name": "psbs",
      "value": true,
      "label": "PsbS"
    }, {
      "type": "check",
      "name": "pathway",
      "value": true,
      "label": "Pathway"
    }, {
      "type": "range",
      "name": "position",
      "value": move.x(),
      "label": "Position",
      "step": "1",
      "min": "0",
      "max": 1400 - move.width()
    }]
  };
};
const legend = () => {
  return "The inducible part of non-photochemical quenching (NPQ), qE, is mediated through PsbS and the xanthophyll cycle. With lumen acidification, the violaxanthin de-epoxidase (VDE) is activated, converting violaxanthin (V) into zeaxanthin (Z) and the sensor PsbS is protonated activating the quenching of excess excitation energy.";
};

/***/ }),

/***/ "./src/constants/presets.js":
/*!**********************************!*\
  !*** ./src/constants/presets.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const presets = {
  'Complexes': [{
    title: 'Photosystem II',
    settings: {
      "photosystem-ii": {
        "show": true,
        "antenna": true,
        "light": true,
        "center": true,
        "cofactors": true,
        "reaction": true,
        "label": true,
        "coreColor": "#b4d66f",
        "lightColor": "#ffec7f",
        "antennaColor": "#8bc300",
        "lightSize": 1,
        "position": 516,
        "fluorescence": false
      },
      "photosystem-i": {
        "light": true,
        "antenna": true,
        "label": true,
        "coreColor": "#0cb04b",
        "lightColor": "#ffec7f",
        "antennaColor": "#008000",
        "lightSize": 1,
        "position": 730,
        "show": false,
        "center": false,
        "cofactors": false
      },
      "cytochrome-b6f": {
        "rieske": true,
        "label": true,
        "coreColor": "#b2c7da",
        "rieskeColor": "#b2c7da",
        "position": 581,
        "show": false,
        "cofactors": false
      },
      "atpsynthase": {
        "reaction": true,
        "label": true,
        "cRingColor": "#e4d3bd",
        "alphaSubunitColor": "#d6c2ad",
        "betaSubunitColor": "#c7b29e",
        "gammaSubunitColor": "#f6e8d7",
        "iSubunitColor": "#c7b29e",
        "iiSubunitColor": "#e4d3bd",
        "position": 999,
        "show": false,
        "subunits": false
      },
      "ion-channels": {
        "kChannel": true,
        "caChannel": true,
        "label": true,
        "position": 1182,
        "show": false,
        "pmf": false
      },
      "plastoquinone": {
        "show": true,
        "label": true,
        "color": "#ffe698",
        "position": 766
      },
      "ferredoxin": {
        "label": true,
        "color": "#a08c79",
        "position": 838,
        "show": false
      },
      "cytochrome-c6": {
        "label": true,
        "color": "#ff2b2b",
        "position": 735,
        "show": false,
        "cofactor": false
      },
      "plastocyanin": {
        "label": true,
        "color": "#5b9bd5",
        "position": 748,
        "show": false,
        "cofactor": false
      },
      "fnr": {
        "reaction": true,
        "label": true,
        "color": "#eecc00",
        "position": 790,
        "show": false
      },
      "ptox": {
        "reaction": true,
        "color": "#c2aaff",
        "position": 476,
        "show": false
      },
      "thylakoidmembrane": {
        "show": true,
        "color": "#dbdbdb"
      },
      "stroma": {
        "show": true,
        "label": "stroma",
        "showLabel": true
      },
      "lumen": {
        "show": true,
        "label": "lumen",
        "showLabel": true,
        "color": "#ffe5e5"
      },
      "electron-flux": {
        "show": true,
        "ps_ii_to_pq": true,
        "position": 694,
        "flow_q_cycle": false,
        "b6f_to_pc": false,
        "pc_to_ps_i": false,
        "ps_i_to_fd": false,
        "fd_to_fnr": false,
        "fd_to_cyt_b6f": false
      },
      "proton-flux": {
        "show": true,
        "h2o_lumen": true,
        "stroma_ps_ii": true,
        "position": 693,
        "ps_ii_atp_synthase": false,
        "atp_synthase": false,
        "stroma_b6f": false,
        "b6f_lumen": false
      },
      "ion-flux": {
        "kChannel": true,
        "caChannel": true,
        "position": 1189,
        "show": false
      },
      "photosystem-ii-repair": {
        "antenna": true,
        "light": true,
        "d1": true,
        "cycle": true,
        "coreColor": "#b4d66f",
        "lightColor": "#ffec7f",
        "antennaColor": "#8bc300",
        "lightSize": 1,
        "position": 110,
        "show": false
      },
      "vdx": {
        "ze": true,
        "vde": true,
        "psbs": true,
        "pathway": true,
        "position": 38,
        "show": false
      },
      "regulation": {
        "qe": true,
        "qi": true,
        "pmf": true,
        "position": 74,
        "show": false
      }
    }
  }, {
    title: 'Cytochrome b₆f',
    settings: {
      "photosystem-ii": {
        "antenna": true,
        "light": true,
        "reaction": true,
        "label": true,
        "coreColor": "#b4d66f",
        "lightColor": "#ffec7f",
        "antennaColor": "#8bc300",
        "lightSize": 1,
        "position": 237,
        "show": false,
        "fluorescence": false,
        "center": false,
        "cofactors": false
      },
      "photosystem-i": {
        "light": true,
        "antenna": true,
        "label": true,
        "coreColor": "#0cb04b",
        "lightColor": "#ffec7f",
        "antennaColor": "#008000",
        "lightSize": 1,
        "position": 730,
        "show": false,
        "center": false,
        "cofactors": false
      },
      "cytochrome-b6f": {
        "show": true,
        "cofactors": true,
        "rieske": true,
        "label": true,
        "coreColor": "#b2c7da",
        "rieskeColor": "#b2c7da",
        "position": 623
      },
      "atpsynthase": {
        "reaction": true,
        "label": true,
        "cRingColor": "#e4d3bd",
        "alphaSubunitColor": "#d6c2ad",
        "betaSubunitColor": "#c7b29e",
        "gammaSubunitColor": "#f6e8d7",
        "iSubunitColor": "#c7b29e",
        "iiSubunitColor": "#e4d3bd",
        "position": 999,
        "show": false,
        "subunits": false
      },
      "ion-channels": {
        "kChannel": true,
        "caChannel": true,
        "label": true,
        "position": 1182,
        "show": false,
        "pmf": false
      },
      "plastoquinone": {
        "show": true,
        "label": true,
        "color": "#ffe698",
        "position": 518
      },
      "ferredoxin": {
        "label": true,
        "color": "#a08c79",
        "position": 838,
        "show": false
      },
      "cytochrome-c6": {
        "label": true,
        "color": "#ff2b2b",
        "position": 735,
        "show": false,
        "cofactor": false
      },
      "plastocyanin": {
        "show": true,
        "label": true,
        "color": "#5b9bd5",
        "position": 796,
        "cofactor": false
      },
      "fnr": {
        "reaction": true,
        "label": true,
        "color": "#eecc00",
        "position": 790,
        "show": false
      },
      "ptox": {
        "reaction": true,
        "color": "#c2aaff",
        "position": 476,
        "show": false
      },
      "thylakoidmembrane": {
        "show": true,
        "color": "#dbdbdb"
      },
      "stroma": {
        "show": true,
        "label": "stroma",
        "showLabel": true
      },
      "lumen": {
        "show": true,
        "label": "lumen",
        "showLabel": true,
        "color": "#ffe5e5"
      },
      "electron-flux": {
        "show": true,
        "flow_q_cycle": true,
        "b6f_to_pc": true,
        "position": 455,
        "ps_ii_to_pq": false,
        "pc_to_ps_i": false,
        "ps_i_to_fd": false,
        "fd_to_fnr": false,
        "fd_to_cyt_b6f": false
      },
      "proton-flux": {
        "show": true,
        "stroma_b6f": true,
        "b6f_lumen": true,
        "position": 442,
        "h2o_lumen": false,
        "ps_ii_atp_synthase": false,
        "atp_synthase": false,
        "stroma_ps_ii": false
      },
      "ion-flux": {
        "kChannel": true,
        "caChannel": true,
        "position": 1189,
        "show": false
      },
      "photosystem-ii-repair": {
        "antenna": true,
        "light": true,
        "d1": true,
        "cycle": true,
        "coreColor": "#b4d66f",
        "lightColor": "#ffec7f",
        "antennaColor": "#8bc300",
        "lightSize": 1,
        "position": 110,
        "show": false
      },
      "vdx": {
        "ze": true,
        "vde": true,
        "psbs": true,
        "pathway": true,
        "position": 38,
        "show": false
      },
      "regulation": {
        "qe": true,
        "qi": true,
        "pmf": true,
        "position": 74,
        "show": false
      }
    }
  }, {
    title: 'Photosystem I',
    settings: {
      "photosystem-ii": {
        "antenna": true,
        "light": true,
        "reaction": true,
        "label": true,
        "coreColor": "#b4d66f",
        "lightColor": "#ffec7f",
        "antennaColor": "#8bc300",
        "lightSize": 1,
        "position": 237,
        "show": false,
        "fluorescence": false,
        "center": false,
        "cofactors": false
      },
      "photosystem-i": {
        "show": true,
        "center": true,
        "cofactors": true,
        "light": true,
        "antenna": true,
        "label": true,
        "coreColor": "#0cb04b",
        "lightColor": "#ffec7f",
        "antennaColor": "#008000",
        "lightSize": 1,
        "position": 618
      },
      "cytochrome-b6f": {
        "rieske": true,
        "label": true,
        "coreColor": "#b2c7da",
        "rieskeColor": "#b2c7da",
        "position": 581,
        "show": false,
        "cofactors": false
      },
      "atpsynthase": {
        "reaction": true,
        "label": true,
        "cRingColor": "#e4d3bd",
        "alphaSubunitColor": "#d6c2ad",
        "betaSubunitColor": "#c7b29e",
        "gammaSubunitColor": "#f6e8d7",
        "iSubunitColor": "#c7b29e",
        "iiSubunitColor": "#e4d3bd",
        "position": 999,
        "show": false,
        "subunits": false
      },
      "ion-channels": {
        "kChannel": true,
        "caChannel": true,
        "label": true,
        "position": 1182,
        "show": false,
        "pmf": false
      },
      "plastoquinone": {
        "label": true,
        "color": "#ffe698",
        "position": 484,
        "show": false
      },
      "ferredoxin": {
        "show": true,
        "label": true,
        "color": "#a08c79",
        "position": 722
      },
      "cytochrome-c6": {
        "label": true,
        "color": "#ff2b2b",
        "position": 735,
        "show": false,
        "cofactor": false
      },
      "plastocyanin": {
        "show": true,
        "label": true,
        "color": "#5b9bd5",
        "position": 628,
        "cofactor": false
      },
      "fnr": {
        "show": true,
        "reaction": true,
        "label": true,
        "color": "#eecc00",
        "position": 674
      },
      "ptox": {
        "reaction": true,
        "color": "#c2aaff",
        "position": 476,
        "show": false
      },
      "thylakoidmembrane": {
        "show": true,
        "color": "#dbdbdb"
      },
      "stroma": {
        "show": true,
        "label": "stroma",
        "showLabel": true
      },
      "lumen": {
        "show": true,
        "label": "lumen",
        "showLabel": true,
        "color": "#ffe5e5"
      },
      "electron-flux": {
        "show": true,
        "pc_to_ps_i": true,
        "ps_i_to_fd": true,
        "fd_to_fnr": true,
        "position": 300,
        "ps_ii_to_pq": false,
        "flow_q_cycle": false,
        "b6f_to_pc": false,
        "fd_to_cyt_b6f": false
      },
      "proton-flux": {
        "h2o_lumen": true,
        "ps_ii_atp_synthase": true,
        "atp_synthase": true,
        "stroma_ps_ii": true,
        "stroma_b6f": true,
        "b6f_lumen": true,
        "position": 407,
        "show": false
      },
      "ion-flux": {
        "kChannel": true,
        "caChannel": true,
        "position": 1189,
        "show": false
      },
      "photosystem-ii-repair": {
        "antenna": true,
        "light": true,
        "d1": true,
        "cycle": true,
        "coreColor": "#b4d66f",
        "lightColor": "#ffec7f",
        "antennaColor": "#8bc300",
        "lightSize": 1,
        "position": 110,
        "show": false
      },
      "vdx": {
        "ze": true,
        "vde": true,
        "psbs": true,
        "pathway": true,
        "position": 38,
        "show": false
      },
      "regulation": {
        "qe": true,
        "qi": true,
        "pmf": true,
        "position": 74,
        "show": false
      }
    }
  }, {
    title: 'ATP Synthase',
    settings: {
      "photosystem-ii": {
        "antenna": true,
        "light": true,
        "reaction": true,
        "label": true,
        "coreColor": "#b4d66f",
        "lightColor": "#ffec7f",
        "antennaColor": "#8bc300",
        "lightSize": 1,
        "position": 237,
        "show": false,
        "fluorescence": false,
        "center": false,
        "cofactors": false
      },
      "photosystem-i": {
        "light": true,
        "antenna": true,
        "label": true,
        "coreColor": "#0cb04b",
        "lightColor": "#ffec7f",
        "antennaColor": "#008000",
        "lightSize": 1,
        "position": 730,
        "show": false,
        "center": false,
        "cofactors": false
      },
      "cytochrome-b6f": {
        "rieske": true,
        "label": true,
        "coreColor": "#b2c7da",
        "rieskeColor": "#b2c7da",
        "position": 581,
        "show": false,
        "cofactors": false
      },
      "atpsynthase": {
        "show": true,
        "subunits": true,
        "reaction": true,
        "label": true,
        "cRingColor": "#e4d3bd",
        "alphaSubunitColor": "#d6c2ad",
        "betaSubunitColor": "#c7b29e",
        "gammaSubunitColor": "#f6e8d7",
        "iSubunitColor": "#c7b29e",
        "iiSubunitColor": "#e4d3bd",
        "position": 623
      },
      "ion-channels": {
        "show": true,
        "pmf": true,
        "position": 679,
        "kChannel": false,
        "caChannel": false,
        "label": false
      },
      "plastoquinone": {
        "label": true,
        "color": "#ffe698",
        "position": 484,
        "show": false
      },
      "ferredoxin": {
        "label": true,
        "color": "#a08c79",
        "position": 838,
        "show": false
      },
      "cytochrome-c6": {
        "label": true,
        "color": "#ff2b2b",
        "position": 735,
        "show": false,
        "cofactor": false
      },
      "plastocyanin": {
        "label": true,
        "color": "#5b9bd5",
        "position": 748,
        "show": false,
        "cofactor": false
      },
      "fnr": {
        "reaction": true,
        "label": true,
        "color": "#eecc00",
        "position": 790,
        "show": false
      },
      "ptox": {
        "reaction": true,
        "color": "#c2aaff",
        "position": 476,
        "show": false
      },
      "thylakoidmembrane": {
        "show": true,
        "color": "#dbdbdb"
      },
      "stroma": {
        "show": true,
        "label": "stroma",
        "showLabel": true
      },
      "lumen": {
        "show": true,
        "label": "lumen",
        "showLabel": true,
        "color": "#ffe5e5"
      },
      "electron-flux": {
        "ps_ii_to_pq": true,
        "flow_q_cycle": true,
        "b6f_to_pc": true,
        "pc_to_ps_i": true,
        "ps_i_to_fd": true,
        "fd_to_fnr": true,
        "fd_to_cyt_b6f": true,
        "position": 414,
        "show": false
      },
      "proton-flux": {
        "show": true,
        "atp_synthase": true,
        "position": 31,
        "h2o_lumen": false,
        "ps_ii_atp_synthase": false,
        "stroma_ps_ii": false,
        "stroma_b6f": false,
        "b6f_lumen": false
      },
      "ion-flux": {
        "kChannel": true,
        "caChannel": true,
        "position": 1189,
        "show": false
      },
      "photosystem-ii-repair": {
        "antenna": true,
        "light": true,
        "d1": true,
        "cycle": true,
        "coreColor": "#b4d66f",
        "lightColor": "#ffec7f",
        "antennaColor": "#8bc300",
        "lightSize": 1,
        "position": 110,
        "show": false
      },
      "vdx": {
        "ze": true,
        "vde": true,
        "psbs": true,
        "pathway": true,
        "position": 38,
        "show": false
      },
      "regulation": {
        "qe": true,
        "qi": true,
        "pmf": true,
        "position": 74,
        "show": false
      }
    }
  }],
  'Miscellaneous': [{
    title: "Show me Everything!",
    settings: {
      "photosystem-ii": {
        "show": true,
        "antenna": true,
        "light": true,
        "center": true,
        "cofactors": true,
        "reaction": true,
        "label": true,
        "coreColor": "#b4d66f",
        "lightColor": "#ffec7f",
        "antennaColor": "#8bc300",
        "lightSize": 1,
        "position": 237,
        "fluorescence": false
      },
      "photosystem-i": {
        "show": true,
        "center": true,
        "cofactors": true,
        "light": true,
        "antenna": true,
        "label": true,
        "coreColor": "#0cb04b",
        "lightColor": "#ffec7f",
        "antennaColor": "#008000",
        "lightSize": 1,
        "position": 730
      },
      "cytochrome-b6f": {
        "show": true,
        "cofactors": true,
        "rieske": true,
        "label": true,
        "coreColor": "#b2c7da",
        "rieskeColor": "#b2c7da",
        "position": 581
      },
      "atpsynthase": {
        "show": true,
        "subunits": true,
        "reaction": true,
        "label": true,
        "cRingColor": "#e4d3bd",
        "alphaSubunitColor": "#d6c2ad",
        "betaSubunitColor": "#c7b29e",
        "gammaSubunitColor": "#f6e8d7",
        "iSubunitColor": "#c7b29e",
        "iiSubunitColor": "#e4d3bd",
        "position": 999
      },
      "ion-channels": {
        "show": true,
        "kChannel": true,
        "caChannel": true,
        "label": true,
        "pmf": true,
        "position": 1182
      },
      "plastoquinone": {
        "show": true,
        "label": true,
        "color": "#ffe698",
        "position": 484
      },
      "ferredoxin": {
        "show": true,
        "label": true,
        "color": "#a08c79",
        "position": 838
      },
      "cytochrome-c6": {
        "label": true,
        "color": "#ff2b2b",
        "position": 735,
        "show": false,
        "cofactor": false
      },
      "plastocyanin": {
        "show": true,
        "label": true,
        "cofactor": true,
        "color": "#5b9bd5",
        "position": 748
      },
      "fnr": {
        "show": true,
        "reaction": true,
        "label": true,
        "color": "#eecc00",
        "position": 790
      },
      "ptox": {
        "show": true,
        "reaction": true,
        "color": "#c2aaff",
        "position": 476
      },
      "electron-flux": {
        "show": true,
        "ps_ii_to_pq": true,
        "flow_q_cycle": true,
        "b6f_to_pc": true,
        "pc_to_ps_i": true,
        "ps_i_to_fd": true,
        "fd_to_fnr": true,
        "fd_to_cyt_b6f": true,
        "position": 414
      },
      "proton-flux": {
        "show": true,
        "h2o_lumen": true,
        "ps_ii_atp_synthase": true,
        "atp_synthase": true,
        "stroma_ps_ii": true,
        "stroma_b6f": true,
        "b6f_lumen": true,
        "position": 407
      },
      "ion-flux": {
        "show": true,
        "kChannel": true,
        "caChannel": true,
        "position": 1189
      },
      "photosystem-ii-repair": {
        "show": true,
        "antenna": true,
        "light": true,
        "d1": true,
        "cycle": true,
        "coreColor": "#b4d66f",
        "lightColor": "#ffec7f",
        "antennaColor": "#8bc300",
        "lightSize": 1,
        "position": 110
      },
      "vdx": {
        "show": true,
        "ze": true,
        "vde": true,
        "psbs": true,
        "pathway": true,
        "position": 38
      },
      "quenching": {
        "show": true,
        "qe": true,
        "qi": true,
        "pmf": true,
        "position": 74
      },
      "thylakoidmembrane": {
        "show": true,
        "border": true,
        "color": "#dbdbdb"
      },
      "stroma": {
        "show": true,
        "label": "stroma",
        "showLabel": true,
        "color": "#0070c4"
      },
      "lumen": {
        "show": true,
        "label": "lumen",
        "showLabel": true,
        "color": "#ffe5e5"
      }
    }
  }]
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (presets);

/***/ }),

/***/ "./src/constants/references.js":
/*!*************************************!*\
  !*** ./src/constants/references.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const references = ["Kramer, D. M., Avenson, T. J. and Edwards, G. E. (2004) Dynamic flexibility in the light reactions of photosynthesis governed by both electron and proton transfer reactions. Trends Plant Sci 9, 349-357."];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (references);

/***/ }),

/***/ "./src/constants/settings.js":
/*!***********************************!*\
  !*** ./src/constants/settings.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   layers: () => (/* binding */ layers),
/* harmony export */   menu: () => (/* binding */ menu)
/* harmony export */ });
/* harmony import */ var _components_atp_synthase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/atp-synthase */ "./src/components/atp-synthase.js");
/* harmony import */ var _components_cytochrome_b6f__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/cytochrome-b6f */ "./src/components/cytochrome-b6f.js");
/* harmony import */ var _components_cytochrome_c6__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/cytochrome-c6 */ "./src/components/cytochrome-c6.js");
/* harmony import */ var _components_electron_flux__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/electron-flux */ "./src/components/electron-flux.js");
/* harmony import */ var _components_ferredoxin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/ferredoxin */ "./src/components/ferredoxin.js");
/* harmony import */ var _components_fnr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/fnr */ "./src/components/fnr.js");
/* harmony import */ var _components_ion_channels__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/ion-channels */ "./src/components/ion-channels.js");
/* harmony import */ var _components_ion_flux__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/ion-flux */ "./src/components/ion-flux.js");
/* harmony import */ var _components_lumen__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../components/lumen */ "./src/components/lumen.js");
/* harmony import */ var _components_photosystem_i__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../components/photosystem-i */ "./src/components/photosystem-i.js");
/* harmony import */ var _components_photosystem_ii_repair__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../components/photosystem-ii-repair */ "./src/components/photosystem-ii-repair.js");
/* harmony import */ var _components_photosystem_ii__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../components/photosystem-ii */ "./src/components/photosystem-ii.js");
/* harmony import */ var _components_plastocyanin__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../components/plastocyanin */ "./src/components/plastocyanin.js");
/* harmony import */ var _components_plastoquinone__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/plastoquinone */ "./src/components/plastoquinone.js");
/* harmony import */ var _components_proton_flux__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../components/proton-flux */ "./src/components/proton-flux.js");
/* harmony import */ var _components_ptox__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../components/ptox */ "./src/components/ptox.js");
/* harmony import */ var _components_quenching__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../components/quenching */ "./src/components/quenching.js");
/* harmony import */ var _components_stroma__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../components/stroma */ "./src/components/stroma.js");
/* harmony import */ var _components_thylakoidmembrane__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../components/thylakoidmembrane */ "./src/components/thylakoidmembrane.js");
/* harmony import */ var _components_vdx__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../components/vdx */ "./src/components/vdx.js");




















const settings = [_components_atp_synthase__WEBPACK_IMPORTED_MODULE_0__.settings(), _components_thylakoidmembrane__WEBPACK_IMPORTED_MODULE_18__.settings(), _components_cytochrome_b6f__WEBPACK_IMPORTED_MODULE_1__.settings(), _components_cytochrome_c6__WEBPACK_IMPORTED_MODULE_2__.settings(), _components_electron_flux__WEBPACK_IMPORTED_MODULE_3__.settings(), _components_ferredoxin__WEBPACK_IMPORTED_MODULE_4__.settings(), _components_fnr__WEBPACK_IMPORTED_MODULE_5__.settings(), _components_ion_channels__WEBPACK_IMPORTED_MODULE_6__.settings(), _components_ion_flux__WEBPACK_IMPORTED_MODULE_7__.settings(), _components_lumen__WEBPACK_IMPORTED_MODULE_8__.settings(), _components_photosystem_i__WEBPACK_IMPORTED_MODULE_9__.settings(), _components_photosystem_ii_repair__WEBPACK_IMPORTED_MODULE_10__.settings(), _components_photosystem_ii__WEBPACK_IMPORTED_MODULE_11__.settings(), _components_plastocyanin__WEBPACK_IMPORTED_MODULE_12__.settings(), _components_plastoquinone__WEBPACK_IMPORTED_MODULE_13__.settings(), _components_proton_flux__WEBPACK_IMPORTED_MODULE_14__.settings(), _components_ptox__WEBPACK_IMPORTED_MODULE_15__.settings(), _components_quenching__WEBPACK_IMPORTED_MODULE_16__.settings(), _components_stroma__WEBPACK_IMPORTED_MODULE_17__.settings(), _components_thylakoidmembrane__WEBPACK_IMPORTED_MODULE_18__.settings(), _components_vdx__WEBPACK_IMPORTED_MODULE_19__.settings()];
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (settings);
const layers = ["stroma", "lumen", "thylakoidmembrane", "electron-flux", "proton-flux", "quenching", "photosystem-ii", "photosystem-ii-repair", "plastoquinone", "cytochrome-b6f", "cytochrome-c6", "plastocyanin", "photosystem-i", "atpsynthase", "vdx", "ferredoxin", "fnr", "ptox", "ion-channels", "ion-flux"];
const menu = {
  "Protein Complexes": ["photosystem-ii", "photosystem-i", "cytochrome-b6f", "atpsynthase", "ion-channels"],
  "Electron Carriers": ["plastoquinone", "ferredoxin", "cytochrome-c6", "plastocyanin", "fnr", "ptox"],
  "Fluxes": ["electron-flux", "proton-flux", "ion-flux"],
  "Regulation": ["photosystem-ii-repair", "vdx", "quenching"],
  "Thylakoid": ["thylakoidmembrane", "stroma", "lumen"]
};

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Photosynthesis)
/* harmony export */ });
/* harmony import */ var _svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @svgdotjs/svg.js */ "./node_modules/@svgdotjs/svg.js/src/main.js");
/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/get */ "./node_modules/lodash/get.js");
/* harmony import */ var lodash_get__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_get__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isEqual */ "./node_modules/lodash/isEqual.js");
/* harmony import */ var lodash_isEqual__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isEqual__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/isPlainObject */ "./node_modules/lodash/isPlainObject.js");
/* harmony import */ var lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/merge */ "./node_modules/lodash/merge.js");
/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_merge__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js");
/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _constants_settings__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constants/settings */ "./src/constants/settings.js");
/* harmony import */ var _constants_references__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constants/references */ "./src/constants/references.js");
/* harmony import */ var _constants_presets__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./constants/presets */ "./src/constants/presets.js");
/* harmony import */ var _components_thylakoidmembrane__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/thylakoidmembrane */ "./src/components/thylakoidmembrane.js");
/* harmony import */ var _components_lumen__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/lumen */ "./src/components/lumen.js");
/* harmony import */ var _components_stroma__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/stroma */ "./src/components/stroma.js");
/* harmony import */ var _components_photosystem_ii__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/photosystem-ii */ "./src/components/photosystem-ii.js");
/* harmony import */ var _components_photosystem_ii_repair__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/photosystem-ii-repair */ "./src/components/photosystem-ii-repair.js");
/* harmony import */ var _components_cytochrome_b6f__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/cytochrome-b6f */ "./src/components/cytochrome-b6f.js");
/* harmony import */ var _components_plastocyanin__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./components/plastocyanin */ "./src/components/plastocyanin.js");
/* harmony import */ var _components_photosystem_i__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./components/photosystem-i */ "./src/components/photosystem-i.js");
/* harmony import */ var _components_atp_synthase__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./components/atp-synthase */ "./src/components/atp-synthase.js");
/* harmony import */ var _components_vdx__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./components/vdx */ "./src/components/vdx.js");
/* harmony import */ var _components_cytochrome_c6__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./components/cytochrome-c6 */ "./src/components/cytochrome-c6.js");
/* harmony import */ var _components_plastoquinone__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./components/plastoquinone */ "./src/components/plastoquinone.js");
/* harmony import */ var _components_ferredoxin__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./components/ferredoxin */ "./src/components/ferredoxin.js");
/* harmony import */ var _components_fnr__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./components/fnr */ "./src/components/fnr.js");
/* harmony import */ var _components_electron_flux__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./components/electron-flux */ "./src/components/electron-flux.js");
/* harmony import */ var _components_proton_flux__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./components/proton-flux */ "./src/components/proton-flux.js");
/* harmony import */ var _components_ptox__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./components/ptox */ "./src/components/ptox.js");
/* harmony import */ var _components_ion_channels__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./components/ion-channels */ "./src/components/ion-channels.js");
/* harmony import */ var _components_ion_flux__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./components/ion-flux */ "./src/components/ion-flux.js");
/* harmony import */ var _components_quenching__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./components/quenching */ "./src/components/quenching.js");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classPrivateMethodInitSpec(e, a) { _checkPrivateRedeclaration(e, a), a.add(e); }
function _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }
function _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError("Cannot initialize the same private elements twice on an object"); }
function _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }
function _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }
function _assertClassBrand(e, t, n) { if ("function" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError("Private element is not present on this object"); }





























var _menu = /*#__PURE__*/new WeakMap();
var _layers = /*#__PURE__*/new WeakMap();
var _settings = /*#__PURE__*/new WeakMap();
var _initialSettings = /*#__PURE__*/new WeakMap();
var _componentSettings = /*#__PURE__*/new WeakMap();
var _presets = /*#__PURE__*/new WeakMap();
var _draw = /*#__PURE__*/new WeakMap();
var _Photosynthesis_brand = /*#__PURE__*/new WeakSet();
class Photosynthesis {
  constructor(target) {
    let {
      width = 'auto',
      height = 'auto',
      className,
      style: _style,
      autoInit = true
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classPrivateMethodInitSpec(this, _Photosynthesis_brand);
    _classPrivateFieldInitSpec(this, _menu, void 0);
    _classPrivateFieldInitSpec(this, _layers, void 0);
    _classPrivateFieldInitSpec(this, _settings, void 0);
    _classPrivateFieldInitSpec(this, _initialSettings, void 0);
    _classPrivateFieldInitSpec(this, _componentSettings, void 0);
    _classPrivateFieldInitSpec(this, _presets, void 0);
    _classPrivateFieldInitSpec(this, _draw, void 0);
    this.target = target || null;
    this.width = width == 'auto' ? 1400 : width;
    this.height = height == 'auto' ? 600 : height;
    this.className = className || null;
    this.style = _style || null;
    _classPrivateFieldSet(_componentSettings, this, lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_5___default()(_constants_settings__WEBPACK_IMPORTED_MODULE_6__["default"]));
    _classPrivateFieldSet(_initialSettings, this, _assertClassBrand(_Photosynthesis_brand, this, _settingsJSON).call(this));
    _classPrivateFieldSet(_settings, this, lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_5___default()(_classPrivateFieldGet(_initialSettings, this)));
    _classPrivateFieldSet(_menu, this, _constants_settings__WEBPACK_IMPORTED_MODULE_6__.menu || {});
    _classPrivateFieldSet(_layers, this, _constants_settings__WEBPACK_IMPORTED_MODULE_6__.layers || []);
    _classPrivateFieldSet(_presets, this, _constants_presets__WEBPACK_IMPORTED_MODULE_8__["default"]);
    _classPrivateFieldSet(_draw, this, null);
    this.references = _constants_references__WEBPACK_IMPORTED_MODULE_7__["default"];
    autoInit ? _assertClassBrand(_Photosynthesis_brand, this, _buildFigure).call(this) : null; // Call build immidiately to show an empty 
  }
  build() {
    _assertClassBrand(_Photosynthesis_brand, this, _buildFigure).call(this);
    return _classPrivateFieldGet(_draw, this).svg();
  }
  update() {
    _assertClassBrand(_Photosynthesis_brand, this, _buildFigure).call(this);
  }
  get settingsSave() {
    const current = this.settings;
    const initial = _classPrivateFieldGet(_initialSettings, this);
    return _assertClassBrand(_Photosynthesis_brand, this, _getNestedChanges).call(this, current, initial);
  }
  set settings(obj) {
    _classPrivateFieldSet(_settings, this, lodash_merge__WEBPACK_IMPORTED_MODULE_4___default()(_classPrivateFieldGet(_settings, this), obj));
  }
  get settings() {
    return _classPrivateFieldGet(_settings, this);
  }
  reset() {
    _classPrivateFieldSet(_settings, this, lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_5___default()(_classPrivateFieldGet(_initialSettings, this)));
  }
  settingsHTML() {
    let elCount = 0;
    let html = '<form id="settingsform">';
    for (let header in _classPrivateFieldGet(_menu, this)) {
      let uid = "ps-" + crypto.randomUUID();
      let accordionid = "ps-" + crypto.randomUUID();
      html += "<div style=\"cursor:pointer;\" class=\"small fw-bold mt-3 mb-2 d-flex justify-content-between align-items-center\" data-bs-toggle=\"collapse\" data-bs-target=\"#".concat(uid, "\" aria-controls=\"Toggle ").concat(header, "\">\n        ").concat(header, "\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi bi-chevron-expand me-1\" viewBox=\"0 0 16 16\">\n          <path fill-rule=\"evenodd\" d=\"M3.646 9.146a.5.5 0 0 1 .708 0L8 12.793l3.646-3.647a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 0-.708zm0-2.292a.5.5 0 0 0 .708 0L8 3.207l3.646 3.647a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 0 0 0 .708z\"/>\n        </svg>\n      </div>");
      html += "<div class=\"collapse ".concat(!elCount ? "show" : "", "\" id=\"").concat(uid, "\" data-bs-parent=\"#settingsform\">");
      // data-bs-parent="#selector"
      html += "<div class=\"accordion\" id=\"".concat(accordionid, "\">");
      for (let i in _classPrivateFieldGet(_menu, this)[header]) {
        let idx = _classPrivateFieldGet(_componentSettings, this).findIndex(itm => itm.id == _classPrivateFieldGet(_menu, this)[header][i]);
        if (idx == -1) continue;
        if (_classPrivateFieldGet(_componentSettings, this)[idx].show === undefined && _classPrivateFieldGet(_componentSettings, this)[idx].options === undefined) continue;
        html += "<div class=\"accordion-item\">\n          <h2 class=\"accordion-header\" id=\"heading".concat(idx, "\">\n            <button class=\"accordion-button collapsed ps-5\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapse").concat(idx, "\" aria-expanded=\"").concat(elCount === 0 ? 'true' : 'false', "\" aria-controls=\"collapse").concat(idx, "\">\n            ").concat(_classPrivateFieldGet(_componentSettings, this)[idx].headerTitle, "\n            </button>\n            ").concat(_assertClassBrand(_Photosynthesis_brand, this, _elementInputSwitch).call(this, [_classPrivateFieldGet(_componentSettings, this)[idx].id, 'show'].join('.'), {
          value: _classPrivateFieldGet(_componentSettings, this)[idx].show,
          label: '',
          disabled: _classPrivateFieldGet(_componentSettings, this)[idx].disabled || false
        }), "\n          </h2>\n          <div id=\"collapse").concat(idx, "\" class=\"accordion-collapse collapse\" aria-labelledby=\"heading").concat(idx, "\" data-bs-parent=\"#").concat(accordionid, "\">\n            <div class=\"accordion-body\">");
        if (_classPrivateFieldGet(_componentSettings, this)[idx].options !== undefined && _classPrivateFieldGet(_componentSettings, this)[idx].options.length > 0) {
          for (let i in _classPrivateFieldGet(_componentSettings, this)[idx].options) {
            let option = _classPrivateFieldGet(_componentSettings, this)[idx].options[i];
            let name = [_classPrivateFieldGet(_componentSettings, this)[idx].id, option.name].join('.');
            switch (option.type) {
              case 'color':
                html += _assertClassBrand(_Photosynthesis_brand, this, _elementInputColor).call(this, name, _objectSpread({}, option));
                break;
              case 'text':
                html += _assertClassBrand(_Photosynthesis_brand, this, _elementInputText).call(this, name, _objectSpread({}, option));
                break;
              case 'check':
                html += _assertClassBrand(_Photosynthesis_brand, this, _elementInputCheck).call(this, name, _objectSpread({}, option));
                break;
              case 'range':
                html += _assertClassBrand(_Photosynthesis_brand, this, _elementInputRange).call(this, name, _objectSpread({}, option));
                break;
              case 'separator':
                html += "<div class=\"separator\"><hr></div>";
                break;
            }
          }
        } else {
          html += "<div class=\"form-text\">No settings available</div>";
        }
        html += "</div>\n          </div>\n        </div>";
        elCount++;
      }
      html += "</div>";
      html += "</div>";
    }
    html += '</form>';
    return html;
  }
  applyPreset(id) {
    var _get;
    _classPrivateFieldSet(_settings, this, ((_get = lodash_get__WEBPACK_IMPORTED_MODULE_1___default()(_classPrivateFieldGet(_presets, this), id)) === null || _get === void 0 ? void 0 : _get.settings) || {});
  }
  get presets() {
    return _classPrivateFieldGet(_presets, this);
  }
  presetsHTML() {
    let html = "<select class=\"form-select\" aria-label=\"Default select example\" id=\"presets-selector\">";
    html += "<option value=\"-1\" disabled selected>Select&hellip;</option>";
    for (let group in this.presets) {
      html += "<optgroup label=\"".concat(group, "\">");
      for (let i in this.presets[group]) html += "<option value=\"".concat(group, "[").concat(i, "]\">").concat(this.presets[group][i].title, "</option>");
      html += "</optgroup>";
    }
    html += "</select>";
    return html;
  }
  destroy() {
    _classPrivateFieldGet(_draw, this).remove();
  }
  referencesHTML() {
    let html = '<ol class="list-style ps-3 small">';
    for (let i in this.references) {
      html += "<li>".concat(this.references[i], "</li>");
    }
    html += '</ol>';
    return html;
  }
  legend() {
    let contentBlocks = [];
    for (let i in _classPrivateFieldGet(_layers, this)) {
      let key = _classPrivateFieldGet(_layers, this)[i];
      if (this.settings[key] && this.settings[key].show) {
        switch (key) {
          case 'stroma':
            contentBlocks.push((0,_components_stroma__WEBPACK_IMPORTED_MODULE_11__.legend)());
            break;
          case 'thylakoidmembrane':
            contentBlocks.push((0,_components_thylakoidmembrane__WEBPACK_IMPORTED_MODULE_9__.legend)());
            break;
          case 'lumen':
            contentBlocks.push((0,_components_lumen__WEBPACK_IMPORTED_MODULE_10__.legend)());
            break;
          case 'plastoquinone':
            contentBlocks.push((0,_components_plastoquinone__WEBPACK_IMPORTED_MODULE_20__.legend)());
            break;
          case 'plastocyanin':
            contentBlocks.push((0,_components_plastocyanin__WEBPACK_IMPORTED_MODULE_15__.legend)());
            break;
          case 'cytochrome-c6':
            contentBlocks.push((0,_components_cytochrome_c6__WEBPACK_IMPORTED_MODULE_19__.legend)());
            break;
          case 'photosystem-i':
            contentBlocks.push((0,_components_photosystem_i__WEBPACK_IMPORTED_MODULE_16__.legend)());
            break;
          case 'atpsynthase':
            contentBlocks.push((0,_components_atp_synthase__WEBPACK_IMPORTED_MODULE_17__.legend)());
            break;
          case 'photosystem-ii':
            contentBlocks.push((0,_components_photosystem_ii__WEBPACK_IMPORTED_MODULE_12__.legend)());
            break;
          case 'photosystem-ii-repair':
            contentBlocks.push((0,_components_photosystem_ii_repair__WEBPACK_IMPORTED_MODULE_13__.legend)());
            break;
          case 'cytochrome-b6f':
            contentBlocks.push((0,_components_cytochrome_b6f__WEBPACK_IMPORTED_MODULE_14__.legend)());
            break;
          case 'vdx':
            contentBlocks.push((0,_components_vdx__WEBPACK_IMPORTED_MODULE_18__.legend)());
            break;
          case 'ferredoxin':
            contentBlocks.push((0,_components_ferredoxin__WEBPACK_IMPORTED_MODULE_21__.legend)());
            break;
          case 'fnr':
            contentBlocks.push((0,_components_fnr__WEBPACK_IMPORTED_MODULE_22__.legend)());
            break;
          case 'electron-flux':
            contentBlocks.push((0,_components_electron_flux__WEBPACK_IMPORTED_MODULE_23__.legend)());
            break;
          case 'proton-flux':
            contentBlocks.push((0,_components_proton_flux__WEBPACK_IMPORTED_MODULE_24__.legend)());
            break;
          case 'ptox':
            contentBlocks.push((0,_components_ptox__WEBPACK_IMPORTED_MODULE_25__.legend)());
            break;
          case 'ion-channels':
            contentBlocks.push((0,_components_ion_channels__WEBPACK_IMPORTED_MODULE_26__.legend)());
            break;
          case 'ion-flux':
            contentBlocks.push((0,_components_ion_flux__WEBPACK_IMPORTED_MODULE_27__.legend)());
            break;
          case 'quenching':
            contentBlocks.push((0,_components_quenching__WEBPACK_IMPORTED_MODULE_28__.legend)());
            break;
        }
      }
    }
    return "<em>The photosynthetic machinery in higher plants and most green algae</em>.\n    ".concat(contentBlocks.join(' '));
  }
}
function _buildFigure() {
  // Init the SVG
  if (!_classPrivateFieldGet(_draw, this)) {
    // Initial dimensions
    if (this.target && typeof this.target === 'string') {
      _classPrivateFieldSet(_draw, this, (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)().addTo(this.target).size(this.width, this.height));
      // Add class
      if (this.className) _classPrivateFieldGet(_draw, this).addClass('calendar-heatmap');
      // Add css styles
      if (this.style) _classPrivateFieldGet(_draw, this).css(style);
    } else _classPrivateFieldSet(_draw, this, (0,_svgdotjs_svg_js__WEBPACK_IMPORTED_MODULE_0__.SVG)().size(this.width, this.height));

    // Set viewbox
    _classPrivateFieldGet(_draw, this).viewbox(0, 0, this.width, this.height);
  }
  // Clear content before the next redraw
  _classPrivateFieldGet(_draw, this).clear();

  // Apply options
  for (let i in _classPrivateFieldGet(_layers, this)) {
    let key = _classPrivateFieldGet(_layers, this)[i];
    if (this.settings[key] && this.settings[key].show) {
      let options = _objectSpread({}, this.settings[key]);
      switch (key) {
        case 'stroma':
          _classPrivateFieldGet(_draw, this).svg((0,_components_stroma__WEBPACK_IMPORTED_MODULE_11__["default"])(_objectSpread({}, options)));
          break;
        case 'thylakoidmembrane':
          _classPrivateFieldGet(_draw, this).svg((0,_components_thylakoidmembrane__WEBPACK_IMPORTED_MODULE_9__["default"])(_objectSpread({}, options)));
          break;
        case 'lumen':
          _classPrivateFieldGet(_draw, this).svg((0,_components_lumen__WEBPACK_IMPORTED_MODULE_10__["default"])(_objectSpread({}, options)));
          break;
        case 'plastoquinone':
          _classPrivateFieldGet(_draw, this).svg((0,_components_plastoquinone__WEBPACK_IMPORTED_MODULE_20__["default"])(_objectSpread({}, options)));
          break;
        case 'plastocyanin':
          _classPrivateFieldGet(_draw, this).svg((0,_components_plastocyanin__WEBPACK_IMPORTED_MODULE_15__["default"])(_objectSpread({}, options)));
          break;
        case 'cytochrome-c6':
          _classPrivateFieldGet(_draw, this).svg((0,_components_cytochrome_c6__WEBPACK_IMPORTED_MODULE_19__["default"])(_objectSpread({}, options)));
          break;
        case 'photosystem-i':
          _classPrivateFieldGet(_draw, this).svg((0,_components_photosystem_i__WEBPACK_IMPORTED_MODULE_16__["default"])(_objectSpread({}, options)));
          break;
        case 'atpsynthase':
          _classPrivateFieldGet(_draw, this).svg((0,_components_atp_synthase__WEBPACK_IMPORTED_MODULE_17__["default"])(_objectSpread({}, options)));
          break;
        case 'photosystem-ii':
          _classPrivateFieldGet(_draw, this).svg((0,_components_photosystem_ii__WEBPACK_IMPORTED_MODULE_12__["default"])(_objectSpread({}, options)));
          break;
        case 'photosystem-ii-repair':
          _classPrivateFieldGet(_draw, this).svg((0,_components_photosystem_ii_repair__WEBPACK_IMPORTED_MODULE_13__["default"])(_objectSpread({}, options)));
          break;
        case 'cytochrome-b6f':
          _classPrivateFieldGet(_draw, this).svg((0,_components_cytochrome_b6f__WEBPACK_IMPORTED_MODULE_14__["default"])(_objectSpread({}, options)));
          break;
        case 'vdx':
          _classPrivateFieldGet(_draw, this).svg((0,_components_vdx__WEBPACK_IMPORTED_MODULE_18__["default"])(_objectSpread({}, options)));
          break;
        case 'ferredoxin':
          _classPrivateFieldGet(_draw, this).svg((0,_components_ferredoxin__WEBPACK_IMPORTED_MODULE_21__["default"])(_objectSpread({}, options)));
          break;
        case 'fnr':
          _classPrivateFieldGet(_draw, this).svg((0,_components_fnr__WEBPACK_IMPORTED_MODULE_22__["default"])(_objectSpread({}, options)));
          break;
        case 'electron-flux':
          _classPrivateFieldGet(_draw, this).svg((0,_components_electron_flux__WEBPACK_IMPORTED_MODULE_23__["default"])(_objectSpread({}, options)));
          break;
        case 'proton-flux':
          _classPrivateFieldGet(_draw, this).svg((0,_components_proton_flux__WEBPACK_IMPORTED_MODULE_24__["default"])(_objectSpread({}, options)));
          break;
        case 'ptox':
          _classPrivateFieldGet(_draw, this).svg((0,_components_ptox__WEBPACK_IMPORTED_MODULE_25__["default"])(_objectSpread({}, options)));
          break;
        case 'ion-channels':
          _classPrivateFieldGet(_draw, this).svg((0,_components_ion_channels__WEBPACK_IMPORTED_MODULE_26__["default"])(_objectSpread({}, options)));
          break;
        case 'ion-flux':
          _classPrivateFieldGet(_draw, this).svg((0,_components_ion_flux__WEBPACK_IMPORTED_MODULE_27__["default"])(_objectSpread({}, options)));
          break;
        case 'quenching':
          _classPrivateFieldGet(_draw, this).svg((0,_components_quenching__WEBPACK_IMPORTED_MODULE_28__["default"])(_objectSpread({}, options)));
          break;
      }
    }
  }
}
function _getNestedChanges(obj1, obj2) {
  const changes = {};
  for (const key in obj2) {
    const val1 = obj1 === null || obj1 === void 0 ? void 0 : obj1[key];
    const val2 = obj2[key];
    if (lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_3___default()(val1) && lodash_isPlainObject__WEBPACK_IMPORTED_MODULE_3___default()(val2)) {
      // Recursively check nested objects
      const nestedChanges = _assertClassBrand(_Photosynthesis_brand, this, _getNestedChanges).call(this, val1, val2);
      if (Object.keys(nestedChanges).length > 0) {
        changes[key] = nestedChanges;
      }
    } else if (!lodash_isEqual__WEBPACK_IMPORTED_MODULE_2___default()(val1, val2)) {
      changes[key] = val2;
    }
  }
  return changes;
}
function _settingsJSON() {
  let s = {};
  for (let i in _classPrivateFieldGet(_componentSettings, this)) {
    s[_classPrivateFieldGet(_componentSettings, this)[i].id] = {};
    for (let a of Object.entries(_classPrivateFieldGet(_componentSettings, this)[i])) {
      if (!['id', 'disabled', 'options', 'headerTitle'].includes(a[0])) s[_classPrivateFieldGet(_componentSettings, this)[i].id][a[0]] = a[1];
      if (a[0] === 'options') {
        for (let b of a[1]) {
          if (b.name) s[_classPrivateFieldGet(_componentSettings, this)[i].id][b.name] = b.value;
        }
      }
    }
  }
  return s;
}
function _elementInputCheck() {
  let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'check';
  let {
    value = true,
    label = 'label'
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let id = "ps-" + crypto.randomUUID();
  return "<div class=\"form-check mb-1\">\n      <input class=\"form-check-input\" name=\"".concat(name, "\" type=\"checkbox\" value=\"", true, "\" id=\"").concat(id, "\" ").concat(value ? 'checked' : '', ">\n      <label class=\"form-check-label\" for=\"").concat(id, "\">").concat(label, "</label>\n    </div>");
}
function _elementInputSwitch() {
  let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'switch';
  let {
    value = true,
    label = 'label',
    disabled = false
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let id = "ps-" + crypto.randomUUID();
  return "<div class=\"form-check form-switch fs-6\" style=\"position:relative; margin:-2.1rem .5rem .6rem .5rem; z-index:10; width:2em;\">\n    <input class=\"form-check-input\" type=\"checkbox\" role=\"switch\" name=\"".concat(name, "\" value=\"", true, "\" id=\"").concat(id, "\" ").concat(value ? 'checked' : '', " ").concat(disabled ? 'disabled' : '', " switch>\n    <label class=\"form-check-label\" for=\"").concat(id, "\">").concat(label, "</label>\n  </div>");
}
function _elementInputText() {
  let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'text';
  let {
    value = 'Text',
    label = 'label'
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let id = "ps-" + crypto.randomUUID();
  return "<div class=\"mb-1\">\n      <label for=\"".concat(id, "\" class=\"form-label\">").concat(label, "</label>\n      <input type=\"text\" class=\"form-control form-control\" name=\"").concat(name, "\" id=\"").concat(id, "\" placeholder=\"").concat(value, "\" value=\"").concat(value, "\">\n    </div>");
}
function _elementInputColor() {
  let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'color';
  let {
    value = '#000000',
    label = 'label'
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let id = "ps-" + crypto.randomUUID();
  return "<div class=\"d-flex\">\n      <input type=\"color\" class=\"form-control form-control-color\" name=\"".concat(name, "\" id=\"").concat(id, "\" value=\"").concat(value, "\" title=\"Choose ").concat(label, " color\">\n      <label for=\"").concat(id, "\" class=\"col-sm-9 col-form-label\">").concat(label, "</label>\n    </div>");
}
function _elementInputRange() {
  let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'range';
  let {
    value = -1,
    label = 'label',
    step = 1,
    min = 0,
    max = 1
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let id = "ps-" + crypto.randomUUID();
  return "<div class=\"mt-1\">\n    <label for=\"".concat(id, "\" class=\"form-label\" style=\"margin-bottom:-1.5rem\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"bi\" viewBox=\"0 0 16 16\">\n        <path d=\"M8 1.99911C7.72386 1.99911 7.5 2.22296 7.5 2.49911L7.5 8.29211L5.354 6.14511C5.15849 5.9496 4.84151 5.9496 4.646 6.14511C4.45049 6.34062 4.45049 6.6576 4.646 6.85311L7.646 9.85311C7.7398 9.94715 7.86717 10 8 10C8.13283 10 8.2602 9.94715 8.354 9.85311L11.354 6.85311C11.5495 6.6576 11.5495 6.34062 11.354 6.14511C11.1585 5.9496 10.8415 5.9496 10.646 6.14511L8.5 8.29211L8.5 2.49911C8.5 2.22296 8.27614 1.99911 8 1.99911ZM1 12.5C1 12.2239 1.22386 12 1.5 12L14.5 12C14.7761 12 15 12.2239 15 12.5C15 12.7761 14.7761 13 14.5 13L1.5 13C1.22386 13 1 12.7761 1 12.5Z\" fill=\"#000000\" fill-rule=\"nonzero\" opacity=\"1\" stroke=\"none\"/>\n      </svg>\n      ").concat(label, "\n    </label>\n    <input type=\"range\" class=\"form-range\" name=\"").concat(name, "\" id=\"").concat(id, "\" value=\"").concat(value, "\" min=\"").concat(min, "\" max=\"").concat(max, "\" step=\"").concat(step, "\">      \n    </div>");
}
})();

__webpack_exports__ = __webpack_exports__["default"];
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=photosynthesis.js.map